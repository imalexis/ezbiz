package ezbiz

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"

	"entgo.io/contrib/entgql"
	"ezbiz.com/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	// Ent framework already provides Noder,
	// What we can do is receive id, and then pass to Ent framework
	// r.client is database handle, we can use it to query
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// EntForms is the resolver for the entForms field.
func (r *queryResolver) EntForms(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.EntFormWhereInput) (*ent.EntFormConnection, error) {
	return r.client.EntForm.Query().Paginate(ctx, after, first, before, last, ent.WithEntFormFilter(where.Filter))
}

// EntFormQuestions is the resolver for the entFormQuestions field.
func (r *queryResolver) EntFormQuestions(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.EntFormQuestionWhereInput) (*ent.EntFormQuestionConnection, error) {
	return r.client.EntFormQuestion.Query().Paginate(ctx, after, first, before, last, ent.WithEntFormQuestionFilter(where.Filter))
}

// FormInstances is the resolver for the formInstances field.
func (r *queryResolver) FormInstances(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, where *ent.FormInstanceWhereInput) (*ent.FormInstanceConnection, error) {
	return r.client.FormInstance.Query().Paginate(ctx, after, first, before, last, ent.WithFormInstanceFilter(where.Filter))
}

// FormSpecs is the resolver for the formSpecs field.
func (r *queryResolver) FormSpecs(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.FormSpecOrder, where *ent.FormSpecWhereInput) (*ent.FormSpecConnection, error) {
	return r.client.FormSpec.Query().Paginate(ctx, after, first, before, last, ent.WithFormSpecOrder(orderBy), ent.WithFormSpecFilter(where.Filter))
}

// Questions is the resolver for the questions field.
func (r *queryResolver) Questions(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.QuestionOrder, where *ent.QuestionWhereInput) (*ent.QuestionConnection, error) {
	return r.client.Question.Query().Paginate(ctx, after, first, before, last, ent.WithQuestionOrder(orderBy), ent.WithQuestionFilter(where.Filter))
}

// QuestionGroups is the resolver for the questionGroups field.
func (r *queryResolver) QuestionGroups(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.QuestionGroupOrder, where *ent.QuestionGroupWhereInput) (*ent.QuestionGroupConnection, error) {
	return r.client.QuestionGroup.Query().Paginate(ctx, after, first, before, last, ent.WithQuestionGroupOrder(orderBy), ent.WithQuestionGroupFilter(where.Filter))
}

// QuestionResponses is the resolver for the questionResponses field.
func (r *queryResolver) QuestionResponses(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.QuestionResponseOrder, where *ent.QuestionResponseWhereInput) (*ent.QuestionResponseConnection, error) {
	return r.client.QuestionResponse.Query().Paginate(ctx, after, first, before, last, ent.WithQuestionResponseOrder(orderBy), ent.WithQuestionResponseFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.UserOrder, where *ent.UserWhereInput) (*ent.UserConnection, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
