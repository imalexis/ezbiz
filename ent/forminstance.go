// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/user"
)

// FormInstance is the model entity for the FormInstance schema.
type FormInstance struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status forminstance.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FormInstanceQuery when eager-loading is set.
	Edges                    FormInstanceEdges `json:"edges"`
	form_spec_form_instances *int
	user_form_instances      *int
	selectValues             sql.SelectValues
}

// FormInstanceEdges holds the relations/edges for other nodes in the graph.
type FormInstanceEdges struct {
	// FormSpec holds the value of the form_spec edge.
	FormSpec *FormSpec `json:"form_spec,omitempty"`
	// QuestionResponse holds the value of the question_response edge.
	QuestionResponse []*QuestionResponse `json:"question_response,omitempty"`
	// Users holds the value of the users edge.
	Users *User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [3]map[string]int

	namedQuestionResponse map[string][]*QuestionResponse
}

// FormSpecOrErr returns the FormSpec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormInstanceEdges) FormSpecOrErr() (*FormSpec, error) {
	if e.loadedTypes[0] {
		if e.FormSpec == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: formspec.Label}
		}
		return e.FormSpec, nil
	}
	return nil, &NotLoadedError{edge: "form_spec"}
}

// QuestionResponseOrErr returns the QuestionResponse value or an error if the edge
// was not loaded in eager-loading.
func (e FormInstanceEdges) QuestionResponseOrErr() ([]*QuestionResponse, error) {
	if e.loadedTypes[1] {
		return e.QuestionResponse, nil
	}
	return nil, &NotLoadedError{edge: "question_response"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FormInstanceEdges) UsersOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.Users == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FormInstance) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case forminstance.FieldID:
			values[i] = new(sql.NullInt64)
		case forminstance.FieldStatus:
			values[i] = new(sql.NullString)
		case forminstance.ForeignKeys[0]: // form_spec_form_instances
			values[i] = new(sql.NullInt64)
		case forminstance.ForeignKeys[1]: // user_form_instances
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FormInstance fields.
func (fi *FormInstance) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case forminstance.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case forminstance.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fi.Status = forminstance.Status(value.String)
			}
		case forminstance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field form_spec_form_instances", value)
			} else if value.Valid {
				fi.form_spec_form_instances = new(int)
				*fi.form_spec_form_instances = int(value.Int64)
			}
		case forminstance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_form_instances", value)
			} else if value.Valid {
				fi.user_form_instances = new(int)
				*fi.user_form_instances = int(value.Int64)
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FormInstance.
// This includes values selected through modifiers, order, etc.
func (fi *FormInstance) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// QueryFormSpec queries the "form_spec" edge of the FormInstance entity.
func (fi *FormInstance) QueryFormSpec() *FormSpecQuery {
	return NewFormInstanceClient(fi.config).QueryFormSpec(fi)
}

// QueryQuestionResponse queries the "question_response" edge of the FormInstance entity.
func (fi *FormInstance) QueryQuestionResponse() *QuestionResponseQuery {
	return NewFormInstanceClient(fi.config).QueryQuestionResponse(fi)
}

// QueryUsers queries the "users" edge of the FormInstance entity.
func (fi *FormInstance) QueryUsers() *UserQuery {
	return NewFormInstanceClient(fi.config).QueryUsers(fi)
}

// Update returns a builder for updating this FormInstance.
// Note that you need to call FormInstance.Unwrap() before calling this method if this FormInstance
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FormInstance) Update() *FormInstanceUpdateOne {
	return NewFormInstanceClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FormInstance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FormInstance) Unwrap() *FormInstance {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FormInstance is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FormInstance) String() string {
	var builder strings.Builder
	builder.WriteString("FormInstance(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", fi.Status))
	builder.WriteByte(')')
	return builder.String()
}

// NamedQuestionResponse returns the QuestionResponse named value or an error if the edge was not
// loaded in eager-loading with this name.
func (fi *FormInstance) NamedQuestionResponse(name string) ([]*QuestionResponse, error) {
	if fi.Edges.namedQuestionResponse == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := fi.Edges.namedQuestionResponse[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (fi *FormInstance) appendNamedQuestionResponse(name string, edges ...*QuestionResponse) {
	if fi.Edges.namedQuestionResponse == nil {
		fi.Edges.namedQuestionResponse = make(map[string][]*QuestionResponse)
	}
	if len(edges) == 0 {
		fi.Edges.namedQuestionResponse[name] = []*QuestionResponse{}
	} else {
		fi.Edges.namedQuestionResponse[name] = append(fi.Edges.namedQuestionResponse[name], edges...)
	}
}

// FormInstances is a parsable slice of FormInstance.
type FormInstances []*FormInstance
