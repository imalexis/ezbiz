// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
)

// EntFormQuestionCreate is the builder for creating a EntFormQuestion entity.
type EntFormQuestionCreate struct {
	config
	mutation *EntFormQuestionMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (efqc *EntFormQuestionCreate) SetTitle(s string) *EntFormQuestionCreate {
	efqc.mutation.SetTitle(s)
	return efqc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableTitle(s *string) *EntFormQuestionCreate {
	if s != nil {
		efqc.SetTitle(*s)
	}
	return efqc
}

// SetLabel sets the "label" field.
func (efqc *EntFormQuestionCreate) SetLabel(s string) *EntFormQuestionCreate {
	efqc.mutation.SetLabel(s)
	return efqc
}

// SetType sets the "type" field.
func (efqc *EntFormQuestionCreate) SetType(e entformquestion.Type) *EntFormQuestionCreate {
	efqc.mutation.SetType(e)
	return efqc
}

// SetRequired sets the "required" field.
func (efqc *EntFormQuestionCreate) SetRequired(b bool) *EntFormQuestionCreate {
	efqc.mutation.SetRequired(b)
	return efqc
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableRequired(b *bool) *EntFormQuestionCreate {
	if b != nil {
		efqc.SetRequired(*b)
	}
	return efqc
}

// SetExtraData sets the "extra_data" field.
func (efqc *EntFormQuestionCreate) SetExtraData(s string) *EntFormQuestionCreate {
	efqc.mutation.SetExtraData(s)
	return efqc
}

// SetNillableExtraData sets the "extra_data" field if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableExtraData(s *string) *EntFormQuestionCreate {
	if s != nil {
		efqc.SetExtraData(*s)
	}
	return efqc
}

// SetCreatedAt sets the "created_at" field.
func (efqc *EntFormQuestionCreate) SetCreatedAt(t time.Time) *EntFormQuestionCreate {
	efqc.mutation.SetCreatedAt(t)
	return efqc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableCreatedAt(t *time.Time) *EntFormQuestionCreate {
	if t != nil {
		efqc.SetCreatedAt(*t)
	}
	return efqc
}

// SetUpdatedAt sets the "updated_at" field.
func (efqc *EntFormQuestionCreate) SetUpdatedAt(t time.Time) *EntFormQuestionCreate {
	efqc.mutation.SetUpdatedAt(t)
	return efqc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableUpdatedAt(t *time.Time) *EntFormQuestionCreate {
	if t != nil {
		efqc.SetUpdatedAt(*t)
	}
	return efqc
}

// SetCreatedBy sets the "created_by" field.
func (efqc *EntFormQuestionCreate) SetCreatedBy(i int) *EntFormQuestionCreate {
	efqc.mutation.SetCreatedBy(i)
	return efqc
}

// SetFormID sets the "form" edge to the EntForm entity by ID.
func (efqc *EntFormQuestionCreate) SetFormID(id int) *EntFormQuestionCreate {
	efqc.mutation.SetFormID(id)
	return efqc
}

// SetNillableFormID sets the "form" edge to the EntForm entity by ID if the given value is not nil.
func (efqc *EntFormQuestionCreate) SetNillableFormID(id *int) *EntFormQuestionCreate {
	if id != nil {
		efqc = efqc.SetFormID(*id)
	}
	return efqc
}

// SetForm sets the "form" edge to the EntForm entity.
func (efqc *EntFormQuestionCreate) SetForm(e *EntForm) *EntFormQuestionCreate {
	return efqc.SetFormID(e.ID)
}

// Mutation returns the EntFormQuestionMutation object of the builder.
func (efqc *EntFormQuestionCreate) Mutation() *EntFormQuestionMutation {
	return efqc.mutation
}

// Save creates the EntFormQuestion in the database.
func (efqc *EntFormQuestionCreate) Save(ctx context.Context) (*EntFormQuestion, error) {
	efqc.defaults()
	return withHooks(ctx, efqc.sqlSave, efqc.mutation, efqc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (efqc *EntFormQuestionCreate) SaveX(ctx context.Context) *EntFormQuestion {
	v, err := efqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efqc *EntFormQuestionCreate) Exec(ctx context.Context) error {
	_, err := efqc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efqc *EntFormQuestionCreate) ExecX(ctx context.Context) {
	if err := efqc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (efqc *EntFormQuestionCreate) defaults() {
	if _, ok := efqc.mutation.Title(); !ok {
		v := entformquestion.DefaultTitle
		efqc.mutation.SetTitle(v)
	}
	if _, ok := efqc.mutation.Required(); !ok {
		v := entformquestion.DefaultRequired
		efqc.mutation.SetRequired(v)
	}
	if _, ok := efqc.mutation.CreatedAt(); !ok {
		v := entformquestion.DefaultCreatedAt()
		efqc.mutation.SetCreatedAt(v)
	}
	if _, ok := efqc.mutation.UpdatedAt(); !ok {
		v := entformquestion.DefaultUpdatedAt()
		efqc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (efqc *EntFormQuestionCreate) check() error {
	if _, ok := efqc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "EntFormQuestion.title"`)}
	}
	if _, ok := efqc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "EntFormQuestion.label"`)}
	}
	if _, ok := efqc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "EntFormQuestion.type"`)}
	}
	if v, ok := efqc.mutation.GetType(); ok {
		if err := entformquestion.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "EntFormQuestion.type": %w`, err)}
		}
	}
	if _, ok := efqc.mutation.Required(); !ok {
		return &ValidationError{Name: "required", err: errors.New(`ent: missing required field "EntFormQuestion.required"`)}
	}
	if _, ok := efqc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "EntFormQuestion.created_at"`)}
	}
	if _, ok := efqc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "EntFormQuestion.updated_at"`)}
	}
	if _, ok := efqc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "EntFormQuestion.created_by"`)}
	}
	return nil
}

func (efqc *EntFormQuestionCreate) sqlSave(ctx context.Context) (*EntFormQuestion, error) {
	if err := efqc.check(); err != nil {
		return nil, err
	}
	_node, _spec := efqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, efqc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	efqc.mutation.id = &_node.ID
	efqc.mutation.done = true
	return _node, nil
}

func (efqc *EntFormQuestionCreate) createSpec() (*EntFormQuestion, *sqlgraph.CreateSpec) {
	var (
		_node = &EntFormQuestion{config: efqc.config}
		_spec = sqlgraph.NewCreateSpec(entformquestion.Table, sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt))
	)
	if value, ok := efqc.mutation.Title(); ok {
		_spec.SetField(entformquestion.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := efqc.mutation.Label(); ok {
		_spec.SetField(entformquestion.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := efqc.mutation.GetType(); ok {
		_spec.SetField(entformquestion.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := efqc.mutation.Required(); ok {
		_spec.SetField(entformquestion.FieldRequired, field.TypeBool, value)
		_node.Required = value
	}
	if value, ok := efqc.mutation.ExtraData(); ok {
		_spec.SetField(entformquestion.FieldExtraData, field.TypeString, value)
		_node.ExtraData = value
	}
	if value, ok := efqc.mutation.CreatedAt(); ok {
		_spec.SetField(entformquestion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := efqc.mutation.UpdatedAt(); ok {
		_spec.SetField(entformquestion.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := efqc.mutation.CreatedBy(); ok {
		_spec.SetField(entformquestion.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if nodes := efqc.mutation.FormIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entformquestion.FormTable,
			Columns: []string{entformquestion.FormColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entform.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ent_form_questions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// EntFormQuestionCreateBulk is the builder for creating many EntFormQuestion entities in bulk.
type EntFormQuestionCreateBulk struct {
	config
	err      error
	builders []*EntFormQuestionCreate
}

// Save creates the EntFormQuestion entities in the database.
func (efqcb *EntFormQuestionCreateBulk) Save(ctx context.Context) ([]*EntFormQuestion, error) {
	if efqcb.err != nil {
		return nil, efqcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(efqcb.builders))
	nodes := make([]*EntFormQuestion, len(efqcb.builders))
	mutators := make([]Mutator, len(efqcb.builders))
	for i := range efqcb.builders {
		func(i int, root context.Context) {
			builder := efqcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EntFormQuestionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, efqcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, efqcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, efqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (efqcb *EntFormQuestionCreateBulk) SaveX(ctx context.Context) []*EntFormQuestion {
	v, err := efqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (efqcb *EntFormQuestionCreateBulk) Exec(ctx context.Context) error {
	_, err := efqcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efqcb *EntFormQuestionCreateBulk) ExecX(ctx context.Context) {
	if err := efqcb.Exec(ctx); err != nil {
		panic(err)
	}
}
