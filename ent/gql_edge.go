// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (ef *EntForm) Questions(ctx context.Context) (result []*EntFormQuestion, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ef.NamedQuestions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ef.Edges.QuestionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ef.QueryQuestions().All(ctx)
	}
	return result, err
}

func (efq *EntFormQuestion) Form(ctx context.Context) (*EntForm, error) {
	result, err := efq.Edges.FormOrErr()
	if IsNotLoaded(err) {
		result, err = efq.QueryForm().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fi *FormInstance) FormSpec(ctx context.Context) (*FormSpec, error) {
	result, err := fi.Edges.FormSpecOrErr()
	if IsNotLoaded(err) {
		result, err = fi.QueryFormSpec().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fi *FormInstance) QuestionResponse(ctx context.Context) (result []*QuestionResponse, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = fi.NamedQuestionResponse(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = fi.Edges.QuestionResponseOrErr()
	}
	if IsNotLoaded(err) {
		result, err = fi.QueryQuestionResponse().All(ctx)
	}
	return result, err
}

func (fi *FormInstance) Users(ctx context.Context) (*User, error) {
	result, err := fi.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = fi.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (fs *FormSpec) QuestionGroups(ctx context.Context) (result []*QuestionGroup, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = fs.NamedQuestionGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = fs.Edges.QuestionGroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = fs.QueryQuestionGroups().All(ctx)
	}
	return result, err
}

func (fs *FormSpec) FormInstances(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *FormInstanceWhereInput,
) (*FormInstanceConnection, error) {
	opts := []FormInstancePaginateOption{
		WithFormInstanceFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := fs.Edges.totalCount[1][alias]
	if nodes, err := fs.NamedFormInstances(alias); err == nil || hasTotalCount {
		pager, err := newFormInstancePager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FormInstanceConnection{Edges: []*FormInstanceEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return fs.QueryFormInstances().Paginate(ctx, after, first, before, last, opts...)
}

func (fs *FormSpec) Owner(ctx context.Context) (*User, error) {
	result, err := fs.Edges.OwnerOrErr()
	if IsNotLoaded(err) {
		result, err = fs.QueryOwner().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *Question) FromQuestionGroup(ctx context.Context) (*QuestionGroup, error) {
	result, err := q.Edges.FromQuestionGroupOrErr()
	if IsNotLoaded(err) {
		result, err = q.QueryFromQuestionGroup().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (q *Question) QuestionResponse(ctx context.Context) (result []*QuestionResponse, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = q.NamedQuestionResponse(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = q.Edges.QuestionResponseOrErr()
	}
	if IsNotLoaded(err) {
		result, err = q.QueryQuestionResponse().All(ctx)
	}
	return result, err
}

func (qg *QuestionGroup) Question(ctx context.Context) (result []*Question, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = qg.NamedQuestion(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = qg.Edges.QuestionOrErr()
	}
	if IsNotLoaded(err) {
		result, err = qg.QueryQuestion().All(ctx)
	}
	return result, err
}

func (qg *QuestionGroup) FormSpec(ctx context.Context) (*FormSpec, error) {
	result, err := qg.Edges.FormSpecOrErr()
	if IsNotLoaded(err) {
		result, err = qg.QueryFormSpec().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (qr *QuestionResponse) Question(ctx context.Context) (*Question, error) {
	result, err := qr.Edges.QuestionOrErr()
	if IsNotLoaded(err) {
		result, err = qr.QueryQuestion().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (qr *QuestionResponse) FormInstance(ctx context.Context) (*FormInstance, error) {
	result, err := qr.Edges.FormInstanceOrErr()
	if IsNotLoaded(err) {
		result, err = qr.QueryFormInstance().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) FormSpecs(ctx context.Context) (result []*FormSpec, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFormSpecs(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FormSpecsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFormSpecs().All(ctx)
	}
	return result, err
}

func (u *User) FormInstances(ctx context.Context) (result []*FormInstance, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedFormInstances(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.FormInstancesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryFormInstances().All(ctx)
	}
	return result, err
}
