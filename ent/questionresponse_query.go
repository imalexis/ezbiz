// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questionresponse"
)

// QuestionResponseQuery is the builder for querying QuestionResponse entities.
type QuestionResponseQuery struct {
	config
	ctx              *QueryContext
	order            []questionresponse.OrderOption
	inters           []Interceptor
	predicates       []predicate.QuestionResponse
	withQuestion     *QuestionQuery
	withFormInstance *FormInstanceQuery
	withFKs          bool
	modifiers        []func(*sql.Selector)
	loadTotal        []func(context.Context, []*QuestionResponse) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuestionResponseQuery builder.
func (qrq *QuestionResponseQuery) Where(ps ...predicate.QuestionResponse) *QuestionResponseQuery {
	qrq.predicates = append(qrq.predicates, ps...)
	return qrq
}

// Limit the number of records to be returned by this query.
func (qrq *QuestionResponseQuery) Limit(limit int) *QuestionResponseQuery {
	qrq.ctx.Limit = &limit
	return qrq
}

// Offset to start from.
func (qrq *QuestionResponseQuery) Offset(offset int) *QuestionResponseQuery {
	qrq.ctx.Offset = &offset
	return qrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qrq *QuestionResponseQuery) Unique(unique bool) *QuestionResponseQuery {
	qrq.ctx.Unique = &unique
	return qrq
}

// Order specifies how the records should be ordered.
func (qrq *QuestionResponseQuery) Order(o ...questionresponse.OrderOption) *QuestionResponseQuery {
	qrq.order = append(qrq.order, o...)
	return qrq
}

// QueryQuestion chains the current query on the "question" edge.
func (qrq *QuestionResponseQuery) QueryQuestion() *QuestionQuery {
	query := (&QuestionClient{config: qrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questionresponse.Table, questionresponse.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionresponse.QuestionTable, questionresponse.QuestionColumn),
		)
		fromU = sqlgraph.SetNeighbors(qrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFormInstance chains the current query on the "form_instance" edge.
func (qrq *QuestionResponseQuery) QueryFormInstance() *FormInstanceQuery {
	query := (&FormInstanceClient{config: qrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(questionresponse.Table, questionresponse.FieldID, selector),
			sqlgraph.To(forminstance.Table, forminstance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, questionresponse.FormInstanceTable, questionresponse.FormInstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(qrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuestionResponse entity from the query.
// Returns a *NotFoundError when no QuestionResponse was found.
func (qrq *QuestionResponseQuery) First(ctx context.Context) (*QuestionResponse, error) {
	nodes, err := qrq.Limit(1).All(setContextOp(ctx, qrq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{questionresponse.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qrq *QuestionResponseQuery) FirstX(ctx context.Context) *QuestionResponse {
	node, err := qrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuestionResponse ID from the query.
// Returns a *NotFoundError when no QuestionResponse ID was found.
func (qrq *QuestionResponseQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qrq.Limit(1).IDs(setContextOp(ctx, qrq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{questionresponse.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qrq *QuestionResponseQuery) FirstIDX(ctx context.Context) int {
	id, err := qrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuestionResponse entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuestionResponse entity is found.
// Returns a *NotFoundError when no QuestionResponse entities are found.
func (qrq *QuestionResponseQuery) Only(ctx context.Context) (*QuestionResponse, error) {
	nodes, err := qrq.Limit(2).All(setContextOp(ctx, qrq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{questionresponse.Label}
	default:
		return nil, &NotSingularError{questionresponse.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qrq *QuestionResponseQuery) OnlyX(ctx context.Context) *QuestionResponse {
	node, err := qrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuestionResponse ID in the query.
// Returns a *NotSingularError when more than one QuestionResponse ID is found.
// Returns a *NotFoundError when no entities are found.
func (qrq *QuestionResponseQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qrq.Limit(2).IDs(setContextOp(ctx, qrq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{questionresponse.Label}
	default:
		err = &NotSingularError{questionresponse.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qrq *QuestionResponseQuery) OnlyIDX(ctx context.Context) int {
	id, err := qrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuestionResponses.
func (qrq *QuestionResponseQuery) All(ctx context.Context) ([]*QuestionResponse, error) {
	ctx = setContextOp(ctx, qrq.ctx, "All")
	if err := qrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QuestionResponse, *QuestionResponseQuery]()
	return withInterceptors[[]*QuestionResponse](ctx, qrq, qr, qrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qrq *QuestionResponseQuery) AllX(ctx context.Context) []*QuestionResponse {
	nodes, err := qrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuestionResponse IDs.
func (qrq *QuestionResponseQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qrq.ctx.Unique == nil && qrq.path != nil {
		qrq.Unique(true)
	}
	ctx = setContextOp(ctx, qrq.ctx, "IDs")
	if err = qrq.Select(questionresponse.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qrq *QuestionResponseQuery) IDsX(ctx context.Context) []int {
	ids, err := qrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qrq *QuestionResponseQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qrq.ctx, "Count")
	if err := qrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qrq, querierCount[*QuestionResponseQuery](), qrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qrq *QuestionResponseQuery) CountX(ctx context.Context) int {
	count, err := qrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qrq *QuestionResponseQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qrq.ctx, "Exist")
	switch _, err := qrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qrq *QuestionResponseQuery) ExistX(ctx context.Context) bool {
	exist, err := qrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuestionResponseQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qrq *QuestionResponseQuery) Clone() *QuestionResponseQuery {
	if qrq == nil {
		return nil
	}
	return &QuestionResponseQuery{
		config:           qrq.config,
		ctx:              qrq.ctx.Clone(),
		order:            append([]questionresponse.OrderOption{}, qrq.order...),
		inters:           append([]Interceptor{}, qrq.inters...),
		predicates:       append([]predicate.QuestionResponse{}, qrq.predicates...),
		withQuestion:     qrq.withQuestion.Clone(),
		withFormInstance: qrq.withFormInstance.Clone(),
		// clone intermediate query.
		sql:  qrq.sql.Clone(),
		path: qrq.path,
	}
}

// WithQuestion tells the query-builder to eager-load the nodes that are connected to
// the "question" edge. The optional arguments are used to configure the query builder of the edge.
func (qrq *QuestionResponseQuery) WithQuestion(opts ...func(*QuestionQuery)) *QuestionResponseQuery {
	query := (&QuestionClient{config: qrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qrq.withQuestion = query
	return qrq
}

// WithFormInstance tells the query-builder to eager-load the nodes that are connected to
// the "form_instance" edge. The optional arguments are used to configure the query builder of the edge.
func (qrq *QuestionResponseQuery) WithFormInstance(opts ...func(*FormInstanceQuery)) *QuestionResponseQuery {
	query := (&FormInstanceClient{config: qrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qrq.withFormInstance = query
	return qrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuestionResponse.Query().
//		GroupBy(questionresponse.FieldLabel).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qrq *QuestionResponseQuery) GroupBy(field string, fields ...string) *QuestionResponseGroupBy {
	qrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuestionResponseGroupBy{build: qrq}
	grbuild.flds = &qrq.ctx.Fields
	grbuild.label = questionresponse.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Label string `json:"label,omitempty"`
//	}
//
//	client.QuestionResponse.Query().
//		Select(questionresponse.FieldLabel).
//		Scan(ctx, &v)
func (qrq *QuestionResponseQuery) Select(fields ...string) *QuestionResponseSelect {
	qrq.ctx.Fields = append(qrq.ctx.Fields, fields...)
	sbuild := &QuestionResponseSelect{QuestionResponseQuery: qrq}
	sbuild.label = questionresponse.Label
	sbuild.flds, sbuild.scan = &qrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuestionResponseSelect configured with the given aggregations.
func (qrq *QuestionResponseQuery) Aggregate(fns ...AggregateFunc) *QuestionResponseSelect {
	return qrq.Select().Aggregate(fns...)
}

func (qrq *QuestionResponseQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qrq); err != nil {
				return err
			}
		}
	}
	for _, f := range qrq.ctx.Fields {
		if !questionresponse.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qrq.path != nil {
		prev, err := qrq.path(ctx)
		if err != nil {
			return err
		}
		qrq.sql = prev
	}
	return nil
}

func (qrq *QuestionResponseQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuestionResponse, error) {
	var (
		nodes       = []*QuestionResponse{}
		withFKs     = qrq.withFKs
		_spec       = qrq.querySpec()
		loadedTypes = [2]bool{
			qrq.withQuestion != nil,
			qrq.withFormInstance != nil,
		}
	)
	if qrq.withQuestion != nil || qrq.withFormInstance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, questionresponse.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QuestionResponse).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QuestionResponse{config: qrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(qrq.modifiers) > 0 {
		_spec.Modifiers = qrq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qrq.withQuestion; query != nil {
		if err := qrq.loadQuestion(ctx, query, nodes, nil,
			func(n *QuestionResponse, e *Question) { n.Edges.Question = e }); err != nil {
			return nil, err
		}
	}
	if query := qrq.withFormInstance; query != nil {
		if err := qrq.loadFormInstance(ctx, query, nodes, nil,
			func(n *QuestionResponse, e *FormInstance) { n.Edges.FormInstance = e }); err != nil {
			return nil, err
		}
	}
	for i := range qrq.loadTotal {
		if err := qrq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qrq *QuestionResponseQuery) loadQuestion(ctx context.Context, query *QuestionQuery, nodes []*QuestionResponse, init func(*QuestionResponse), assign func(*QuestionResponse, *Question)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*QuestionResponse)
	for i := range nodes {
		if nodes[i].question_question_response == nil {
			continue
		}
		fk := *nodes[i].question_question_response
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(question.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "question_question_response" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qrq *QuestionResponseQuery) loadFormInstance(ctx context.Context, query *FormInstanceQuery, nodes []*QuestionResponse, init func(*QuestionResponse), assign func(*QuestionResponse, *FormInstance)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*QuestionResponse)
	for i := range nodes {
		if nodes[i].form_instance_question_response == nil {
			continue
		}
		fk := *nodes[i].form_instance_question_response
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(forminstance.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "form_instance_question_response" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qrq *QuestionResponseQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qrq.querySpec()
	if len(qrq.modifiers) > 0 {
		_spec.Modifiers = qrq.modifiers
	}
	_spec.Node.Columns = qrq.ctx.Fields
	if len(qrq.ctx.Fields) > 0 {
		_spec.Unique = qrq.ctx.Unique != nil && *qrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qrq.driver, _spec)
}

func (qrq *QuestionResponseQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(questionresponse.Table, questionresponse.Columns, sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt))
	_spec.From = qrq.sql
	if unique := qrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qrq.path != nil {
		_spec.Unique = true
	}
	if fields := qrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionresponse.FieldID)
		for i := range fields {
			if fields[i] != questionresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qrq *QuestionResponseQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qrq.driver.Dialect())
	t1 := builder.Table(questionresponse.Table)
	columns := qrq.ctx.Fields
	if len(columns) == 0 {
		columns = questionresponse.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qrq.sql != nil {
		selector = qrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qrq.ctx.Unique != nil && *qrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range qrq.predicates {
		p(selector)
	}
	for _, p := range qrq.order {
		p(selector)
	}
	if offset := qrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuestionResponseGroupBy is the group-by builder for QuestionResponse entities.
type QuestionResponseGroupBy struct {
	selector
	build *QuestionResponseQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qrgb *QuestionResponseGroupBy) Aggregate(fns ...AggregateFunc) *QuestionResponseGroupBy {
	qrgb.fns = append(qrgb.fns, fns...)
	return qrgb
}

// Scan applies the selector query and scans the result into the given value.
func (qrgb *QuestionResponseGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qrgb.build.ctx, "GroupBy")
	if err := qrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionResponseQuery, *QuestionResponseGroupBy](ctx, qrgb.build, qrgb, qrgb.build.inters, v)
}

func (qrgb *QuestionResponseGroupBy) sqlScan(ctx context.Context, root *QuestionResponseQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qrgb.fns))
	for _, fn := range qrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qrgb.flds)+len(qrgb.fns))
		for _, f := range *qrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuestionResponseSelect is the builder for selecting fields of QuestionResponse entities.
type QuestionResponseSelect struct {
	*QuestionResponseQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qrs *QuestionResponseSelect) Aggregate(fns ...AggregateFunc) *QuestionResponseSelect {
	qrs.fns = append(qrs.fns, fns...)
	return qrs
}

// Scan applies the selector query and scans the result into the given value.
func (qrs *QuestionResponseSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qrs.ctx, "Select")
	if err := qrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuestionResponseQuery, *QuestionResponseSelect](ctx, qrs.QuestionResponseQuery, qrs, qrs.inters, v)
}

func (qrs *QuestionResponseSelect) sqlScan(ctx context.Context, root *QuestionResponseQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qrs.fns))
	for _, fn := range qrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
