// Code generated by ent, DO NOT EDIT.

package user

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldRole holds the string denoting the role field in the database.
	FieldRole = "role"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeFormSpecs holds the string denoting the form_specs edge name in mutations.
	EdgeFormSpecs = "form_specs"
	// EdgeFormInstances holds the string denoting the form_instances edge name in mutations.
	EdgeFormInstances = "form_instances"
	// Table holds the table name of the user in the database.
	Table = "users"
	// FormSpecsTable is the table that holds the form_specs relation/edge.
	FormSpecsTable = "form_specs"
	// FormSpecsInverseTable is the table name for the FormSpec entity.
	// It exists in this package in order to avoid circular dependency with the "formspec" package.
	FormSpecsInverseTable = "form_specs"
	// FormSpecsColumn is the table column denoting the form_specs relation/edge.
	FormSpecsColumn = "user_form_specs"
	// FormInstancesTable is the table that holds the form_instances relation/edge.
	FormInstancesTable = "form_instances"
	// FormInstancesInverseTable is the table name for the FormInstance entity.
	// It exists in this package in order to avoid circular dependency with the "forminstance" package.
	FormInstancesInverseTable = "form_instances"
	// FormInstancesColumn is the table column denoting the form_instances relation/edge.
	FormInstancesColumn = "user_form_instances"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldRole,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultEmail holds the default value on creation for the "email" field.
	DefaultEmail string
	// DefaultPassword holds the default value on creation for the "password" field.
	DefaultPassword string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// Role defines the type for the "role" enum field.
type Role string

// Role values.
const (
	RoleBusinessAdmin Role = "business_admin"
	RoleBusinessUser  Role = "business_user"
)

func (r Role) String() string {
	return string(r)
}

// RoleValidator is a validator for the "role" field enum values. It is called by the builders before save.
func RoleValidator(r Role) error {
	switch r {
	case RoleBusinessAdmin, RoleBusinessUser:
		return nil
	default:
		return fmt.Errorf("user: invalid enum value for role field: %q", r)
	}
}

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByRole orders the results by the role field.
func ByRole(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRole, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByFormSpecsCount orders the results by form_specs count.
func ByFormSpecsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFormSpecsStep(), opts...)
	}
}

// ByFormSpecs orders the results by form_specs terms.
func ByFormSpecs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormSpecsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFormInstancesCount orders the results by form_instances count.
func ByFormInstancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFormInstancesStep(), opts...)
	}
}

// ByFormInstances orders the results by form_instances terms.
func ByFormInstances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormInstancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFormSpecsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormSpecsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FormSpecsTable, FormSpecsColumn),
	)
}
func newFormInstancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormInstancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FormInstancesTable, FormInstancesColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Role) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Role) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Role(str)
	if err := RoleValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}
