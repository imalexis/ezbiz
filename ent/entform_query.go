// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/predicate"
)

// EntFormQuery is the builder for querying EntForm entities.
type EntFormQuery struct {
	config
	ctx                *QueryContext
	order              []entform.OrderOption
	inters             []Interceptor
	predicates         []predicate.EntForm
	withQuestions      *EntFormQuestionQuery
	modifiers          []func(*sql.Selector)
	loadTotal          []func(context.Context, []*EntForm) error
	withNamedQuestions map[string]*EntFormQuestionQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EntFormQuery builder.
func (efq *EntFormQuery) Where(ps ...predicate.EntForm) *EntFormQuery {
	efq.predicates = append(efq.predicates, ps...)
	return efq
}

// Limit the number of records to be returned by this query.
func (efq *EntFormQuery) Limit(limit int) *EntFormQuery {
	efq.ctx.Limit = &limit
	return efq
}

// Offset to start from.
func (efq *EntFormQuery) Offset(offset int) *EntFormQuery {
	efq.ctx.Offset = &offset
	return efq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (efq *EntFormQuery) Unique(unique bool) *EntFormQuery {
	efq.ctx.Unique = &unique
	return efq
}

// Order specifies how the records should be ordered.
func (efq *EntFormQuery) Order(o ...entform.OrderOption) *EntFormQuery {
	efq.order = append(efq.order, o...)
	return efq
}

// QueryQuestions chains the current query on the "questions" edge.
func (efq *EntFormQuery) QueryQuestions() *EntFormQuestionQuery {
	query := (&EntFormQuestionClient{config: efq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := efq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := efq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(entform.Table, entform.FieldID, selector),
			sqlgraph.To(entformquestion.Table, entformquestion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, entform.QuestionsTable, entform.QuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(efq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first EntForm entity from the query.
// Returns a *NotFoundError when no EntForm was found.
func (efq *EntFormQuery) First(ctx context.Context) (*EntForm, error) {
	nodes, err := efq.Limit(1).All(setContextOp(ctx, efq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{entform.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (efq *EntFormQuery) FirstX(ctx context.Context) *EntForm {
	node, err := efq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EntForm ID from the query.
// Returns a *NotFoundError when no EntForm ID was found.
func (efq *EntFormQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = efq.Limit(1).IDs(setContextOp(ctx, efq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{entform.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (efq *EntFormQuery) FirstIDX(ctx context.Context) int {
	id, err := efq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EntForm entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EntForm entity is found.
// Returns a *NotFoundError when no EntForm entities are found.
func (efq *EntFormQuery) Only(ctx context.Context) (*EntForm, error) {
	nodes, err := efq.Limit(2).All(setContextOp(ctx, efq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{entform.Label}
	default:
		return nil, &NotSingularError{entform.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (efq *EntFormQuery) OnlyX(ctx context.Context) *EntForm {
	node, err := efq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EntForm ID in the query.
// Returns a *NotSingularError when more than one EntForm ID is found.
// Returns a *NotFoundError when no entities are found.
func (efq *EntFormQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = efq.Limit(2).IDs(setContextOp(ctx, efq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{entform.Label}
	default:
		err = &NotSingularError{entform.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (efq *EntFormQuery) OnlyIDX(ctx context.Context) int {
	id, err := efq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EntForms.
func (efq *EntFormQuery) All(ctx context.Context) ([]*EntForm, error) {
	ctx = setContextOp(ctx, efq.ctx, "All")
	if err := efq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EntForm, *EntFormQuery]()
	return withInterceptors[[]*EntForm](ctx, efq, qr, efq.inters)
}

// AllX is like All, but panics if an error occurs.
func (efq *EntFormQuery) AllX(ctx context.Context) []*EntForm {
	nodes, err := efq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EntForm IDs.
func (efq *EntFormQuery) IDs(ctx context.Context) (ids []int, err error) {
	if efq.ctx.Unique == nil && efq.path != nil {
		efq.Unique(true)
	}
	ctx = setContextOp(ctx, efq.ctx, "IDs")
	if err = efq.Select(entform.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (efq *EntFormQuery) IDsX(ctx context.Context) []int {
	ids, err := efq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (efq *EntFormQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, efq.ctx, "Count")
	if err := efq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, efq, querierCount[*EntFormQuery](), efq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (efq *EntFormQuery) CountX(ctx context.Context) int {
	count, err := efq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (efq *EntFormQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, efq.ctx, "Exist")
	switch _, err := efq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (efq *EntFormQuery) ExistX(ctx context.Context) bool {
	exist, err := efq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EntFormQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (efq *EntFormQuery) Clone() *EntFormQuery {
	if efq == nil {
		return nil
	}
	return &EntFormQuery{
		config:        efq.config,
		ctx:           efq.ctx.Clone(),
		order:         append([]entform.OrderOption{}, efq.order...),
		inters:        append([]Interceptor{}, efq.inters...),
		predicates:    append([]predicate.EntForm{}, efq.predicates...),
		withQuestions: efq.withQuestions.Clone(),
		// clone intermediate query.
		sql:  efq.sql.Clone(),
		path: efq.path,
	}
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (efq *EntFormQuery) WithQuestions(opts ...func(*EntFormQuestionQuery)) *EntFormQuery {
	query := (&EntFormQuestionClient{config: efq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	efq.withQuestions = query
	return efq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EntForm.Query().
//		GroupBy(entform.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (efq *EntFormQuery) GroupBy(field string, fields ...string) *EntFormGroupBy {
	efq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EntFormGroupBy{build: efq}
	grbuild.flds = &efq.ctx.Fields
	grbuild.label = entform.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.EntForm.Query().
//		Select(entform.FieldName).
//		Scan(ctx, &v)
func (efq *EntFormQuery) Select(fields ...string) *EntFormSelect {
	efq.ctx.Fields = append(efq.ctx.Fields, fields...)
	sbuild := &EntFormSelect{EntFormQuery: efq}
	sbuild.label = entform.Label
	sbuild.flds, sbuild.scan = &efq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EntFormSelect configured with the given aggregations.
func (efq *EntFormQuery) Aggregate(fns ...AggregateFunc) *EntFormSelect {
	return efq.Select().Aggregate(fns...)
}

func (efq *EntFormQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range efq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, efq); err != nil {
				return err
			}
		}
	}
	for _, f := range efq.ctx.Fields {
		if !entform.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if efq.path != nil {
		prev, err := efq.path(ctx)
		if err != nil {
			return err
		}
		efq.sql = prev
	}
	return nil
}

func (efq *EntFormQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EntForm, error) {
	var (
		nodes       = []*EntForm{}
		_spec       = efq.querySpec()
		loadedTypes = [1]bool{
			efq.withQuestions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EntForm).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EntForm{config: efq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(efq.modifiers) > 0 {
		_spec.Modifiers = efq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, efq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := efq.withQuestions; query != nil {
		if err := efq.loadQuestions(ctx, query, nodes,
			func(n *EntForm) { n.Edges.Questions = []*EntFormQuestion{} },
			func(n *EntForm, e *EntFormQuestion) { n.Edges.Questions = append(n.Edges.Questions, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range efq.withNamedQuestions {
		if err := efq.loadQuestions(ctx, query, nodes,
			func(n *EntForm) { n.appendNamedQuestions(name) },
			func(n *EntForm, e *EntFormQuestion) { n.appendNamedQuestions(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range efq.loadTotal {
		if err := efq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (efq *EntFormQuery) loadQuestions(ctx context.Context, query *EntFormQuestionQuery, nodes []*EntForm, init func(*EntForm), assign func(*EntForm, *EntFormQuestion)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*EntForm)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.EntFormQuestion(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(entform.QuestionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ent_form_questions
		if fk == nil {
			return fmt.Errorf(`foreign-key "ent_form_questions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "ent_form_questions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (efq *EntFormQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := efq.querySpec()
	if len(efq.modifiers) > 0 {
		_spec.Modifiers = efq.modifiers
	}
	_spec.Node.Columns = efq.ctx.Fields
	if len(efq.ctx.Fields) > 0 {
		_spec.Unique = efq.ctx.Unique != nil && *efq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, efq.driver, _spec)
}

func (efq *EntFormQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(entform.Table, entform.Columns, sqlgraph.NewFieldSpec(entform.FieldID, field.TypeInt))
	_spec.From = efq.sql
	if unique := efq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if efq.path != nil {
		_spec.Unique = true
	}
	if fields := efq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entform.FieldID)
		for i := range fields {
			if fields[i] != entform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := efq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := efq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := efq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := efq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (efq *EntFormQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(efq.driver.Dialect())
	t1 := builder.Table(entform.Table)
	columns := efq.ctx.Fields
	if len(columns) == 0 {
		columns = entform.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if efq.sql != nil {
		selector = efq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if efq.ctx.Unique != nil && *efq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range efq.predicates {
		p(selector)
	}
	for _, p := range efq.order {
		p(selector)
	}
	if offset := efq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := efq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedQuestions tells the query-builder to eager-load the nodes that are connected to the "questions"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (efq *EntFormQuery) WithNamedQuestions(name string, opts ...func(*EntFormQuestionQuery)) *EntFormQuery {
	query := (&EntFormQuestionClient{config: efq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if efq.withNamedQuestions == nil {
		efq.withNamedQuestions = make(map[string]*EntFormQuestionQuery)
	}
	efq.withNamedQuestions[name] = query
	return efq
}

// EntFormGroupBy is the group-by builder for EntForm entities.
type EntFormGroupBy struct {
	selector
	build *EntFormQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (efgb *EntFormGroupBy) Aggregate(fns ...AggregateFunc) *EntFormGroupBy {
	efgb.fns = append(efgb.fns, fns...)
	return efgb
}

// Scan applies the selector query and scans the result into the given value.
func (efgb *EntFormGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, efgb.build.ctx, "GroupBy")
	if err := efgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntFormQuery, *EntFormGroupBy](ctx, efgb.build, efgb, efgb.build.inters, v)
}

func (efgb *EntFormGroupBy) sqlScan(ctx context.Context, root *EntFormQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(efgb.fns))
	for _, fn := range efgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*efgb.flds)+len(efgb.fns))
		for _, f := range *efgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*efgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := efgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EntFormSelect is the builder for selecting fields of EntForm entities.
type EntFormSelect struct {
	*EntFormQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (efs *EntFormSelect) Aggregate(fns ...AggregateFunc) *EntFormSelect {
	efs.fns = append(efs.fns, fns...)
	return efs
}

// Scan applies the selector query and scans the result into the given value.
func (efs *EntFormSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, efs.ctx, "Select")
	if err := efs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EntFormQuery, *EntFormSelect](ctx, efs.EntFormQuery, efs, efs.inters, v)
}

func (efs *EntFormSelect) sqlScan(ctx context.Context, root *EntFormQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(efs.fns))
	for _, fn := range efs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*efs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := efs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
