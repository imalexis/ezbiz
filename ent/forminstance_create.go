// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/questionresponse"
	"ezbiz.com/ent/user"
)

// FormInstanceCreate is the builder for creating a FormInstance entity.
type FormInstanceCreate struct {
	config
	mutation *FormInstanceMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (fic *FormInstanceCreate) SetStatus(f forminstance.Status) *FormInstanceCreate {
	fic.mutation.SetStatus(f)
	return fic
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fic *FormInstanceCreate) SetNillableStatus(f *forminstance.Status) *FormInstanceCreate {
	if f != nil {
		fic.SetStatus(*f)
	}
	return fic
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by ID.
func (fic *FormInstanceCreate) SetFormSpecID(id int) *FormInstanceCreate {
	fic.mutation.SetFormSpecID(id)
	return fic
}

// SetNillableFormSpecID sets the "form_spec" edge to the FormSpec entity by ID if the given value is not nil.
func (fic *FormInstanceCreate) SetNillableFormSpecID(id *int) *FormInstanceCreate {
	if id != nil {
		fic = fic.SetFormSpecID(*id)
	}
	return fic
}

// SetFormSpec sets the "form_spec" edge to the FormSpec entity.
func (fic *FormInstanceCreate) SetFormSpec(f *FormSpec) *FormInstanceCreate {
	return fic.SetFormSpecID(f.ID)
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by IDs.
func (fic *FormInstanceCreate) AddQuestionResponseIDs(ids ...int) *FormInstanceCreate {
	fic.mutation.AddQuestionResponseIDs(ids...)
	return fic
}

// AddQuestionResponse adds the "question_response" edges to the QuestionResponse entity.
func (fic *FormInstanceCreate) AddQuestionResponse(q ...*QuestionResponse) *FormInstanceCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fic.AddQuestionResponseIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (fic *FormInstanceCreate) SetUsersID(id int) *FormInstanceCreate {
	fic.mutation.SetUsersID(id)
	return fic
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (fic *FormInstanceCreate) SetNillableUsersID(id *int) *FormInstanceCreate {
	if id != nil {
		fic = fic.SetUsersID(*id)
	}
	return fic
}

// SetUsers sets the "users" edge to the User entity.
func (fic *FormInstanceCreate) SetUsers(u *User) *FormInstanceCreate {
	return fic.SetUsersID(u.ID)
}

// Mutation returns the FormInstanceMutation object of the builder.
func (fic *FormInstanceCreate) Mutation() *FormInstanceMutation {
	return fic.mutation
}

// Save creates the FormInstance in the database.
func (fic *FormInstanceCreate) Save(ctx context.Context) (*FormInstance, error) {
	fic.defaults()
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FormInstanceCreate) SaveX(ctx context.Context) *FormInstance {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FormInstanceCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FormInstanceCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fic *FormInstanceCreate) defaults() {
	if _, ok := fic.mutation.Status(); !ok {
		v := forminstance.DefaultStatus
		fic.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FormInstanceCreate) check() error {
	if _, ok := fic.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FormInstance.status"`)}
	}
	if v, ok := fic.mutation.Status(); ok {
		if err := forminstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FormInstance.status": %w`, err)}
		}
	}
	return nil
}

func (fic *FormInstanceCreate) sqlSave(ctx context.Context) (*FormInstance, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FormInstanceCreate) createSpec() (*FormInstance, *sqlgraph.CreateSpec) {
	var (
		_node = &FormInstance{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(forminstance.Table, sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt))
	)
	if value, ok := fic.mutation.Status(); ok {
		_spec.SetField(forminstance.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if nodes := fic.mutation.FormSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.FormSpecTable,
			Columns: []string{forminstance.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.form_spec_form_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.QuestionResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fic.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.UsersTable,
			Columns: []string{forminstance.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_form_instances = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FormInstanceCreateBulk is the builder for creating many FormInstance entities in bulk.
type FormInstanceCreateBulk struct {
	config
	err      error
	builders []*FormInstanceCreate
}

// Save creates the FormInstance entities in the database.
func (ficb *FormInstanceCreateBulk) Save(ctx context.Context) ([]*FormInstance, error) {
	if ficb.err != nil {
		return nil, ficb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FormInstance, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormInstanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FormInstanceCreateBulk) SaveX(ctx context.Context) []*FormInstance {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FormInstanceCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FormInstanceCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
