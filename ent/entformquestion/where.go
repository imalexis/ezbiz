// Code generated by ent, DO NOT EDIT.

package entformquestion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"ezbiz.com/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldTitle, v))
}

// Required applies equality check predicate on the "required" field. It's identical to RequiredEQ.
func Required(v bool) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldRequired, v))
}

// ExtraData applies equality check predicate on the "extra_data" field. It's identical to ExtraDataEQ.
func ExtraData(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldExtraData, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldCreatedBy, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContainsFold(FieldTitle, v))
}

// LabelEQ applies the EQ predicate on the "label" field.
func LabelEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldLabel, v))
}

// LabelNEQ applies the NEQ predicate on the "label" field.
func LabelNEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldLabel, v))
}

// LabelIn applies the In predicate on the "label" field.
func LabelIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldLabel, vs...))
}

// LabelNotIn applies the NotIn predicate on the "label" field.
func LabelNotIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldLabel, vs...))
}

// LabelGT applies the GT predicate on the "label" field.
func LabelGT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldLabel, v))
}

// LabelGTE applies the GTE predicate on the "label" field.
func LabelGTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldLabel, v))
}

// LabelLT applies the LT predicate on the "label" field.
func LabelLT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldLabel, v))
}

// LabelLTE applies the LTE predicate on the "label" field.
func LabelLTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldLabel, v))
}

// LabelContains applies the Contains predicate on the "label" field.
func LabelContains(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContains(FieldLabel, v))
}

// LabelHasPrefix applies the HasPrefix predicate on the "label" field.
func LabelHasPrefix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasPrefix(FieldLabel, v))
}

// LabelHasSuffix applies the HasSuffix predicate on the "label" field.
func LabelHasSuffix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasSuffix(FieldLabel, v))
}

// LabelEqualFold applies the EqualFold predicate on the "label" field.
func LabelEqualFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEqualFold(FieldLabel, v))
}

// LabelContainsFold applies the ContainsFold predicate on the "label" field.
func LabelContainsFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContainsFold(FieldLabel, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldType, vs...))
}

// RequiredEQ applies the EQ predicate on the "required" field.
func RequiredEQ(v bool) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldRequired, v))
}

// RequiredNEQ applies the NEQ predicate on the "required" field.
func RequiredNEQ(v bool) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldRequired, v))
}

// ExtraDataEQ applies the EQ predicate on the "extra_data" field.
func ExtraDataEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldExtraData, v))
}

// ExtraDataNEQ applies the NEQ predicate on the "extra_data" field.
func ExtraDataNEQ(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldExtraData, v))
}

// ExtraDataIn applies the In predicate on the "extra_data" field.
func ExtraDataIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldExtraData, vs...))
}

// ExtraDataNotIn applies the NotIn predicate on the "extra_data" field.
func ExtraDataNotIn(vs ...string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldExtraData, vs...))
}

// ExtraDataGT applies the GT predicate on the "extra_data" field.
func ExtraDataGT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldExtraData, v))
}

// ExtraDataGTE applies the GTE predicate on the "extra_data" field.
func ExtraDataGTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldExtraData, v))
}

// ExtraDataLT applies the LT predicate on the "extra_data" field.
func ExtraDataLT(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldExtraData, v))
}

// ExtraDataLTE applies the LTE predicate on the "extra_data" field.
func ExtraDataLTE(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldExtraData, v))
}

// ExtraDataContains applies the Contains predicate on the "extra_data" field.
func ExtraDataContains(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContains(FieldExtraData, v))
}

// ExtraDataHasPrefix applies the HasPrefix predicate on the "extra_data" field.
func ExtraDataHasPrefix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasPrefix(FieldExtraData, v))
}

// ExtraDataHasSuffix applies the HasSuffix predicate on the "extra_data" field.
func ExtraDataHasSuffix(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldHasSuffix(FieldExtraData, v))
}

// ExtraDataIsNil applies the IsNil predicate on the "extra_data" field.
func ExtraDataIsNil() predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIsNull(FieldExtraData))
}

// ExtraDataNotNil applies the NotNil predicate on the "extra_data" field.
func ExtraDataNotNil() predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotNull(FieldExtraData))
}

// ExtraDataEqualFold applies the EqualFold predicate on the "extra_data" field.
func ExtraDataEqualFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEqualFold(FieldExtraData, v))
}

// ExtraDataContainsFold applies the ContainsFold predicate on the "extra_data" field.
func ExtraDataContainsFold(v string) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldContainsFold(FieldExtraData, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v int) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.FieldLTE(FieldCreatedBy, v))
}

// HasForm applies the HasEdge predicate on the "form" edge.
func HasForm() predicate.EntFormQuestion {
	return predicate.EntFormQuestion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormTable, FormColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormWith applies the HasEdge predicate on the "form" edge with a given conditions (other predicates).
func HasFormWith(preds ...predicate.EntForm) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(func(s *sql.Selector) {
		step := newFormStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.EntFormQuestion) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.EntFormQuestion) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.EntFormQuestion) predicate.EntFormQuestion {
	return predicate.EntFormQuestion(sql.NotPredicates(p))
}
