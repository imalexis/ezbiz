// Code generated by ent, DO NOT EDIT.

package formspec

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the formspec type in the database.
	Label = "form_spec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCover holds the string denoting the cover field in the database.
	FieldCover = "cover"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// EdgeQuestionGroups holds the string denoting the question_groups edge name in mutations.
	EdgeQuestionGroups = "question_groups"
	// EdgeFormInstances holds the string denoting the form_instances edge name in mutations.
	EdgeFormInstances = "form_instances"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the formspec in the database.
	Table = "form_specs"
	// QuestionGroupsTable is the table that holds the question_groups relation/edge.
	QuestionGroupsTable = "question_groups"
	// QuestionGroupsInverseTable is the table name for the QuestionGroup entity.
	// It exists in this package in order to avoid circular dependency with the "questiongroup" package.
	QuestionGroupsInverseTable = "question_groups"
	// QuestionGroupsColumn is the table column denoting the question_groups relation/edge.
	QuestionGroupsColumn = "form_spec_question_groups"
	// FormInstancesTable is the table that holds the form_instances relation/edge.
	FormInstancesTable = "form_instances"
	// FormInstancesInverseTable is the table name for the FormInstance entity.
	// It exists in this package in order to avoid circular dependency with the "forminstance" package.
	FormInstancesInverseTable = "form_instances"
	// FormInstancesColumn is the table column denoting the form_instances relation/edge.
	FormInstancesColumn = "form_spec_form_instances"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "form_specs"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_form_specs"
)

// Columns holds all SQL columns for formspec fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCover,
	FieldDescription,
	FieldEnabled,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "form_specs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_form_specs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultName holds the default value on creation for the "name" field.
	DefaultName string
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the FormSpec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCover orders the results by the cover field.
func ByCover(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCover, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByQuestionGroupsCount orders the results by question_groups count.
func ByQuestionGroupsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionGroupsStep(), opts...)
	}
}

// ByQuestionGroups orders the results by question_groups terms.
func ByQuestionGroups(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionGroupsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFormInstancesCount orders the results by form_instances count.
func ByFormInstancesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFormInstancesStep(), opts...)
	}
}

// ByFormInstances orders the results by form_instances terms.
func ByFormInstances(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormInstancesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newQuestionGroupsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionGroupsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionGroupsTable, QuestionGroupsColumn),
	)
}
func newFormInstancesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormInstancesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FormInstancesTable, FormInstancesColumn),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
