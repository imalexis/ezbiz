// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questionresponse"
)

// QuestionResponseUpdate is the builder for updating QuestionResponse entities.
type QuestionResponseUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionResponseMutation
}

// Where appends a list predicates to the QuestionResponseUpdate builder.
func (qru *QuestionResponseUpdate) Where(ps ...predicate.QuestionResponse) *QuestionResponseUpdate {
	qru.mutation.Where(ps...)
	return qru
}

// SetLabel sets the "label" field.
func (qru *QuestionResponseUpdate) SetLabel(s string) *QuestionResponseUpdate {
	qru.mutation.SetLabel(s)
	return qru
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableLabel(s *string) *QuestionResponseUpdate {
	if s != nil {
		qru.SetLabel(*s)
	}
	return qru
}

// SetValue sets the "value" field.
func (qru *QuestionResponseUpdate) SetValue(s string) *QuestionResponseUpdate {
	qru.mutation.SetValue(s)
	return qru
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableValue(s *string) *QuestionResponseUpdate {
	if s != nil {
		qru.SetValue(*s)
	}
	return qru
}

// SetCreatedAt sets the "created_at" field.
func (qru *QuestionResponseUpdate) SetCreatedAt(t time.Time) *QuestionResponseUpdate {
	qru.mutation.SetCreatedAt(t)
	return qru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableCreatedAt(t *time.Time) *QuestionResponseUpdate {
	if t != nil {
		qru.SetCreatedAt(*t)
	}
	return qru
}

// SetUpdatedAt sets the "updated_at" field.
func (qru *QuestionResponseUpdate) SetUpdatedAt(t time.Time) *QuestionResponseUpdate {
	qru.mutation.SetUpdatedAt(t)
	return qru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableUpdatedAt(t *time.Time) *QuestionResponseUpdate {
	if t != nil {
		qru.SetUpdatedAt(*t)
	}
	return qru
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (qru *QuestionResponseUpdate) SetQuestionID(id int) *QuestionResponseUpdate {
	qru.mutation.SetQuestionID(id)
	return qru
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableQuestionID(id *int) *QuestionResponseUpdate {
	if id != nil {
		qru = qru.SetQuestionID(*id)
	}
	return qru
}

// SetQuestion sets the "question" edge to the Question entity.
func (qru *QuestionResponseUpdate) SetQuestion(q *Question) *QuestionResponseUpdate {
	return qru.SetQuestionID(q.ID)
}

// SetFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID.
func (qru *QuestionResponseUpdate) SetFormInstanceID(id int) *QuestionResponseUpdate {
	qru.mutation.SetFormInstanceID(id)
	return qru
}

// SetNillableFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID if the given value is not nil.
func (qru *QuestionResponseUpdate) SetNillableFormInstanceID(id *int) *QuestionResponseUpdate {
	if id != nil {
		qru = qru.SetFormInstanceID(*id)
	}
	return qru
}

// SetFormInstance sets the "form_instance" edge to the FormInstance entity.
func (qru *QuestionResponseUpdate) SetFormInstance(f *FormInstance) *QuestionResponseUpdate {
	return qru.SetFormInstanceID(f.ID)
}

// Mutation returns the QuestionResponseMutation object of the builder.
func (qru *QuestionResponseUpdate) Mutation() *QuestionResponseMutation {
	return qru.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (qru *QuestionResponseUpdate) ClearQuestion() *QuestionResponseUpdate {
	qru.mutation.ClearQuestion()
	return qru
}

// ClearFormInstance clears the "form_instance" edge to the FormInstance entity.
func (qru *QuestionResponseUpdate) ClearFormInstance() *QuestionResponseUpdate {
	qru.mutation.ClearFormInstance()
	return qru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qru *QuestionResponseUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qru.sqlSave, qru.mutation, qru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qru *QuestionResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := qru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qru *QuestionResponseUpdate) Exec(ctx context.Context) error {
	_, err := qru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qru *QuestionResponseUpdate) ExecX(ctx context.Context) {
	if err := qru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qru *QuestionResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(questionresponse.Table, questionresponse.Columns, sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt))
	if ps := qru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qru.mutation.Label(); ok {
		_spec.SetField(questionresponse.FieldLabel, field.TypeString, value)
	}
	if value, ok := qru.mutation.Value(); ok {
		_spec.SetField(questionresponse.FieldValue, field.TypeString, value)
	}
	if value, ok := qru.mutation.CreatedAt(); ok {
		_spec.SetField(questionresponse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qru.mutation.UpdatedAt(); ok {
		_spec.SetField(questionresponse.FieldUpdatedAt, field.TypeTime, value)
	}
	if qru.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.QuestionTable,
			Columns: []string{questionresponse.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.QuestionTable,
			Columns: []string{questionresponse.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qru.mutation.FormInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.FormInstanceTable,
			Columns: []string{questionresponse.FormInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qru.mutation.FormInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.FormInstanceTable,
			Columns: []string{questionresponse.FormInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qru.mutation.done = true
	return n, nil
}

// QuestionResponseUpdateOne is the builder for updating a single QuestionResponse entity.
type QuestionResponseUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionResponseMutation
}

// SetLabel sets the "label" field.
func (qruo *QuestionResponseUpdateOne) SetLabel(s string) *QuestionResponseUpdateOne {
	qruo.mutation.SetLabel(s)
	return qruo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableLabel(s *string) *QuestionResponseUpdateOne {
	if s != nil {
		qruo.SetLabel(*s)
	}
	return qruo
}

// SetValue sets the "value" field.
func (qruo *QuestionResponseUpdateOne) SetValue(s string) *QuestionResponseUpdateOne {
	qruo.mutation.SetValue(s)
	return qruo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableValue(s *string) *QuestionResponseUpdateOne {
	if s != nil {
		qruo.SetValue(*s)
	}
	return qruo
}

// SetCreatedAt sets the "created_at" field.
func (qruo *QuestionResponseUpdateOne) SetCreatedAt(t time.Time) *QuestionResponseUpdateOne {
	qruo.mutation.SetCreatedAt(t)
	return qruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionResponseUpdateOne {
	if t != nil {
		qruo.SetCreatedAt(*t)
	}
	return qruo
}

// SetUpdatedAt sets the "updated_at" field.
func (qruo *QuestionResponseUpdateOne) SetUpdatedAt(t time.Time) *QuestionResponseUpdateOne {
	qruo.mutation.SetUpdatedAt(t)
	return qruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableUpdatedAt(t *time.Time) *QuestionResponseUpdateOne {
	if t != nil {
		qruo.SetUpdatedAt(*t)
	}
	return qruo
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (qruo *QuestionResponseUpdateOne) SetQuestionID(id int) *QuestionResponseUpdateOne {
	qruo.mutation.SetQuestionID(id)
	return qruo
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableQuestionID(id *int) *QuestionResponseUpdateOne {
	if id != nil {
		qruo = qruo.SetQuestionID(*id)
	}
	return qruo
}

// SetQuestion sets the "question" edge to the Question entity.
func (qruo *QuestionResponseUpdateOne) SetQuestion(q *Question) *QuestionResponseUpdateOne {
	return qruo.SetQuestionID(q.ID)
}

// SetFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID.
func (qruo *QuestionResponseUpdateOne) SetFormInstanceID(id int) *QuestionResponseUpdateOne {
	qruo.mutation.SetFormInstanceID(id)
	return qruo
}

// SetNillableFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID if the given value is not nil.
func (qruo *QuestionResponseUpdateOne) SetNillableFormInstanceID(id *int) *QuestionResponseUpdateOne {
	if id != nil {
		qruo = qruo.SetFormInstanceID(*id)
	}
	return qruo
}

// SetFormInstance sets the "form_instance" edge to the FormInstance entity.
func (qruo *QuestionResponseUpdateOne) SetFormInstance(f *FormInstance) *QuestionResponseUpdateOne {
	return qruo.SetFormInstanceID(f.ID)
}

// Mutation returns the QuestionResponseMutation object of the builder.
func (qruo *QuestionResponseUpdateOne) Mutation() *QuestionResponseMutation {
	return qruo.mutation
}

// ClearQuestion clears the "question" edge to the Question entity.
func (qruo *QuestionResponseUpdateOne) ClearQuestion() *QuestionResponseUpdateOne {
	qruo.mutation.ClearQuestion()
	return qruo
}

// ClearFormInstance clears the "form_instance" edge to the FormInstance entity.
func (qruo *QuestionResponseUpdateOne) ClearFormInstance() *QuestionResponseUpdateOne {
	qruo.mutation.ClearFormInstance()
	return qruo
}

// Where appends a list predicates to the QuestionResponseUpdate builder.
func (qruo *QuestionResponseUpdateOne) Where(ps ...predicate.QuestionResponse) *QuestionResponseUpdateOne {
	qruo.mutation.Where(ps...)
	return qruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qruo *QuestionResponseUpdateOne) Select(field string, fields ...string) *QuestionResponseUpdateOne {
	qruo.fields = append([]string{field}, fields...)
	return qruo
}

// Save executes the query and returns the updated QuestionResponse entity.
func (qruo *QuestionResponseUpdateOne) Save(ctx context.Context) (*QuestionResponse, error) {
	return withHooks(ctx, qruo.sqlSave, qruo.mutation, qruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qruo *QuestionResponseUpdateOne) SaveX(ctx context.Context) *QuestionResponse {
	node, err := qruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qruo *QuestionResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := qruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qruo *QuestionResponseUpdateOne) ExecX(ctx context.Context) {
	if err := qruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qruo *QuestionResponseUpdateOne) sqlSave(ctx context.Context) (_node *QuestionResponse, err error) {
	_spec := sqlgraph.NewUpdateSpec(questionresponse.Table, questionresponse.Columns, sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt))
	id, ok := qruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuestionResponse.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, questionresponse.FieldID)
		for _, f := range fields {
			if !questionresponse.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != questionresponse.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qruo.mutation.Label(); ok {
		_spec.SetField(questionresponse.FieldLabel, field.TypeString, value)
	}
	if value, ok := qruo.mutation.Value(); ok {
		_spec.SetField(questionresponse.FieldValue, field.TypeString, value)
	}
	if value, ok := qruo.mutation.CreatedAt(); ok {
		_spec.SetField(questionresponse.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qruo.mutation.UpdatedAt(); ok {
		_spec.SetField(questionresponse.FieldUpdatedAt, field.TypeTime, value)
	}
	if qruo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.QuestionTable,
			Columns: []string{questionresponse.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.QuestionTable,
			Columns: []string{questionresponse.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qruo.mutation.FormInstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.FormInstanceTable,
			Columns: []string{questionresponse.FormInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qruo.mutation.FormInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.FormInstanceTable,
			Columns: []string{questionresponse.FormInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuestionResponse{config: qruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{questionresponse.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qruo.mutation.done = true
	return _node, nil
}
