// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"

	"entgo.io/contrib/entgql"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
	"ezbiz.com/ent/questionresponse"
	"ezbiz.com/ent/user"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ef *EntFormQuery) CollectFields(ctx context.Context, satisfies ...string) (*EntFormQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ef, nil
	}
	if err := ef.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ef, nil
}

func (ef *EntFormQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(entform.Columns))
		selectedFields = []string{entform.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "questions":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EntFormQuestionClient{config: ef.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			ef.WithNamedQuestions(alias, func(wq *EntFormQuestionQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[entform.FieldName]; !ok {
				selectedFields = append(selectedFields, entform.FieldName)
				fieldSeen[entform.FieldName] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[entform.FieldDescription]; !ok {
				selectedFields = append(selectedFields, entform.FieldDescription)
				fieldSeen[entform.FieldDescription] = struct{}{}
			}
		case "enabled":
			if _, ok := fieldSeen[entform.FieldEnabled]; !ok {
				selectedFields = append(selectedFields, entform.FieldEnabled)
				fieldSeen[entform.FieldEnabled] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[entform.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, entform.FieldCreatedAt)
				fieldSeen[entform.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[entform.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, entform.FieldUpdatedAt)
				fieldSeen[entform.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[entform.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, entform.FieldCreatedBy)
				fieldSeen[entform.FieldCreatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ef.Select(selectedFields...)
	}
	return nil
}

type entformPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EntFormPaginateOption
}

func newEntFormPaginateArgs(rv map[string]any) *entformPaginateArgs {
	args := &entformPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EntFormWhereInput); ok {
		args.opts = append(args.opts, WithEntFormFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (efq *EntFormQuestionQuery) CollectFields(ctx context.Context, satisfies ...string) (*EntFormQuestionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return efq, nil
	}
	if err := efq.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return efq, nil
}

func (efq *EntFormQuestionQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(entformquestion.Columns))
		selectedFields = []string{entformquestion.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "form":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&EntFormClient{config: efq.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			efq.withForm = query
		case "title":
			if _, ok := fieldSeen[entformquestion.FieldTitle]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldTitle)
				fieldSeen[entformquestion.FieldTitle] = struct{}{}
			}
		case "label":
			if _, ok := fieldSeen[entformquestion.FieldLabel]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldLabel)
				fieldSeen[entformquestion.FieldLabel] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[entformquestion.FieldType]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldType)
				fieldSeen[entformquestion.FieldType] = struct{}{}
			}
		case "required":
			if _, ok := fieldSeen[entformquestion.FieldRequired]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldRequired)
				fieldSeen[entformquestion.FieldRequired] = struct{}{}
			}
		case "extraData":
			if _, ok := fieldSeen[entformquestion.FieldExtraData]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldExtraData)
				fieldSeen[entformquestion.FieldExtraData] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[entformquestion.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldCreatedAt)
				fieldSeen[entformquestion.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[entformquestion.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldUpdatedAt)
				fieldSeen[entformquestion.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[entformquestion.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, entformquestion.FieldCreatedBy)
				fieldSeen[entformquestion.FieldCreatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		efq.Select(selectedFields...)
	}
	return nil
}

type entformquestionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []EntFormQuestionPaginateOption
}

func newEntFormQuestionPaginateArgs(rv map[string]any) *entformquestionPaginateArgs {
	args := &entformquestionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*EntFormQuestionWhereInput); ok {
		args.opts = append(args.opts, WithEntFormQuestionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fi *FormInstanceQuery) CollectFields(ctx context.Context, satisfies ...string) (*FormInstanceQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return fi, nil
	}
	if err := fi.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return fi, nil
}

func (fi *FormInstanceQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(forminstance.Columns))
		selectedFields = []string{forminstance.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "formSpec":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormSpecClient{config: fi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fi.withFormSpec = query
		case "questionResponse":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionResponseClient{config: fi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fi.WithNamedQuestionResponse(alias, func(wq *QuestionResponseQuery) {
				*wq = *query
			})
		case "users":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fi.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fi.withUsers = query
		case "status":
			if _, ok := fieldSeen[forminstance.FieldStatus]; !ok {
				selectedFields = append(selectedFields, forminstance.FieldStatus)
				fieldSeen[forminstance.FieldStatus] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		fi.Select(selectedFields...)
	}
	return nil
}

type forminstancePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FormInstancePaginateOption
}

func newFormInstancePaginateArgs(rv map[string]any) *forminstancePaginateArgs {
	args := &forminstancePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[whereField].(*FormInstanceWhereInput); ok {
		args.opts = append(args.opts, WithFormInstanceFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (fs *FormSpecQuery) CollectFields(ctx context.Context, satisfies ...string) (*FormSpecQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return fs, nil
	}
	if err := fs.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return fs, nil
}

func (fs *FormSpecQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(formspec.Columns))
		selectedFields = []string{formspec.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "questionGroups":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionGroupClient{config: fs.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fs.WithNamedQuestionGroups(alias, func(wq *QuestionGroupQuery) {
				*wq = *query
			})
		case "formInstances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormInstanceClient{config: fs.config}).Query()
			)
			args := newFormInstancePaginateArgs(fieldArgs(ctx, new(FormInstanceWhereInput), path...))
			if err := validateFirstLast(args.first, args.last); err != nil {
				return fmt.Errorf("validate first and last in path %q: %w", path, err)
			}
			pager, err := newFormInstancePager(args.opts, args.last != nil)
			if err != nil {
				return fmt.Errorf("create new pager in path %q: %w", path, err)
			}
			if query, err = pager.applyFilter(query); err != nil {
				return err
			}
			ignoredEdges := !hasCollectedField(ctx, append(path, edgesField)...)
			if hasCollectedField(ctx, append(path, totalCountField)...) || hasCollectedField(ctx, append(path, pageInfoField)...) {
				hasPagination := args.after != nil || args.first != nil || args.before != nil || args.last != nil
				if hasPagination || ignoredEdges {
					query := query.Clone()
					fs.loadTotal = append(fs.loadTotal, func(ctx context.Context, nodes []*FormSpec) error {
						ids := make([]driver.Value, len(nodes))
						for i := range nodes {
							ids[i] = nodes[i].ID
						}
						var v []struct {
							NodeID int `sql:"form_spec_form_instances"`
							Count  int `sql:"count"`
						}
						query.Where(func(s *sql.Selector) {
							s.Where(sql.InValues(s.C(formspec.FormInstancesColumn), ids...))
						})
						if err := query.GroupBy(formspec.FormInstancesColumn).Aggregate(Count()).Scan(ctx, &v); err != nil {
							return err
						}
						m := make(map[int]int, len(v))
						for i := range v {
							m[v[i].NodeID] = v[i].Count
						}
						for i := range nodes {
							n := m[nodes[i].ID]
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				} else {
					fs.loadTotal = append(fs.loadTotal, func(_ context.Context, nodes []*FormSpec) error {
						for i := range nodes {
							n := len(nodes[i].Edges.FormInstances)
							if nodes[i].Edges.totalCount[1] == nil {
								nodes[i].Edges.totalCount[1] = make(map[string]int)
							}
							nodes[i].Edges.totalCount[1][alias] = n
						}
						return nil
					})
				}
			}
			if ignoredEdges || (args.first != nil && *args.first == 0) || (args.last != nil && *args.last == 0) {
				continue
			}
			if query, err = pager.applyCursors(query, args.after, args.before); err != nil {
				return err
			}
			path = append(path, edgesField, nodeField)
			if field := collectedField(ctx, path...); field != nil {
				if err := query.collectField(ctx, opCtx, *field, path, mayAddCondition(satisfies, "FormInstance")...); err != nil {
					return err
				}
			}
			if limit := paginateLimit(args.first, args.last); limit > 0 {
				modify := limitRows(formspec.FormInstancesColumn, limit, pager.orderExpr(query))
				query.modifiers = append(query.modifiers, modify)
			} else {
				query = pager.applyOrder(query)
			}
			fs.WithNamedFormInstances(alias, func(wq *FormInstanceQuery) {
				*wq = *query
			})
		case "owner":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&UserClient{config: fs.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			fs.withOwner = query
		case "name":
			if _, ok := fieldSeen[formspec.FieldName]; !ok {
				selectedFields = append(selectedFields, formspec.FieldName)
				fieldSeen[formspec.FieldName] = struct{}{}
			}
		case "cover":
			if _, ok := fieldSeen[formspec.FieldCover]; !ok {
				selectedFields = append(selectedFields, formspec.FieldCover)
				fieldSeen[formspec.FieldCover] = struct{}{}
			}
		case "description":
			if _, ok := fieldSeen[formspec.FieldDescription]; !ok {
				selectedFields = append(selectedFields, formspec.FieldDescription)
				fieldSeen[formspec.FieldDescription] = struct{}{}
			}
		case "enabled":
			if _, ok := fieldSeen[formspec.FieldEnabled]; !ok {
				selectedFields = append(selectedFields, formspec.FieldEnabled)
				fieldSeen[formspec.FieldEnabled] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[formspec.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, formspec.FieldCreatedAt)
				fieldSeen[formspec.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[formspec.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, formspec.FieldUpdatedAt)
				fieldSeen[formspec.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[formspec.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, formspec.FieldCreatedBy)
				fieldSeen[formspec.FieldCreatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		fs.Select(selectedFields...)
	}
	return nil
}

type formspecPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []FormSpecPaginateOption
}

func newFormSpecPaginateArgs(rv map[string]any) *formspecPaginateArgs {
	args := &formspecPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &FormSpecOrder{Field: &FormSpecOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithFormSpecOrder(order))
			}
		case *FormSpecOrder:
			if v != nil {
				args.opts = append(args.opts, WithFormSpecOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*FormSpecWhereInput); ok {
		args.opts = append(args.opts, WithFormSpecFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (q *QuestionQuery) CollectFields(ctx context.Context, satisfies ...string) (*QuestionQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return q, nil
	}
	if err := q.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return q, nil
}

func (q *QuestionQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(question.Columns))
		selectedFields = []string{question.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "fromQuestionGroup":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionGroupClient{config: q.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			q.withFromQuestionGroup = query
		case "questionResponse":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionResponseClient{config: q.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			q.WithNamedQuestionResponse(alias, func(wq *QuestionResponseQuery) {
				*wq = *query
			})
		case "label":
			if _, ok := fieldSeen[question.FieldLabel]; !ok {
				selectedFields = append(selectedFields, question.FieldLabel)
				fieldSeen[question.FieldLabel] = struct{}{}
			}
		case "title":
			if _, ok := fieldSeen[question.FieldTitle]; !ok {
				selectedFields = append(selectedFields, question.FieldTitle)
				fieldSeen[question.FieldTitle] = struct{}{}
			}
		case "type":
			if _, ok := fieldSeen[question.FieldType]; !ok {
				selectedFields = append(selectedFields, question.FieldType)
				fieldSeen[question.FieldType] = struct{}{}
			}
		case "required":
			if _, ok := fieldSeen[question.FieldRequired]; !ok {
				selectedFields = append(selectedFields, question.FieldRequired)
				fieldSeen[question.FieldRequired] = struct{}{}
			}
		case "extraData":
			if _, ok := fieldSeen[question.FieldExtraData]; !ok {
				selectedFields = append(selectedFields, question.FieldExtraData)
				fieldSeen[question.FieldExtraData] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[question.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, question.FieldCreatedAt)
				fieldSeen[question.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[question.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, question.FieldUpdatedAt)
				fieldSeen[question.FieldUpdatedAt] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[question.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, question.FieldCreatedBy)
				fieldSeen[question.FieldCreatedBy] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		q.Select(selectedFields...)
	}
	return nil
}

type questionPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []QuestionPaginateOption
}

func newQuestionPaginateArgs(rv map[string]any) *questionPaginateArgs {
	args := &questionPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &QuestionOrder{Field: &QuestionOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithQuestionOrder(order))
			}
		case *QuestionOrder:
			if v != nil {
				args.opts = append(args.opts, WithQuestionOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*QuestionWhereInput); ok {
		args.opts = append(args.opts, WithQuestionFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (qg *QuestionGroupQuery) CollectFields(ctx context.Context, satisfies ...string) (*QuestionGroupQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return qg, nil
	}
	if err := qg.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return qg, nil
}

func (qg *QuestionGroupQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(questiongroup.Columns))
		selectedFields = []string{questiongroup.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "question":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionClient{config: qg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			qg.WithNamedQuestion(alias, func(wq *QuestionQuery) {
				*wq = *query
			})
		case "formSpec":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormSpecClient{config: qg.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			qg.withFormSpec = query
		case "name":
			if _, ok := fieldSeen[questiongroup.FieldName]; !ok {
				selectedFields = append(selectedFields, questiongroup.FieldName)
				fieldSeen[questiongroup.FieldName] = struct{}{}
			}
		case "createdBy":
			if _, ok := fieldSeen[questiongroup.FieldCreatedBy]; !ok {
				selectedFields = append(selectedFields, questiongroup.FieldCreatedBy)
				fieldSeen[questiongroup.FieldCreatedBy] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[questiongroup.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, questiongroup.FieldCreatedAt)
				fieldSeen[questiongroup.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[questiongroup.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, questiongroup.FieldUpdatedAt)
				fieldSeen[questiongroup.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		qg.Select(selectedFields...)
	}
	return nil
}

type questiongroupPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []QuestionGroupPaginateOption
}

func newQuestionGroupPaginateArgs(rv map[string]any) *questiongroupPaginateArgs {
	args := &questiongroupPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &QuestionGroupOrder{Field: &QuestionGroupOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithQuestionGroupOrder(order))
			}
		case *QuestionGroupOrder:
			if v != nil {
				args.opts = append(args.opts, WithQuestionGroupOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*QuestionGroupWhereInput); ok {
		args.opts = append(args.opts, WithQuestionGroupFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (qr *QuestionResponseQuery) CollectFields(ctx context.Context, satisfies ...string) (*QuestionResponseQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return qr, nil
	}
	if err := qr.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return qr, nil
}

func (qr *QuestionResponseQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(questionresponse.Columns))
		selectedFields = []string{questionresponse.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "question":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&QuestionClient{config: qr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			qr.withQuestion = query
		case "formInstance":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormInstanceClient{config: qr.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			qr.withFormInstance = query
		case "label":
			if _, ok := fieldSeen[questionresponse.FieldLabel]; !ok {
				selectedFields = append(selectedFields, questionresponse.FieldLabel)
				fieldSeen[questionresponse.FieldLabel] = struct{}{}
			}
		case "value":
			if _, ok := fieldSeen[questionresponse.FieldValue]; !ok {
				selectedFields = append(selectedFields, questionresponse.FieldValue)
				fieldSeen[questionresponse.FieldValue] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[questionresponse.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, questionresponse.FieldCreatedAt)
				fieldSeen[questionresponse.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[questionresponse.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, questionresponse.FieldUpdatedAt)
				fieldSeen[questionresponse.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		qr.Select(selectedFields...)
	}
	return nil
}

type questionresponsePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []QuestionResponsePaginateOption
}

func newQuestionResponsePaginateArgs(rv map[string]any) *questionresponsePaginateArgs {
	args := &questionresponsePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &QuestionResponseOrder{Field: &QuestionResponseOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithQuestionResponseOrder(order))
			}
		case *QuestionResponseOrder:
			if v != nil {
				args.opts = append(args.opts, WithQuestionResponseOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*QuestionResponseWhereInput); ok {
		args.opts = append(args.opts, WithQuestionResponseFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) (*UserQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return u, nil
	}
	if err := u.collectField(ctx, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return u, nil
}

func (u *UserQuery) collectField(ctx context.Context, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(user.Columns))
		selectedFields = []string{user.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "formSpecs":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormSpecClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFormSpecs(alias, func(wq *FormSpecQuery) {
				*wq = *query
			})
		case "formInstances":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&FormInstanceClient{config: u.config}).Query()
			)
			if err := query.collectField(ctx, opCtx, field, path, satisfies...); err != nil {
				return err
			}
			u.WithNamedFormInstances(alias, func(wq *FormInstanceQuery) {
				*wq = *query
			})
		case "name":
			if _, ok := fieldSeen[user.FieldName]; !ok {
				selectedFields = append(selectedFields, user.FieldName)
				fieldSeen[user.FieldName] = struct{}{}
			}
		case "email":
			if _, ok := fieldSeen[user.FieldEmail]; !ok {
				selectedFields = append(selectedFields, user.FieldEmail)
				fieldSeen[user.FieldEmail] = struct{}{}
			}
		case "password":
			if _, ok := fieldSeen[user.FieldPassword]; !ok {
				selectedFields = append(selectedFields, user.FieldPassword)
				fieldSeen[user.FieldPassword] = struct{}{}
			}
		case "role":
			if _, ok := fieldSeen[user.FieldRole]; !ok {
				selectedFields = append(selectedFields, user.FieldRole)
				fieldSeen[user.FieldRole] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[user.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldCreatedAt)
				fieldSeen[user.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[user.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, user.FieldUpdatedAt)
				fieldSeen[user.FieldUpdatedAt] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		u.Select(selectedFields...)
	}
	return nil
}

type userPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []UserPaginateOption
}

func newUserPaginateArgs(rv map[string]any) *userPaginateArgs {
	args := &userPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &UserOrder{Field: &UserOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithUserOrder(order))
			}
		case *UserOrder:
			if v != nil {
				args.opts = append(args.opts, WithUserOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*UserWhereInput); ok {
		args.opts = append(args.opts, WithUserFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

func limitRows(partitionBy string, limit int, orderBy ...sql.Querier) func(s *sql.Selector) {
	return func(s *sql.Selector) {
		d := sql.Dialect(s.Dialect())
		s.SetDistinct(false)
		with := d.With("src_query").
			As(s.Clone()).
			With("limited_query").
			As(
				d.Select("*").
					AppendSelectExprAs(
						sql.RowNumber().PartitionBy(partitionBy).OrderExpr(orderBy...),
						"row_number",
					).
					From(d.Table("src_query")),
			)
		t := d.Table("limited_query").As(s.TableName())
		*s = *d.Select(s.UnqualifiedColumns()...).
			From(t).
			Where(sql.LTE(t.C("row_number"), limit)).
			Prefix(with)
	}
}

// mayAddCondition appends another type condition to the satisfies list
// if condition is enabled (Node/Nodes) and it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond string) []string {
	if len(satisfies) == 0 {
		return satisfies
	}
	for _, s := range satisfies {
		if typeCond == s {
			return satisfies
		}
	}
	return append(satisfies, typeCond)
}
