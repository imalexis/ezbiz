// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questionresponse"
)

// QuestionResponseCreate is the builder for creating a QuestionResponse entity.
type QuestionResponseCreate struct {
	config
	mutation *QuestionResponseMutation
	hooks    []Hook
}

// SetLabel sets the "label" field.
func (qrc *QuestionResponseCreate) SetLabel(s string) *QuestionResponseCreate {
	qrc.mutation.SetLabel(s)
	return qrc
}

// SetValue sets the "value" field.
func (qrc *QuestionResponseCreate) SetValue(s string) *QuestionResponseCreate {
	qrc.mutation.SetValue(s)
	return qrc
}

// SetCreatedAt sets the "created_at" field.
func (qrc *QuestionResponseCreate) SetCreatedAt(t time.Time) *QuestionResponseCreate {
	qrc.mutation.SetCreatedAt(t)
	return qrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qrc *QuestionResponseCreate) SetNillableCreatedAt(t *time.Time) *QuestionResponseCreate {
	if t != nil {
		qrc.SetCreatedAt(*t)
	}
	return qrc
}

// SetUpdatedAt sets the "updated_at" field.
func (qrc *QuestionResponseCreate) SetUpdatedAt(t time.Time) *QuestionResponseCreate {
	qrc.mutation.SetUpdatedAt(t)
	return qrc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qrc *QuestionResponseCreate) SetNillableUpdatedAt(t *time.Time) *QuestionResponseCreate {
	if t != nil {
		qrc.SetUpdatedAt(*t)
	}
	return qrc
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (qrc *QuestionResponseCreate) SetQuestionID(id int) *QuestionResponseCreate {
	qrc.mutation.SetQuestionID(id)
	return qrc
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (qrc *QuestionResponseCreate) SetNillableQuestionID(id *int) *QuestionResponseCreate {
	if id != nil {
		qrc = qrc.SetQuestionID(*id)
	}
	return qrc
}

// SetQuestion sets the "question" edge to the Question entity.
func (qrc *QuestionResponseCreate) SetQuestion(q *Question) *QuestionResponseCreate {
	return qrc.SetQuestionID(q.ID)
}

// SetFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID.
func (qrc *QuestionResponseCreate) SetFormInstanceID(id int) *QuestionResponseCreate {
	qrc.mutation.SetFormInstanceID(id)
	return qrc
}

// SetNillableFormInstanceID sets the "form_instance" edge to the FormInstance entity by ID if the given value is not nil.
func (qrc *QuestionResponseCreate) SetNillableFormInstanceID(id *int) *QuestionResponseCreate {
	if id != nil {
		qrc = qrc.SetFormInstanceID(*id)
	}
	return qrc
}

// SetFormInstance sets the "form_instance" edge to the FormInstance entity.
func (qrc *QuestionResponseCreate) SetFormInstance(f *FormInstance) *QuestionResponseCreate {
	return qrc.SetFormInstanceID(f.ID)
}

// Mutation returns the QuestionResponseMutation object of the builder.
func (qrc *QuestionResponseCreate) Mutation() *QuestionResponseMutation {
	return qrc.mutation
}

// Save creates the QuestionResponse in the database.
func (qrc *QuestionResponseCreate) Save(ctx context.Context) (*QuestionResponse, error) {
	qrc.defaults()
	return withHooks(ctx, qrc.sqlSave, qrc.mutation, qrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qrc *QuestionResponseCreate) SaveX(ctx context.Context) *QuestionResponse {
	v, err := qrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qrc *QuestionResponseCreate) Exec(ctx context.Context) error {
	_, err := qrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qrc *QuestionResponseCreate) ExecX(ctx context.Context) {
	if err := qrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qrc *QuestionResponseCreate) defaults() {
	if _, ok := qrc.mutation.CreatedAt(); !ok {
		v := questionresponse.DefaultCreatedAt()
		qrc.mutation.SetCreatedAt(v)
	}
	if _, ok := qrc.mutation.UpdatedAt(); !ok {
		v := questionresponse.DefaultUpdatedAt()
		qrc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qrc *QuestionResponseCreate) check() error {
	if _, ok := qrc.mutation.Label(); !ok {
		return &ValidationError{Name: "label", err: errors.New(`ent: missing required field "QuestionResponse.label"`)}
	}
	if _, ok := qrc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "QuestionResponse.value"`)}
	}
	if _, ok := qrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QuestionResponse.created_at"`)}
	}
	if _, ok := qrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QuestionResponse.updated_at"`)}
	}
	return nil
}

func (qrc *QuestionResponseCreate) sqlSave(ctx context.Context) (*QuestionResponse, error) {
	if err := qrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qrc.mutation.id = &_node.ID
	qrc.mutation.done = true
	return _node, nil
}

func (qrc *QuestionResponseCreate) createSpec() (*QuestionResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionResponse{config: qrc.config}
		_spec = sqlgraph.NewCreateSpec(questionresponse.Table, sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt))
	)
	if value, ok := qrc.mutation.Label(); ok {
		_spec.SetField(questionresponse.FieldLabel, field.TypeString, value)
		_node.Label = value
	}
	if value, ok := qrc.mutation.Value(); ok {
		_spec.SetField(questionresponse.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := qrc.mutation.CreatedAt(); ok {
		_spec.SetField(questionresponse.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qrc.mutation.UpdatedAt(); ok {
		_spec.SetField(questionresponse.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := qrc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.QuestionTable,
			Columns: []string{questionresponse.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.question_question_response = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qrc.mutation.FormInstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questionresponse.FormInstanceTable,
			Columns: []string{questionresponse.FormInstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.form_instance_question_response = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionResponseCreateBulk is the builder for creating many QuestionResponse entities in bulk.
type QuestionResponseCreateBulk struct {
	config
	err      error
	builders []*QuestionResponseCreate
}

// Save creates the QuestionResponse entities in the database.
func (qrcb *QuestionResponseCreateBulk) Save(ctx context.Context) ([]*QuestionResponse, error) {
	if qrcb.err != nil {
		return nil, qrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qrcb.builders))
	nodes := make([]*QuestionResponse, len(qrcb.builders))
	mutators := make([]Mutator, len(qrcb.builders))
	for i := range qrcb.builders {
		func(i int, root context.Context) {
			builder := qrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qrcb *QuestionResponseCreateBulk) SaveX(ctx context.Context) []*QuestionResponse {
	v, err := qrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qrcb *QuestionResponseCreateBulk) Exec(ctx context.Context) error {
	_, err := qrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qrcb *QuestionResponseCreateBulk) ExecX(ctx context.Context) {
	if err := qrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
