// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questionresponse"
)

// QuestionResponse is the model entity for the QuestionResponse schema.
type QuestionResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Label infers the identifier of a question
	Label string `json:"label,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionResponseQuery when eager-loading is set.
	Edges                           QuestionResponseEdges `json:"edges"`
	form_instance_question_response *int
	question_question_response      *int
	selectValues                    sql.SelectValues
}

// QuestionResponseEdges holds the relations/edges for other nodes in the graph.
type QuestionResponseEdges struct {
	// Question holds the value of the question edge.
	Question *Question `json:"question,omitempty"`
	// FormInstance holds the value of the form_instance edge.
	FormInstance *FormInstance `json:"form_instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionResponseEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[0] {
		if e.Question == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// FormInstanceOrErr returns the FormInstance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionResponseEdges) FormInstanceOrErr() (*FormInstance, error) {
	if e.loadedTypes[1] {
		if e.FormInstance == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: forminstance.Label}
		}
		return e.FormInstance, nil
	}
	return nil, &NotLoadedError{edge: "form_instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionResponse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionresponse.FieldID:
			values[i] = new(sql.NullInt64)
		case questionresponse.FieldLabel, questionresponse.FieldValue:
			values[i] = new(sql.NullString)
		case questionresponse.FieldCreatedAt, questionresponse.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case questionresponse.ForeignKeys[0]: // form_instance_question_response
			values[i] = new(sql.NullInt64)
		case questionresponse.ForeignKeys[1]: // question_question_response
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionResponse fields.
func (qr *QuestionResponse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionresponse.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			qr.ID = int(value.Int64)
		case questionresponse.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				qr.Label = value.String
			}
		case questionresponse.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				qr.Value = value.String
			}
		case questionresponse.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				qr.CreatedAt = value.Time
			}
		case questionresponse.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				qr.UpdatedAt = value.Time
			}
		case questionresponse.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field form_instance_question_response", value)
			} else if value.Valid {
				qr.form_instance_question_response = new(int)
				*qr.form_instance_question_response = int(value.Int64)
			}
		case questionresponse.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_question_response", value)
			} else if value.Valid {
				qr.question_question_response = new(int)
				*qr.question_question_response = int(value.Int64)
			}
		default:
			qr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the QuestionResponse.
// This includes values selected through modifiers, order, etc.
func (qr *QuestionResponse) GetValue(name string) (ent.Value, error) {
	return qr.selectValues.Get(name)
}

// QueryQuestion queries the "question" edge of the QuestionResponse entity.
func (qr *QuestionResponse) QueryQuestion() *QuestionQuery {
	return NewQuestionResponseClient(qr.config).QueryQuestion(qr)
}

// QueryFormInstance queries the "form_instance" edge of the QuestionResponse entity.
func (qr *QuestionResponse) QueryFormInstance() *FormInstanceQuery {
	return NewQuestionResponseClient(qr.config).QueryFormInstance(qr)
}

// Update returns a builder for updating this QuestionResponse.
// Note that you need to call QuestionResponse.Unwrap() before calling this method if this QuestionResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (qr *QuestionResponse) Update() *QuestionResponseUpdateOne {
	return NewQuestionResponseClient(qr.config).UpdateOne(qr)
}

// Unwrap unwraps the QuestionResponse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (qr *QuestionResponse) Unwrap() *QuestionResponse {
	_tx, ok := qr.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionResponse is not a transactional entity")
	}
	qr.config.driver = _tx.drv
	return qr
}

// String implements the fmt.Stringer.
func (qr *QuestionResponse) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionResponse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", qr.ID))
	builder.WriteString("label=")
	builder.WriteString(qr.Label)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(qr.Value)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(qr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(qr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// QuestionResponses is a parsable slice of QuestionResponse.
type QuestionResponses []*QuestionResponse
