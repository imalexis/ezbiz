directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateEntFormInput is used for create EntForm object.
Input was generated by ent.
"""
input CreateEntFormInput {
  name: String
  description: String
  enabled: Boolean
  createdAt: Time
  updatedAt: Time
  createdBy: Int!
  questionIDs: [ID!]
}
"""
CreateEntFormQuestionInput is used for create EntFormQuestion object.
Input was generated by ent.
"""
input CreateEntFormQuestionInput {
  title: String
  label: String!
  type: EntFormQuestionType!
  required: Boolean
  extraData: String
  createdAt: Time
  updatedAt: Time
  createdBy: Int!
  formID: ID
}
"""
CreateFormInstanceInput is used for create FormInstance object.
Input was generated by ent.
"""
input CreateFormInstanceInput {
  status: FormInstanceStatus
  formSpecID: ID
  questionResponseIDs: [ID!]
  usersID: ID
}
"""
CreateFormSpecInput is used for create FormSpec object.
Input was generated by ent.
"""
input CreateFormSpecInput {
  name: String
  cover: String
  description: String
  enabled: Boolean
  createdAt: Time
  updatedAt: Time
  createdBy: Int!
  questionGroupIDs: [ID!]
  formInstanceIDs: [ID!]
  ownerID: ID
}
"""
CreateQuestionGroupInput is used for create QuestionGroup object.
Input was generated by ent.
"""
input CreateQuestionGroupInput {
  name: String!
  createdBy: Int!
  createdAt: Time
  updatedAt: Time
  questionIDs: [ID!]
  formSpecID: ID
}
"""
CreateQuestionInput is used for create Question object.
Input was generated by ent.
"""
input CreateQuestionInput {
  """label is unique in every FormSpec, it may be duplicated in different FormSpec"""
  label: String!
  """title of the question"""
  title: String
  type: QuestionType!
  required: Boolean!
  extraData: String
  createdAt: Time
  updatedAt: Time
  createdBy: Int!
  fromQuestionGroupID: ID
  questionResponseIDs: [ID!]
}
"""
CreateQuestionResponseInput is used for create QuestionResponse object.
Input was generated by ent.
"""
input CreateQuestionResponseInput {
  """Label infers the identifier of a question"""
  label: String!
  value: String!
  createdAt: Time
  updatedAt: Time
  questionID: ID
  formInstanceID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String
  email: String
  password: String
  """It is a role of a user"""
  role: UserRole!
  createdAt: Time
  updatedAt: Time
  formSpecIDs: [ID!]
  formInstanceIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type EntForm implements Node {
  id: ID!
  name: String!
  description: String
  enabled: Boolean!
  createdAt: Time!
  updatedAt: Time!
  createdBy: Int!
  questions: [EntFormQuestion!]
}
"""A connection to a list of items."""
type EntFormConnection {
  """A list of edges."""
  edges: [EntFormEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EntFormEdge {
  """The item at the end of the edge."""
  node: EntForm
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type EntFormQuestion implements Node {
  id: ID!
  title: String!
  label: String!
  type: EntFormQuestionType!
  required: Boolean!
  extraData: String
  createdAt: Time!
  updatedAt: Time!
  createdBy: Int!
  form: EntForm
}
"""A connection to a list of items."""
type EntFormQuestionConnection {
  """A list of edges."""
  edges: [EntFormQuestionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type EntFormQuestionEdge {
  """The item at the end of the edge."""
  node: EntFormQuestion
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""EntFormQuestionType is enum for the field type"""
enum EntFormQuestionType @goModel(model: "ezbiz.com/ent/entformquestion.Type") {
  short_text
  paragraph
  multi_choice
  multi_response
  dropdown
  file
  linear_scale
  date
  time
}
"""
EntFormQuestionWhereInput is used for filtering EntFormQuestion objects.
Input was generated by ent.
"""
input EntFormQuestionWhereInput {
  not: EntFormQuestionWhereInput
  and: [EntFormQuestionWhereInput!]
  or: [EntFormQuestionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """label field predicates"""
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """type field predicates"""
  type: EntFormQuestionType
  typeNEQ: EntFormQuestionType
  typeIn: [EntFormQuestionType!]
  typeNotIn: [EntFormQuestionType!]
  """required field predicates"""
  required: Boolean
  requiredNEQ: Boolean
  """extra_data field predicates"""
  extraData: String
  extraDataNEQ: String
  extraDataIn: [String!]
  extraDataNotIn: [String!]
  extraDataGT: String
  extraDataGTE: String
  extraDataLT: String
  extraDataLTE: String
  extraDataContains: String
  extraDataHasPrefix: String
  extraDataHasSuffix: String
  extraDataIsNil: Boolean
  extraDataNotNil: Boolean
  extraDataEqualFold: String
  extraDataContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """form edge predicates"""
  hasForm: Boolean
  hasFormWith: [EntFormWhereInput!]
}
"""
EntFormWhereInput is used for filtering EntForm objects.
Input was generated by ent.
"""
input EntFormWhereInput {
  not: EntFormWhereInput
  and: [EntFormWhereInput!]
  or: [EntFormWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """questions edge predicates"""
  hasQuestions: Boolean
  hasQuestionsWith: [EntFormQuestionWhereInput!]
}
type FormInstance implements Node {
  id: ID!
  status: FormInstanceStatus!
  formSpec: FormSpec
  questionResponse: [QuestionResponse!]
  users: User
}
"""A connection to a list of items."""
type FormInstanceConnection {
  """A list of edges."""
  edges: [FormInstanceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type FormInstanceEdge {
  """The item at the end of the edge."""
  node: FormInstance
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""FormInstanceStatus is enum for the field status"""
enum FormInstanceStatus @goModel(model: "ezbiz.com/ent/forminstance.Status") {
  submiited
  pending
}
"""
FormInstanceWhereInput is used for filtering FormInstance objects.
Input was generated by ent.
"""
input FormInstanceWhereInput {
  not: FormInstanceWhereInput
  and: [FormInstanceWhereInput!]
  or: [FormInstanceWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """status field predicates"""
  status: FormInstanceStatus
  statusNEQ: FormInstanceStatus
  statusIn: [FormInstanceStatus!]
  statusNotIn: [FormInstanceStatus!]
  """form_spec edge predicates"""
  hasFormSpec: Boolean
  hasFormSpecWith: [FormSpecWhereInput!]
  """question_response edge predicates"""
  hasQuestionResponse: Boolean
  hasQuestionResponseWith: [QuestionResponseWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
}
type FormSpec implements Node {
  id: ID!
  name: String!
  cover: String
  description: String!
  enabled: Boolean!
  createdAt: Time!
  updatedAt: Time!
  createdBy: Int!
  questionGroups: [QuestionGroup!]
  formInstances(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for FormInstances returned from the connection."""
    where: FormInstanceWhereInput
  ): FormInstanceConnection!
  owner: User
}
"""A connection to a list of items."""
type FormSpecConnection {
  """A list of edges."""
  edges: [FormSpecEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type FormSpecEdge {
  """The item at the end of the edge."""
  node: FormSpec
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for FormSpec connections"""
input FormSpecOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order FormSpecs."""
  field: FormSpecOrderField!
}
"""Properties by which FormSpec connections can be ordered."""
enum FormSpecOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
FormSpecWhereInput is used for filtering FormSpec objects.
Input was generated by ent.
"""
input FormSpecWhereInput {
  not: FormSpecWhereInput
  and: [FormSpecWhereInput!]
  or: [FormSpecWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """cover field predicates"""
  cover: String
  coverNEQ: String
  coverIn: [String!]
  coverNotIn: [String!]
  coverGT: String
  coverGTE: String
  coverLT: String
  coverLTE: String
  coverContains: String
  coverHasPrefix: String
  coverHasSuffix: String
  coverIsNil: Boolean
  coverNotNil: Boolean
  coverEqualFold: String
  coverContainsFold: String
  """description field predicates"""
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionEqualFold: String
  descriptionContainsFold: String
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """question_groups edge predicates"""
  hasQuestionGroups: Boolean
  hasQuestionGroupsWith: [QuestionGroupWhereInput!]
  """form_instances edge predicates"""
  hasFormInstances: Boolean
  hasFormInstancesWith: [FormInstanceWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "ezbiz.com/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  entForms(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for EntForms returned from the connection."""
    where: EntFormWhereInput
  ): EntFormConnection!
  entFormQuestions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for EntFormQuestions returned from the connection."""
    where: EntFormQuestionWhereInput
  ): EntFormQuestionConnection!
  formInstances(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for FormInstances returned from the connection."""
    where: FormInstanceWhereInput
  ): FormInstanceConnection!
  formSpecs(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for FormSpecs returned from the connection."""
    orderBy: FormSpecOrder

    """Filtering options for FormSpecs returned from the connection."""
    where: FormSpecWhereInput
  ): FormSpecConnection!
  questions(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Questions returned from the connection."""
    orderBy: QuestionOrder

    """Filtering options for Questions returned from the connection."""
    where: QuestionWhereInput
  ): QuestionConnection!
  questionGroups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for QuestionGroups returned from the connection."""
    orderBy: QuestionGroupOrder

    """Filtering options for QuestionGroups returned from the connection."""
    where: QuestionGroupWhereInput
  ): QuestionGroupConnection!
  questionResponses(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for QuestionResponses returned from the connection."""
    orderBy: QuestionResponseOrder

    """Filtering options for QuestionResponses returned from the connection."""
    where: QuestionResponseWhereInput
  ): QuestionResponseConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder

    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
}
type Question implements Node {
  id: ID!
  """label is unique in every FormSpec, it may be duplicated in different FormSpec"""
  label: String!
  """title of the question"""
  title: String!
  type: QuestionType!
  required: Boolean!
  extraData: String!
  createdAt: Time!
  updatedAt: Time!
  createdBy: Int!
  fromQuestionGroup: QuestionGroup
  questionResponse: [QuestionResponse!]
}
"""A connection to a list of items."""
type QuestionConnection {
  """A list of edges."""
  edges: [QuestionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question
  """A cursor for use in pagination."""
  cursor: Cursor!
}
type QuestionGroup implements Node {
  id: ID!
  name: String!
  createdBy: Int!
  createdAt: Time!
  updatedAt: Time!
  question: [Question!]
  formSpec: FormSpec
}
"""A connection to a list of items."""
type QuestionGroupConnection {
  """A list of edges."""
  edges: [QuestionGroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type QuestionGroupEdge {
  """The item at the end of the edge."""
  node: QuestionGroup
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for QuestionGroup connections"""
input QuestionGroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order QuestionGroups."""
  field: QuestionGroupOrderField!
}
"""Properties by which QuestionGroup connections can be ordered."""
enum QuestionGroupOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
QuestionGroupWhereInput is used for filtering QuestionGroup objects.
Input was generated by ent.
"""
input QuestionGroupWhereInput {
  not: QuestionGroupWhereInput
  and: [QuestionGroupWhereInput!]
  or: [QuestionGroupWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """question edge predicates"""
  hasQuestion: Boolean
  hasQuestionWith: [QuestionWhereInput!]
  """form_spec edge predicates"""
  hasFormSpec: Boolean
  hasFormSpecWith: [FormSpecWhereInput!]
}
"""Ordering options for Question connections"""
input QuestionOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Questions."""
  field: QuestionOrderField!
}
"""Properties by which Question connections can be ordered."""
enum QuestionOrderField {
  CREATED_AT
  UPDATED_AT
}
type QuestionResponse implements Node {
  id: ID!
  """Label infers the identifier of a question"""
  label: String!
  value: String!
  createdAt: Time!
  updatedAt: Time!
  question: Question
  formInstance: FormInstance
}
"""A connection to a list of items."""
type QuestionResponseConnection {
  """A list of edges."""
  edges: [QuestionResponseEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type QuestionResponseEdge {
  """The item at the end of the edge."""
  node: QuestionResponse
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for QuestionResponse connections"""
input QuestionResponseOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order QuestionResponses."""
  field: QuestionResponseOrderField!
}
"""Properties by which QuestionResponse connections can be ordered."""
enum QuestionResponseOrderField {
  CREATED_AT
  UPDATED_AT
}
"""
QuestionResponseWhereInput is used for filtering QuestionResponse objects.
Input was generated by ent.
"""
input QuestionResponseWhereInput {
  not: QuestionResponseWhereInput
  and: [QuestionResponseWhereInput!]
  or: [QuestionResponseWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """label field predicates"""
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """value field predicates"""
  value: String
  valueNEQ: String
  valueIn: [String!]
  valueNotIn: [String!]
  valueGT: String
  valueGTE: String
  valueLT: String
  valueLTE: String
  valueContains: String
  valueHasPrefix: String
  valueHasSuffix: String
  valueEqualFold: String
  valueContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """question edge predicates"""
  hasQuestion: Boolean
  hasQuestionWith: [QuestionWhereInput!]
  """form_instance edge predicates"""
  hasFormInstance: Boolean
  hasFormInstanceWith: [FormInstanceWhereInput!]
}
"""QuestionType is enum for the field type"""
enum QuestionType @goModel(model: "ezbiz.com/ent/question.Type") {
  short_text
  paragraph
  multi_choice
  checkboxes
  drop_down
  file
  linear_scale
  date
  time
}
"""
QuestionWhereInput is used for filtering Question objects.
Input was generated by ent.
"""
input QuestionWhereInput {
  not: QuestionWhereInput
  and: [QuestionWhereInput!]
  or: [QuestionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """label field predicates"""
  label: String
  labelNEQ: String
  labelIn: [String!]
  labelNotIn: [String!]
  labelGT: String
  labelGTE: String
  labelLT: String
  labelLTE: String
  labelContains: String
  labelHasPrefix: String
  labelHasSuffix: String
  labelEqualFold: String
  labelContainsFold: String
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """type field predicates"""
  type: QuestionType
  typeNEQ: QuestionType
  typeIn: [QuestionType!]
  typeNotIn: [QuestionType!]
  """required field predicates"""
  required: Boolean
  requiredNEQ: Boolean
  """extra_data field predicates"""
  extraData: String
  extraDataNEQ: String
  extraDataIn: [String!]
  extraDataNotIn: [String!]
  extraDataGT: String
  extraDataGTE: String
  extraDataLT: String
  extraDataLTE: String
  extraDataContains: String
  extraDataHasPrefix: String
  extraDataHasSuffix: String
  extraDataEqualFold: String
  extraDataContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """created_by field predicates"""
  createdBy: Int
  createdByNEQ: Int
  createdByIn: [Int!]
  createdByNotIn: [Int!]
  createdByGT: Int
  createdByGTE: Int
  createdByLT: Int
  createdByLTE: Int
  """from_question_group edge predicates"""
  hasFromQuestionGroup: Boolean
  hasFromQuestionGroupWith: [QuestionGroupWhereInput!]
  """question_response edge predicates"""
  hasQuestionResponse: Boolean
  hasQuestionResponseWith: [QuestionResponseWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateEntFormInput is used for update EntForm object.
Input was generated by ent.
"""
input UpdateEntFormInput {
  name: String
  description: String
  clearDescription: Boolean
  enabled: Boolean
  createdAt: Time
  updatedAt: Time
  createdBy: Int
  addQuestionIDs: [ID!]
  removeQuestionIDs: [ID!]
  clearQuestions: Boolean
}
"""
UpdateEntFormQuestionInput is used for update EntFormQuestion object.
Input was generated by ent.
"""
input UpdateEntFormQuestionInput {
  title: String
  label: String
  type: EntFormQuestionType
  required: Boolean
  extraData: String
  clearExtraData: Boolean
  createdAt: Time
  updatedAt: Time
  createdBy: Int
  formID: ID
  clearForm: Boolean
}
"""
UpdateFormInstanceInput is used for update FormInstance object.
Input was generated by ent.
"""
input UpdateFormInstanceInput {
  status: FormInstanceStatus
  formSpecID: ID
  clearFormSpec: Boolean
  addQuestionResponseIDs: [ID!]
  removeQuestionResponseIDs: [ID!]
  clearQuestionResponse: Boolean
  usersID: ID
  clearUsers: Boolean
}
"""
UpdateFormSpecInput is used for update FormSpec object.
Input was generated by ent.
"""
input UpdateFormSpecInput {
  name: String
  cover: String
  clearCover: Boolean
  description: String
  enabled: Boolean
  createdAt: Time
  updatedAt: Time
  createdBy: Int
  addQuestionGroupIDs: [ID!]
  removeQuestionGroupIDs: [ID!]
  clearQuestionGroups: Boolean
  addFormInstanceIDs: [ID!]
  removeFormInstanceIDs: [ID!]
  clearFormInstances: Boolean
  ownerID: ID
  clearOwner: Boolean
}
"""
UpdateQuestionGroupInput is used for update QuestionGroup object.
Input was generated by ent.
"""
input UpdateQuestionGroupInput {
  name: String
  createdBy: Int
  createdAt: Time
  updatedAt: Time
  addQuestionIDs: [ID!]
  removeQuestionIDs: [ID!]
  clearQuestion: Boolean
  formSpecID: ID
  clearFormSpec: Boolean
}
"""
UpdateQuestionInput is used for update Question object.
Input was generated by ent.
"""
input UpdateQuestionInput {
  """label is unique in every FormSpec, it may be duplicated in different FormSpec"""
  label: String
  """title of the question"""
  title: String
  type: QuestionType
  required: Boolean
  extraData: String
  createdAt: Time
  updatedAt: Time
  createdBy: Int
  fromQuestionGroupID: ID
  clearFromQuestionGroup: Boolean
  addQuestionResponseIDs: [ID!]
  removeQuestionResponseIDs: [ID!]
  clearQuestionResponse: Boolean
}
"""
UpdateQuestionResponseInput is used for update QuestionResponse object.
Input was generated by ent.
"""
input UpdateQuestionResponseInput {
  """Label infers the identifier of a question"""
  label: String
  value: String
  createdAt: Time
  updatedAt: Time
  questionID: ID
  clearQuestion: Boolean
  formInstanceID: ID
  clearFormInstance: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  email: String
  password: String
  """It is a role of a user"""
  role: UserRole
  createdAt: Time
  updatedAt: Time
  addFormSpecIDs: [ID!]
  removeFormSpecIDs: [ID!]
  clearFormSpecs: Boolean
  addFormInstanceIDs: [ID!]
  removeFormInstanceIDs: [ID!]
  clearFormInstances: Boolean
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  """It is a role of a user"""
  role: UserRole!
  createdAt: Time!
  updatedAt: Time!
  formSpecs: [FormSpec!]
  formInstances: [FormInstance!]
}
"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  CREATED_AT
  UPDATED_AT
}
"""UserRole is enum for the field role"""
enum UserRole @goModel(model: "ezbiz.com/ent/user.Role") {
  business_admin
  business_user
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """password field predicates"""
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordEqualFold: String
  passwordContainsFold: String
  """role field predicates"""
  role: UserRole
  roleNEQ: UserRole
  roleIn: [UserRole!]
  roleNotIn: [UserRole!]
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """form_specs edge predicates"""
  hasFormSpecs: Boolean
  hasFormSpecsWith: [FormSpecWhereInput!]
  """form_instances edge predicates"""
  hasFormInstances: Boolean
  hasFormInstancesWith: [FormInstanceWhereInput!]
}
type Mutation {
  createFormSpec(input: CreateFormSpecInput!): FormSpec!
  updateFormSpec(id: ID!, input: UpdateFormSpecInput!): FormSpec!
  createFormInstance(input: CreateFormInstanceInput!): FormInstance!
  updateFormInstance(id: ID!, input: UpdateFormInstanceInput!): FormInstance!
  createQuestionGroup(input: CreateQuestionGroupInput!): QuestionGroup!
  updateQuestionGroup(id: ID!, input: UpdateQuestionGroupInput!): QuestionGroup!
  createQuestion(input: CreateQuestionInput!): Question!
  updateQuestion(id: ID!, input: UpdateQuestionInput!): Question!
  createQuestionResponse(input: CreateQuestionResponseInput!): QuestionResponse!
  updateQuestionResponse(
    id: ID!
    input: UpdateQuestionResponseInput!
  ): QuestionResponse!
  signUpGoogle(accessToken: String!): AuthResponse
}

# GraphQL Schema -> 定义接口

type AuthResponse {
  accessToken: String!
  refreshToken: String!
}

# 如果你的数据库对象 刚好需要定义，那么就用Ent来定义，他会自动生成graphql
