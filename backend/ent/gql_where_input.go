// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"time"

	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
	"ezbiz.com/ent/questionresponse"
	"ezbiz.com/ent/user"
)

// EntFormWhereInput represents a where input for filtering EntForm queries.
type EntFormWhereInput struct {
	Predicates []predicate.EntForm  `json:"-"`
	Not        *EntFormWhereInput   `json:"not,omitempty"`
	Or         []*EntFormWhereInput `json:"or,omitempty"`
	And        []*EntFormWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int `json:"createdByIn,omitempty"`
	CreatedByNotIn []int `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int  `json:"createdByLTE,omitempty"`

	// "questions" edge predicates.
	HasQuestions     *bool                        `json:"hasQuestions,omitempty"`
	HasQuestionsWith []*EntFormQuestionWhereInput `json:"hasQuestionsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntFormWhereInput) AddPredicates(predicates ...predicate.EntForm) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntFormWhereInput filter on the EntFormQuery builder.
func (i *EntFormWhereInput) Filter(q *EntFormQuery) (*EntFormQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntFormWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntFormWhereInput is returned in case the EntFormWhereInput is empty.
var ErrEmptyEntFormWhereInput = errors.New("ent: empty predicate EntFormWhereInput")

// P returns a predicate for filtering entforms.
// An error is returned if the input is empty or invalid.
func (i *EntFormWhereInput) P() (predicate.EntForm, error) {
	var predicates []predicate.EntForm
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entform.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntForm, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entform.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntForm, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entform.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entform.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entform.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entform.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entform.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entform.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entform.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entform.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entform.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, entform.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, entform.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, entform.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, entform.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, entform.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, entform.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, entform.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, entform.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, entform.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, entform.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, entform.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, entform.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, entform.NameContainsFold(*i.NameContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, entform.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, entform.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, entform.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, entform.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, entform.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, entform.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, entform.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, entform.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, entform.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, entform.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, entform.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, entform.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, entform.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, entform.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, entform.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.Enabled != nil {
		predicates = append(predicates, entform.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, entform.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entform.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entform.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entform.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entform.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entform.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entform.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entform.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entform.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entform.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entform.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entform.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entform.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entform.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entform.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entform.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entform.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entform.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entform.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entform.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entform.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entform.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entform.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entform.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entform.CreatedByLTE(*i.CreatedByLTE))
	}

	if i.HasQuestions != nil {
		p := entform.HasQuestions()
		if !*i.HasQuestions {
			p = entform.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionsWith) > 0 {
		with := make([]predicate.EntFormQuestion, 0, len(i.HasQuestionsWith))
		for _, w := range i.HasQuestionsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entform.HasQuestionsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntFormWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entform.And(predicates...), nil
	}
}

// EntFormQuestionWhereInput represents a where input for filtering EntFormQuestion queries.
type EntFormQuestionWhereInput struct {
	Predicates []predicate.EntFormQuestion  `json:"-"`
	Not        *EntFormQuestionWhereInput   `json:"not,omitempty"`
	Or         []*EntFormQuestionWhereInput `json:"or,omitempty"`
	And        []*EntFormQuestionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "label" field predicates.
	Label             *string  `json:"label,omitempty"`
	LabelNEQ          *string  `json:"labelNEQ,omitempty"`
	LabelIn           []string `json:"labelIn,omitempty"`
	LabelNotIn        []string `json:"labelNotIn,omitempty"`
	LabelGT           *string  `json:"labelGT,omitempty"`
	LabelGTE          *string  `json:"labelGTE,omitempty"`
	LabelLT           *string  `json:"labelLT,omitempty"`
	LabelLTE          *string  `json:"labelLTE,omitempty"`
	LabelContains     *string  `json:"labelContains,omitempty"`
	LabelHasPrefix    *string  `json:"labelHasPrefix,omitempty"`
	LabelHasSuffix    *string  `json:"labelHasSuffix,omitempty"`
	LabelEqualFold    *string  `json:"labelEqualFold,omitempty"`
	LabelContainsFold *string  `json:"labelContainsFold,omitempty"`

	// "type" field predicates.
	Type      *entformquestion.Type  `json:"type,omitempty"`
	TypeNEQ   *entformquestion.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []entformquestion.Type `json:"typeIn,omitempty"`
	TypeNotIn []entformquestion.Type `json:"typeNotIn,omitempty"`

	// "required" field predicates.
	Required    *bool `json:"required,omitempty"`
	RequiredNEQ *bool `json:"requiredNEQ,omitempty"`

	// "extra_data" field predicates.
	ExtraData             *string  `json:"extraData,omitempty"`
	ExtraDataNEQ          *string  `json:"extraDataNEQ,omitempty"`
	ExtraDataIn           []string `json:"extraDataIn,omitempty"`
	ExtraDataNotIn        []string `json:"extraDataNotIn,omitempty"`
	ExtraDataGT           *string  `json:"extraDataGT,omitempty"`
	ExtraDataGTE          *string  `json:"extraDataGTE,omitempty"`
	ExtraDataLT           *string  `json:"extraDataLT,omitempty"`
	ExtraDataLTE          *string  `json:"extraDataLTE,omitempty"`
	ExtraDataContains     *string  `json:"extraDataContains,omitempty"`
	ExtraDataHasPrefix    *string  `json:"extraDataHasPrefix,omitempty"`
	ExtraDataHasSuffix    *string  `json:"extraDataHasSuffix,omitempty"`
	ExtraDataIsNil        bool     `json:"extraDataIsNil,omitempty"`
	ExtraDataNotNil       bool     `json:"extraDataNotNil,omitempty"`
	ExtraDataEqualFold    *string  `json:"extraDataEqualFold,omitempty"`
	ExtraDataContainsFold *string  `json:"extraDataContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int `json:"createdByIn,omitempty"`
	CreatedByNotIn []int `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int  `json:"createdByLTE,omitempty"`

	// "form" edge predicates.
	HasForm     *bool                `json:"hasForm,omitempty"`
	HasFormWith []*EntFormWhereInput `json:"hasFormWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *EntFormQuestionWhereInput) AddPredicates(predicates ...predicate.EntFormQuestion) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the EntFormQuestionWhereInput filter on the EntFormQuestionQuery builder.
func (i *EntFormQuestionWhereInput) Filter(q *EntFormQuestionQuery) (*EntFormQuestionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyEntFormQuestionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyEntFormQuestionWhereInput is returned in case the EntFormQuestionWhereInput is empty.
var ErrEmptyEntFormQuestionWhereInput = errors.New("ent: empty predicate EntFormQuestionWhereInput")

// P returns a predicate for filtering entformquestions.
// An error is returned if the input is empty or invalid.
func (i *EntFormQuestionWhereInput) P() (predicate.EntFormQuestion, error) {
	var predicates []predicate.EntFormQuestion
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, entformquestion.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.EntFormQuestion, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, entformquestion.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.EntFormQuestion, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, entformquestion.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, entformquestion.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, entformquestion.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, entformquestion.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, entformquestion.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, entformquestion.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, entformquestion.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, entformquestion.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, entformquestion.IDLTE(*i.IDLTE))
	}
	if i.Title != nil {
		predicates = append(predicates, entformquestion.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, entformquestion.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, entformquestion.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, entformquestion.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, entformquestion.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, entformquestion.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, entformquestion.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, entformquestion.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, entformquestion.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, entformquestion.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, entformquestion.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, entformquestion.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, entformquestion.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Label != nil {
		predicates = append(predicates, entformquestion.LabelEQ(*i.Label))
	}
	if i.LabelNEQ != nil {
		predicates = append(predicates, entformquestion.LabelNEQ(*i.LabelNEQ))
	}
	if len(i.LabelIn) > 0 {
		predicates = append(predicates, entformquestion.LabelIn(i.LabelIn...))
	}
	if len(i.LabelNotIn) > 0 {
		predicates = append(predicates, entformquestion.LabelNotIn(i.LabelNotIn...))
	}
	if i.LabelGT != nil {
		predicates = append(predicates, entformquestion.LabelGT(*i.LabelGT))
	}
	if i.LabelGTE != nil {
		predicates = append(predicates, entformquestion.LabelGTE(*i.LabelGTE))
	}
	if i.LabelLT != nil {
		predicates = append(predicates, entformquestion.LabelLT(*i.LabelLT))
	}
	if i.LabelLTE != nil {
		predicates = append(predicates, entformquestion.LabelLTE(*i.LabelLTE))
	}
	if i.LabelContains != nil {
		predicates = append(predicates, entformquestion.LabelContains(*i.LabelContains))
	}
	if i.LabelHasPrefix != nil {
		predicates = append(predicates, entformquestion.LabelHasPrefix(*i.LabelHasPrefix))
	}
	if i.LabelHasSuffix != nil {
		predicates = append(predicates, entformquestion.LabelHasSuffix(*i.LabelHasSuffix))
	}
	if i.LabelEqualFold != nil {
		predicates = append(predicates, entformquestion.LabelEqualFold(*i.LabelEqualFold))
	}
	if i.LabelContainsFold != nil {
		predicates = append(predicates, entformquestion.LabelContainsFold(*i.LabelContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, entformquestion.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, entformquestion.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, entformquestion.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, entformquestion.TypeNotIn(i.TypeNotIn...))
	}
	if i.Required != nil {
		predicates = append(predicates, entformquestion.RequiredEQ(*i.Required))
	}
	if i.RequiredNEQ != nil {
		predicates = append(predicates, entformquestion.RequiredNEQ(*i.RequiredNEQ))
	}
	if i.ExtraData != nil {
		predicates = append(predicates, entformquestion.ExtraDataEQ(*i.ExtraData))
	}
	if i.ExtraDataNEQ != nil {
		predicates = append(predicates, entformquestion.ExtraDataNEQ(*i.ExtraDataNEQ))
	}
	if len(i.ExtraDataIn) > 0 {
		predicates = append(predicates, entformquestion.ExtraDataIn(i.ExtraDataIn...))
	}
	if len(i.ExtraDataNotIn) > 0 {
		predicates = append(predicates, entformquestion.ExtraDataNotIn(i.ExtraDataNotIn...))
	}
	if i.ExtraDataGT != nil {
		predicates = append(predicates, entformquestion.ExtraDataGT(*i.ExtraDataGT))
	}
	if i.ExtraDataGTE != nil {
		predicates = append(predicates, entformquestion.ExtraDataGTE(*i.ExtraDataGTE))
	}
	if i.ExtraDataLT != nil {
		predicates = append(predicates, entformquestion.ExtraDataLT(*i.ExtraDataLT))
	}
	if i.ExtraDataLTE != nil {
		predicates = append(predicates, entformquestion.ExtraDataLTE(*i.ExtraDataLTE))
	}
	if i.ExtraDataContains != nil {
		predicates = append(predicates, entformquestion.ExtraDataContains(*i.ExtraDataContains))
	}
	if i.ExtraDataHasPrefix != nil {
		predicates = append(predicates, entformquestion.ExtraDataHasPrefix(*i.ExtraDataHasPrefix))
	}
	if i.ExtraDataHasSuffix != nil {
		predicates = append(predicates, entformquestion.ExtraDataHasSuffix(*i.ExtraDataHasSuffix))
	}
	if i.ExtraDataIsNil {
		predicates = append(predicates, entformquestion.ExtraDataIsNil())
	}
	if i.ExtraDataNotNil {
		predicates = append(predicates, entformquestion.ExtraDataNotNil())
	}
	if i.ExtraDataEqualFold != nil {
		predicates = append(predicates, entformquestion.ExtraDataEqualFold(*i.ExtraDataEqualFold))
	}
	if i.ExtraDataContainsFold != nil {
		predicates = append(predicates, entformquestion.ExtraDataContainsFold(*i.ExtraDataContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, entformquestion.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, entformquestion.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, entformquestion.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, entformquestion.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, entformquestion.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, entformquestion.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, entformquestion.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, entformquestion.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, entformquestion.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, entformquestion.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, entformquestion.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, entformquestion.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, entformquestion.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, entformquestion.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, entformquestion.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, entformquestion.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, entformquestion.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, entformquestion.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, entformquestion.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, entformquestion.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, entformquestion.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, entformquestion.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, entformquestion.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, entformquestion.CreatedByLTE(*i.CreatedByLTE))
	}

	if i.HasForm != nil {
		p := entformquestion.HasForm()
		if !*i.HasForm {
			p = entformquestion.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormWith) > 0 {
		with := make([]predicate.EntForm, 0, len(i.HasFormWith))
		for _, w := range i.HasFormWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, entformquestion.HasFormWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyEntFormQuestionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return entformquestion.And(predicates...), nil
	}
}

// FormInstanceWhereInput represents a where input for filtering FormInstance queries.
type FormInstanceWhereInput struct {
	Predicates []predicate.FormInstance  `json:"-"`
	Not        *FormInstanceWhereInput   `json:"not,omitempty"`
	Or         []*FormInstanceWhereInput `json:"or,omitempty"`
	And        []*FormInstanceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "status" field predicates.
	Status      *forminstance.Status  `json:"status,omitempty"`
	StatusNEQ   *forminstance.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []forminstance.Status `json:"statusIn,omitempty"`
	StatusNotIn []forminstance.Status `json:"statusNotIn,omitempty"`

	// "form_spec" edge predicates.
	HasFormSpec     *bool                 `json:"hasFormSpec,omitempty"`
	HasFormSpecWith []*FormSpecWhereInput `json:"hasFormSpecWith,omitempty"`

	// "question_response" edge predicates.
	HasQuestionResponse     *bool                         `json:"hasQuestionResponse,omitempty"`
	HasQuestionResponseWith []*QuestionResponseWhereInput `json:"hasQuestionResponseWith,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FormInstanceWhereInput) AddPredicates(predicates ...predicate.FormInstance) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FormInstanceWhereInput filter on the FormInstanceQuery builder.
func (i *FormInstanceWhereInput) Filter(q *FormInstanceQuery) (*FormInstanceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFormInstanceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFormInstanceWhereInput is returned in case the FormInstanceWhereInput is empty.
var ErrEmptyFormInstanceWhereInput = errors.New("ent: empty predicate FormInstanceWhereInput")

// P returns a predicate for filtering forminstances.
// An error is returned if the input is empty or invalid.
func (i *FormInstanceWhereInput) P() (predicate.FormInstance, error) {
	var predicates []predicate.FormInstance
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, forminstance.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FormInstance, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, forminstance.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FormInstance, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, forminstance.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, forminstance.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, forminstance.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, forminstance.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, forminstance.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, forminstance.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, forminstance.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, forminstance.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, forminstance.IDLTE(*i.IDLTE))
	}
	if i.Status != nil {
		predicates = append(predicates, forminstance.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, forminstance.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, forminstance.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, forminstance.StatusNotIn(i.StatusNotIn...))
	}

	if i.HasFormSpec != nil {
		p := forminstance.HasFormSpec()
		if !*i.HasFormSpec {
			p = forminstance.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormSpecWith) > 0 {
		with := make([]predicate.FormSpec, 0, len(i.HasFormSpecWith))
		for _, w := range i.HasFormSpecWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormSpecWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, forminstance.HasFormSpecWith(with...))
	}
	if i.HasQuestionResponse != nil {
		p := forminstance.HasQuestionResponse()
		if !*i.HasQuestionResponse {
			p = forminstance.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionResponseWith) > 0 {
		with := make([]predicate.QuestionResponse, 0, len(i.HasQuestionResponseWith))
		for _, w := range i.HasQuestionResponseWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionResponseWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, forminstance.HasQuestionResponseWith(with...))
	}
	if i.HasUsers != nil {
		p := forminstance.HasUsers()
		if !*i.HasUsers {
			p = forminstance.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, forminstance.HasUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFormInstanceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return forminstance.And(predicates...), nil
	}
}

// FormSpecWhereInput represents a where input for filtering FormSpec queries.
type FormSpecWhereInput struct {
	Predicates []predicate.FormSpec  `json:"-"`
	Not        *FormSpecWhereInput   `json:"not,omitempty"`
	Or         []*FormSpecWhereInput `json:"or,omitempty"`
	And        []*FormSpecWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "cover" field predicates.
	Cover             *string  `json:"cover,omitempty"`
	CoverNEQ          *string  `json:"coverNEQ,omitempty"`
	CoverIn           []string `json:"coverIn,omitempty"`
	CoverNotIn        []string `json:"coverNotIn,omitempty"`
	CoverGT           *string  `json:"coverGT,omitempty"`
	CoverGTE          *string  `json:"coverGTE,omitempty"`
	CoverLT           *string  `json:"coverLT,omitempty"`
	CoverLTE          *string  `json:"coverLTE,omitempty"`
	CoverContains     *string  `json:"coverContains,omitempty"`
	CoverHasPrefix    *string  `json:"coverHasPrefix,omitempty"`
	CoverHasSuffix    *string  `json:"coverHasSuffix,omitempty"`
	CoverIsNil        bool     `json:"coverIsNil,omitempty"`
	CoverNotNil       bool     `json:"coverNotNil,omitempty"`
	CoverEqualFold    *string  `json:"coverEqualFold,omitempty"`
	CoverContainsFold *string  `json:"coverContainsFold,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "is_template" field predicates.
	IsTemplate    *bool `json:"isTemplate,omitempty"`
	IsTemplateNEQ *bool `json:"isTemplateNEQ,omitempty"`

	// "enabled" field predicates.
	Enabled    *bool `json:"enabled,omitempty"`
	EnabledNEQ *bool `json:"enabledNEQ,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int `json:"createdByIn,omitempty"`
	CreatedByNotIn []int `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int  `json:"createdByLTE,omitempty"`

	// "question_groups" edge predicates.
	HasQuestionGroups     *bool                      `json:"hasQuestionGroups,omitempty"`
	HasQuestionGroupsWith []*QuestionGroupWhereInput `json:"hasQuestionGroupsWith,omitempty"`

	// "form_instances" edge predicates.
	HasFormInstances     *bool                     `json:"hasFormInstances,omitempty"`
	HasFormInstancesWith []*FormInstanceWhereInput `json:"hasFormInstancesWith,omitempty"`

	// "owner" edge predicates.
	HasOwner     *bool             `json:"hasOwner,omitempty"`
	HasOwnerWith []*UserWhereInput `json:"hasOwnerWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FormSpecWhereInput) AddPredicates(predicates ...predicate.FormSpec) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FormSpecWhereInput filter on the FormSpecQuery builder.
func (i *FormSpecWhereInput) Filter(q *FormSpecQuery) (*FormSpecQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFormSpecWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFormSpecWhereInput is returned in case the FormSpecWhereInput is empty.
var ErrEmptyFormSpecWhereInput = errors.New("ent: empty predicate FormSpecWhereInput")

// P returns a predicate for filtering formspecs.
// An error is returned if the input is empty or invalid.
func (i *FormSpecWhereInput) P() (predicate.FormSpec, error) {
	var predicates []predicate.FormSpec
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, formspec.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FormSpec, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, formspec.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FormSpec, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, formspec.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, formspec.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, formspec.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, formspec.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, formspec.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, formspec.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, formspec.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, formspec.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, formspec.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, formspec.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, formspec.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, formspec.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, formspec.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, formspec.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, formspec.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, formspec.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, formspec.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, formspec.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, formspec.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, formspec.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, formspec.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, formspec.NameContainsFold(*i.NameContainsFold))
	}
	if i.Cover != nil {
		predicates = append(predicates, formspec.CoverEQ(*i.Cover))
	}
	if i.CoverNEQ != nil {
		predicates = append(predicates, formspec.CoverNEQ(*i.CoverNEQ))
	}
	if len(i.CoverIn) > 0 {
		predicates = append(predicates, formspec.CoverIn(i.CoverIn...))
	}
	if len(i.CoverNotIn) > 0 {
		predicates = append(predicates, formspec.CoverNotIn(i.CoverNotIn...))
	}
	if i.CoverGT != nil {
		predicates = append(predicates, formspec.CoverGT(*i.CoverGT))
	}
	if i.CoverGTE != nil {
		predicates = append(predicates, formspec.CoverGTE(*i.CoverGTE))
	}
	if i.CoverLT != nil {
		predicates = append(predicates, formspec.CoverLT(*i.CoverLT))
	}
	if i.CoverLTE != nil {
		predicates = append(predicates, formspec.CoverLTE(*i.CoverLTE))
	}
	if i.CoverContains != nil {
		predicates = append(predicates, formspec.CoverContains(*i.CoverContains))
	}
	if i.CoverHasPrefix != nil {
		predicates = append(predicates, formspec.CoverHasPrefix(*i.CoverHasPrefix))
	}
	if i.CoverHasSuffix != nil {
		predicates = append(predicates, formspec.CoverHasSuffix(*i.CoverHasSuffix))
	}
	if i.CoverIsNil {
		predicates = append(predicates, formspec.CoverIsNil())
	}
	if i.CoverNotNil {
		predicates = append(predicates, formspec.CoverNotNil())
	}
	if i.CoverEqualFold != nil {
		predicates = append(predicates, formspec.CoverEqualFold(*i.CoverEqualFold))
	}
	if i.CoverContainsFold != nil {
		predicates = append(predicates, formspec.CoverContainsFold(*i.CoverContainsFold))
	}
	if i.Description != nil {
		predicates = append(predicates, formspec.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, formspec.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, formspec.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, formspec.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, formspec.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, formspec.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, formspec.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, formspec.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, formspec.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, formspec.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, formspec.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, formspec.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, formspec.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.IsTemplate != nil {
		predicates = append(predicates, formspec.IsTemplateEQ(*i.IsTemplate))
	}
	if i.IsTemplateNEQ != nil {
		predicates = append(predicates, formspec.IsTemplateNEQ(*i.IsTemplateNEQ))
	}
	if i.Enabled != nil {
		predicates = append(predicates, formspec.EnabledEQ(*i.Enabled))
	}
	if i.EnabledNEQ != nil {
		predicates = append(predicates, formspec.EnabledNEQ(*i.EnabledNEQ))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, formspec.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, formspec.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, formspec.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, formspec.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, formspec.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, formspec.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, formspec.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, formspec.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, formspec.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, formspec.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, formspec.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, formspec.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, formspec.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, formspec.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, formspec.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, formspec.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, formspec.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, formspec.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, formspec.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, formspec.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, formspec.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, formspec.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, formspec.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, formspec.CreatedByLTE(*i.CreatedByLTE))
	}

	if i.HasQuestionGroups != nil {
		p := formspec.HasQuestionGroups()
		if !*i.HasQuestionGroups {
			p = formspec.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionGroupsWith) > 0 {
		with := make([]predicate.QuestionGroup, 0, len(i.HasQuestionGroupsWith))
		for _, w := range i.HasQuestionGroupsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionGroupsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, formspec.HasQuestionGroupsWith(with...))
	}
	if i.HasFormInstances != nil {
		p := formspec.HasFormInstances()
		if !*i.HasFormInstances {
			p = formspec.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormInstancesWith) > 0 {
		with := make([]predicate.FormInstance, 0, len(i.HasFormInstancesWith))
		for _, w := range i.HasFormInstancesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormInstancesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, formspec.HasFormInstancesWith(with...))
	}
	if i.HasOwner != nil {
		p := formspec.HasOwner()
		if !*i.HasOwner {
			p = formspec.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasOwnerWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasOwnerWith))
		for _, w := range i.HasOwnerWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasOwnerWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, formspec.HasOwnerWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFormSpecWhereInput
	case 1:
		return predicates[0], nil
	default:
		return formspec.And(predicates...), nil
	}
}

// QuestionWhereInput represents a where input for filtering Question queries.
type QuestionWhereInput struct {
	Predicates []predicate.Question  `json:"-"`
	Not        *QuestionWhereInput   `json:"not,omitempty"`
	Or         []*QuestionWhereInput `json:"or,omitempty"`
	And        []*QuestionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "label" field predicates.
	Label             *string  `json:"label,omitempty"`
	LabelNEQ          *string  `json:"labelNEQ,omitempty"`
	LabelIn           []string `json:"labelIn,omitempty"`
	LabelNotIn        []string `json:"labelNotIn,omitempty"`
	LabelGT           *string  `json:"labelGT,omitempty"`
	LabelGTE          *string  `json:"labelGTE,omitempty"`
	LabelLT           *string  `json:"labelLT,omitempty"`
	LabelLTE          *string  `json:"labelLTE,omitempty"`
	LabelContains     *string  `json:"labelContains,omitempty"`
	LabelHasPrefix    *string  `json:"labelHasPrefix,omitempty"`
	LabelHasSuffix    *string  `json:"labelHasSuffix,omitempty"`
	LabelEqualFold    *string  `json:"labelEqualFold,omitempty"`
	LabelContainsFold *string  `json:"labelContainsFold,omitempty"`

	// "title" field predicates.
	Title             *string  `json:"title,omitempty"`
	TitleNEQ          *string  `json:"titleNEQ,omitempty"`
	TitleIn           []string `json:"titleIn,omitempty"`
	TitleNotIn        []string `json:"titleNotIn,omitempty"`
	TitleGT           *string  `json:"titleGT,omitempty"`
	TitleGTE          *string  `json:"titleGTE,omitempty"`
	TitleLT           *string  `json:"titleLT,omitempty"`
	TitleLTE          *string  `json:"titleLTE,omitempty"`
	TitleContains     *string  `json:"titleContains,omitempty"`
	TitleHasPrefix    *string  `json:"titleHasPrefix,omitempty"`
	TitleHasSuffix    *string  `json:"titleHasSuffix,omitempty"`
	TitleEqualFold    *string  `json:"titleEqualFold,omitempty"`
	TitleContainsFold *string  `json:"titleContainsFold,omitempty"`

	// "type" field predicates.
	Type      *question.Type  `json:"type,omitempty"`
	TypeNEQ   *question.Type  `json:"typeNEQ,omitempty"`
	TypeIn    []question.Type `json:"typeIn,omitempty"`
	TypeNotIn []question.Type `json:"typeNotIn,omitempty"`

	// "required" field predicates.
	Required    *bool `json:"required,omitempty"`
	RequiredNEQ *bool `json:"requiredNEQ,omitempty"`

	// "extra_data" field predicates.
	ExtraData             *string  `json:"extraData,omitempty"`
	ExtraDataNEQ          *string  `json:"extraDataNEQ,omitempty"`
	ExtraDataIn           []string `json:"extraDataIn,omitempty"`
	ExtraDataNotIn        []string `json:"extraDataNotIn,omitempty"`
	ExtraDataGT           *string  `json:"extraDataGT,omitempty"`
	ExtraDataGTE          *string  `json:"extraDataGTE,omitempty"`
	ExtraDataLT           *string  `json:"extraDataLT,omitempty"`
	ExtraDataLTE          *string  `json:"extraDataLTE,omitempty"`
	ExtraDataContains     *string  `json:"extraDataContains,omitempty"`
	ExtraDataHasPrefix    *string  `json:"extraDataHasPrefix,omitempty"`
	ExtraDataHasSuffix    *string  `json:"extraDataHasSuffix,omitempty"`
	ExtraDataEqualFold    *string  `json:"extraDataEqualFold,omitempty"`
	ExtraDataContainsFold *string  `json:"extraDataContainsFold,omitempty"`

	// "rule" field predicates.
	Rule             *string  `json:"rule,omitempty"`
	RuleNEQ          *string  `json:"ruleNEQ,omitempty"`
	RuleIn           []string `json:"ruleIn,omitempty"`
	RuleNotIn        []string `json:"ruleNotIn,omitempty"`
	RuleGT           *string  `json:"ruleGT,omitempty"`
	RuleGTE          *string  `json:"ruleGTE,omitempty"`
	RuleLT           *string  `json:"ruleLT,omitempty"`
	RuleLTE          *string  `json:"ruleLTE,omitempty"`
	RuleContains     *string  `json:"ruleContains,omitempty"`
	RuleHasPrefix    *string  `json:"ruleHasPrefix,omitempty"`
	RuleHasSuffix    *string  `json:"ruleHasSuffix,omitempty"`
	RuleEqualFold    *string  `json:"ruleEqualFold,omitempty"`
	RuleContainsFold *string  `json:"ruleContainsFold,omitempty"`

	// "dependencies" field predicates.
	Dependencies             *string  `json:"dependencies,omitempty"`
	DependenciesNEQ          *string  `json:"dependenciesNEQ,omitempty"`
	DependenciesIn           []string `json:"dependenciesIn,omitempty"`
	DependenciesNotIn        []string `json:"dependenciesNotIn,omitempty"`
	DependenciesGT           *string  `json:"dependenciesGT,omitempty"`
	DependenciesGTE          *string  `json:"dependenciesGTE,omitempty"`
	DependenciesLT           *string  `json:"dependenciesLT,omitempty"`
	DependenciesLTE          *string  `json:"dependenciesLTE,omitempty"`
	DependenciesContains     *string  `json:"dependenciesContains,omitempty"`
	DependenciesHasPrefix    *string  `json:"dependenciesHasPrefix,omitempty"`
	DependenciesHasSuffix    *string  `json:"dependenciesHasSuffix,omitempty"`
	DependenciesEqualFold    *string  `json:"dependenciesEqualFold,omitempty"`
	DependenciesContainsFold *string  `json:"dependenciesContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int `json:"createdByIn,omitempty"`
	CreatedByNotIn []int `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int  `json:"createdByLTE,omitempty"`

	// "from_question_group" edge predicates.
	HasFromQuestionGroup     *bool                      `json:"hasFromQuestionGroup,omitempty"`
	HasFromQuestionGroupWith []*QuestionGroupWhereInput `json:"hasFromQuestionGroupWith,omitempty"`

	// "question_response" edge predicates.
	HasQuestionResponse     *bool                         `json:"hasQuestionResponse,omitempty"`
	HasQuestionResponseWith []*QuestionResponseWhereInput `json:"hasQuestionResponseWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *QuestionWhereInput) AddPredicates(predicates ...predicate.Question) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the QuestionWhereInput filter on the QuestionQuery builder.
func (i *QuestionWhereInput) Filter(q *QuestionQuery) (*QuestionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyQuestionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyQuestionWhereInput is returned in case the QuestionWhereInput is empty.
var ErrEmptyQuestionWhereInput = errors.New("ent: empty predicate QuestionWhereInput")

// P returns a predicate for filtering questions.
// An error is returned if the input is empty or invalid.
func (i *QuestionWhereInput) P() (predicate.Question, error) {
	var predicates []predicate.Question
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, question.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Question, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, question.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Question, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, question.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, question.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, question.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, question.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, question.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, question.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, question.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, question.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, question.IDLTE(*i.IDLTE))
	}
	if i.Label != nil {
		predicates = append(predicates, question.LabelEQ(*i.Label))
	}
	if i.LabelNEQ != nil {
		predicates = append(predicates, question.LabelNEQ(*i.LabelNEQ))
	}
	if len(i.LabelIn) > 0 {
		predicates = append(predicates, question.LabelIn(i.LabelIn...))
	}
	if len(i.LabelNotIn) > 0 {
		predicates = append(predicates, question.LabelNotIn(i.LabelNotIn...))
	}
	if i.LabelGT != nil {
		predicates = append(predicates, question.LabelGT(*i.LabelGT))
	}
	if i.LabelGTE != nil {
		predicates = append(predicates, question.LabelGTE(*i.LabelGTE))
	}
	if i.LabelLT != nil {
		predicates = append(predicates, question.LabelLT(*i.LabelLT))
	}
	if i.LabelLTE != nil {
		predicates = append(predicates, question.LabelLTE(*i.LabelLTE))
	}
	if i.LabelContains != nil {
		predicates = append(predicates, question.LabelContains(*i.LabelContains))
	}
	if i.LabelHasPrefix != nil {
		predicates = append(predicates, question.LabelHasPrefix(*i.LabelHasPrefix))
	}
	if i.LabelHasSuffix != nil {
		predicates = append(predicates, question.LabelHasSuffix(*i.LabelHasSuffix))
	}
	if i.LabelEqualFold != nil {
		predicates = append(predicates, question.LabelEqualFold(*i.LabelEqualFold))
	}
	if i.LabelContainsFold != nil {
		predicates = append(predicates, question.LabelContainsFold(*i.LabelContainsFold))
	}
	if i.Title != nil {
		predicates = append(predicates, question.TitleEQ(*i.Title))
	}
	if i.TitleNEQ != nil {
		predicates = append(predicates, question.TitleNEQ(*i.TitleNEQ))
	}
	if len(i.TitleIn) > 0 {
		predicates = append(predicates, question.TitleIn(i.TitleIn...))
	}
	if len(i.TitleNotIn) > 0 {
		predicates = append(predicates, question.TitleNotIn(i.TitleNotIn...))
	}
	if i.TitleGT != nil {
		predicates = append(predicates, question.TitleGT(*i.TitleGT))
	}
	if i.TitleGTE != nil {
		predicates = append(predicates, question.TitleGTE(*i.TitleGTE))
	}
	if i.TitleLT != nil {
		predicates = append(predicates, question.TitleLT(*i.TitleLT))
	}
	if i.TitleLTE != nil {
		predicates = append(predicates, question.TitleLTE(*i.TitleLTE))
	}
	if i.TitleContains != nil {
		predicates = append(predicates, question.TitleContains(*i.TitleContains))
	}
	if i.TitleHasPrefix != nil {
		predicates = append(predicates, question.TitleHasPrefix(*i.TitleHasPrefix))
	}
	if i.TitleHasSuffix != nil {
		predicates = append(predicates, question.TitleHasSuffix(*i.TitleHasSuffix))
	}
	if i.TitleEqualFold != nil {
		predicates = append(predicates, question.TitleEqualFold(*i.TitleEqualFold))
	}
	if i.TitleContainsFold != nil {
		predicates = append(predicates, question.TitleContainsFold(*i.TitleContainsFold))
	}
	if i.Type != nil {
		predicates = append(predicates, question.TypeEQ(*i.Type))
	}
	if i.TypeNEQ != nil {
		predicates = append(predicates, question.TypeNEQ(*i.TypeNEQ))
	}
	if len(i.TypeIn) > 0 {
		predicates = append(predicates, question.TypeIn(i.TypeIn...))
	}
	if len(i.TypeNotIn) > 0 {
		predicates = append(predicates, question.TypeNotIn(i.TypeNotIn...))
	}
	if i.Required != nil {
		predicates = append(predicates, question.RequiredEQ(*i.Required))
	}
	if i.RequiredNEQ != nil {
		predicates = append(predicates, question.RequiredNEQ(*i.RequiredNEQ))
	}
	if i.ExtraData != nil {
		predicates = append(predicates, question.ExtraDataEQ(*i.ExtraData))
	}
	if i.ExtraDataNEQ != nil {
		predicates = append(predicates, question.ExtraDataNEQ(*i.ExtraDataNEQ))
	}
	if len(i.ExtraDataIn) > 0 {
		predicates = append(predicates, question.ExtraDataIn(i.ExtraDataIn...))
	}
	if len(i.ExtraDataNotIn) > 0 {
		predicates = append(predicates, question.ExtraDataNotIn(i.ExtraDataNotIn...))
	}
	if i.ExtraDataGT != nil {
		predicates = append(predicates, question.ExtraDataGT(*i.ExtraDataGT))
	}
	if i.ExtraDataGTE != nil {
		predicates = append(predicates, question.ExtraDataGTE(*i.ExtraDataGTE))
	}
	if i.ExtraDataLT != nil {
		predicates = append(predicates, question.ExtraDataLT(*i.ExtraDataLT))
	}
	if i.ExtraDataLTE != nil {
		predicates = append(predicates, question.ExtraDataLTE(*i.ExtraDataLTE))
	}
	if i.ExtraDataContains != nil {
		predicates = append(predicates, question.ExtraDataContains(*i.ExtraDataContains))
	}
	if i.ExtraDataHasPrefix != nil {
		predicates = append(predicates, question.ExtraDataHasPrefix(*i.ExtraDataHasPrefix))
	}
	if i.ExtraDataHasSuffix != nil {
		predicates = append(predicates, question.ExtraDataHasSuffix(*i.ExtraDataHasSuffix))
	}
	if i.ExtraDataEqualFold != nil {
		predicates = append(predicates, question.ExtraDataEqualFold(*i.ExtraDataEqualFold))
	}
	if i.ExtraDataContainsFold != nil {
		predicates = append(predicates, question.ExtraDataContainsFold(*i.ExtraDataContainsFold))
	}
	if i.Rule != nil {
		predicates = append(predicates, question.RuleEQ(*i.Rule))
	}
	if i.RuleNEQ != nil {
		predicates = append(predicates, question.RuleNEQ(*i.RuleNEQ))
	}
	if len(i.RuleIn) > 0 {
		predicates = append(predicates, question.RuleIn(i.RuleIn...))
	}
	if len(i.RuleNotIn) > 0 {
		predicates = append(predicates, question.RuleNotIn(i.RuleNotIn...))
	}
	if i.RuleGT != nil {
		predicates = append(predicates, question.RuleGT(*i.RuleGT))
	}
	if i.RuleGTE != nil {
		predicates = append(predicates, question.RuleGTE(*i.RuleGTE))
	}
	if i.RuleLT != nil {
		predicates = append(predicates, question.RuleLT(*i.RuleLT))
	}
	if i.RuleLTE != nil {
		predicates = append(predicates, question.RuleLTE(*i.RuleLTE))
	}
	if i.RuleContains != nil {
		predicates = append(predicates, question.RuleContains(*i.RuleContains))
	}
	if i.RuleHasPrefix != nil {
		predicates = append(predicates, question.RuleHasPrefix(*i.RuleHasPrefix))
	}
	if i.RuleHasSuffix != nil {
		predicates = append(predicates, question.RuleHasSuffix(*i.RuleHasSuffix))
	}
	if i.RuleEqualFold != nil {
		predicates = append(predicates, question.RuleEqualFold(*i.RuleEqualFold))
	}
	if i.RuleContainsFold != nil {
		predicates = append(predicates, question.RuleContainsFold(*i.RuleContainsFold))
	}
	if i.Dependencies != nil {
		predicates = append(predicates, question.DependenciesEQ(*i.Dependencies))
	}
	if i.DependenciesNEQ != nil {
		predicates = append(predicates, question.DependenciesNEQ(*i.DependenciesNEQ))
	}
	if len(i.DependenciesIn) > 0 {
		predicates = append(predicates, question.DependenciesIn(i.DependenciesIn...))
	}
	if len(i.DependenciesNotIn) > 0 {
		predicates = append(predicates, question.DependenciesNotIn(i.DependenciesNotIn...))
	}
	if i.DependenciesGT != nil {
		predicates = append(predicates, question.DependenciesGT(*i.DependenciesGT))
	}
	if i.DependenciesGTE != nil {
		predicates = append(predicates, question.DependenciesGTE(*i.DependenciesGTE))
	}
	if i.DependenciesLT != nil {
		predicates = append(predicates, question.DependenciesLT(*i.DependenciesLT))
	}
	if i.DependenciesLTE != nil {
		predicates = append(predicates, question.DependenciesLTE(*i.DependenciesLTE))
	}
	if i.DependenciesContains != nil {
		predicates = append(predicates, question.DependenciesContains(*i.DependenciesContains))
	}
	if i.DependenciesHasPrefix != nil {
		predicates = append(predicates, question.DependenciesHasPrefix(*i.DependenciesHasPrefix))
	}
	if i.DependenciesHasSuffix != nil {
		predicates = append(predicates, question.DependenciesHasSuffix(*i.DependenciesHasSuffix))
	}
	if i.DependenciesEqualFold != nil {
		predicates = append(predicates, question.DependenciesEqualFold(*i.DependenciesEqualFold))
	}
	if i.DependenciesContainsFold != nil {
		predicates = append(predicates, question.DependenciesContainsFold(*i.DependenciesContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, question.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, question.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, question.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, question.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, question.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, question.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, question.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, question.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, question.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, question.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, question.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, question.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, question.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, question.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, question.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, question.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, question.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, question.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, question.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, question.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, question.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, question.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, question.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, question.CreatedByLTE(*i.CreatedByLTE))
	}

	if i.HasFromQuestionGroup != nil {
		p := question.HasFromQuestionGroup()
		if !*i.HasFromQuestionGroup {
			p = question.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFromQuestionGroupWith) > 0 {
		with := make([]predicate.QuestionGroup, 0, len(i.HasFromQuestionGroupWith))
		for _, w := range i.HasFromQuestionGroupWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFromQuestionGroupWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, question.HasFromQuestionGroupWith(with...))
	}
	if i.HasQuestionResponse != nil {
		p := question.HasQuestionResponse()
		if !*i.HasQuestionResponse {
			p = question.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionResponseWith) > 0 {
		with := make([]predicate.QuestionResponse, 0, len(i.HasQuestionResponseWith))
		for _, w := range i.HasQuestionResponseWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionResponseWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, question.HasQuestionResponseWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyQuestionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return question.And(predicates...), nil
	}
}

// QuestionGroupWhereInput represents a where input for filtering QuestionGroup queries.
type QuestionGroupWhereInput struct {
	Predicates []predicate.QuestionGroup  `json:"-"`
	Not        *QuestionGroupWhereInput   `json:"not,omitempty"`
	Or         []*QuestionGroupWhereInput `json:"or,omitempty"`
	And        []*QuestionGroupWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "created_by" field predicates.
	CreatedBy      *int  `json:"createdBy,omitempty"`
	CreatedByNEQ   *int  `json:"createdByNEQ,omitempty"`
	CreatedByIn    []int `json:"createdByIn,omitempty"`
	CreatedByNotIn []int `json:"createdByNotIn,omitempty"`
	CreatedByGT    *int  `json:"createdByGT,omitempty"`
	CreatedByGTE   *int  `json:"createdByGTE,omitempty"`
	CreatedByLT    *int  `json:"createdByLT,omitempty"`
	CreatedByLTE   *int  `json:"createdByLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "question" edge predicates.
	HasQuestion     *bool                 `json:"hasQuestion,omitempty"`
	HasQuestionWith []*QuestionWhereInput `json:"hasQuestionWith,omitempty"`

	// "form_spec" edge predicates.
	HasFormSpec     *bool                 `json:"hasFormSpec,omitempty"`
	HasFormSpecWith []*FormSpecWhereInput `json:"hasFormSpecWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *QuestionGroupWhereInput) AddPredicates(predicates ...predicate.QuestionGroup) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the QuestionGroupWhereInput filter on the QuestionGroupQuery builder.
func (i *QuestionGroupWhereInput) Filter(q *QuestionGroupQuery) (*QuestionGroupQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyQuestionGroupWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyQuestionGroupWhereInput is returned in case the QuestionGroupWhereInput is empty.
var ErrEmptyQuestionGroupWhereInput = errors.New("ent: empty predicate QuestionGroupWhereInput")

// P returns a predicate for filtering questiongroups.
// An error is returned if the input is empty or invalid.
func (i *QuestionGroupWhereInput) P() (predicate.QuestionGroup, error) {
	var predicates []predicate.QuestionGroup
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, questiongroup.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.QuestionGroup, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, questiongroup.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.QuestionGroup, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, questiongroup.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, questiongroup.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, questiongroup.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, questiongroup.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, questiongroup.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, questiongroup.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, questiongroup.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, questiongroup.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, questiongroup.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, questiongroup.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, questiongroup.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, questiongroup.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, questiongroup.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, questiongroup.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, questiongroup.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, questiongroup.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, questiongroup.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, questiongroup.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, questiongroup.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, questiongroup.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, questiongroup.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, questiongroup.NameContainsFold(*i.NameContainsFold))
	}
	if i.CreatedBy != nil {
		predicates = append(predicates, questiongroup.CreatedByEQ(*i.CreatedBy))
	}
	if i.CreatedByNEQ != nil {
		predicates = append(predicates, questiongroup.CreatedByNEQ(*i.CreatedByNEQ))
	}
	if len(i.CreatedByIn) > 0 {
		predicates = append(predicates, questiongroup.CreatedByIn(i.CreatedByIn...))
	}
	if len(i.CreatedByNotIn) > 0 {
		predicates = append(predicates, questiongroup.CreatedByNotIn(i.CreatedByNotIn...))
	}
	if i.CreatedByGT != nil {
		predicates = append(predicates, questiongroup.CreatedByGT(*i.CreatedByGT))
	}
	if i.CreatedByGTE != nil {
		predicates = append(predicates, questiongroup.CreatedByGTE(*i.CreatedByGTE))
	}
	if i.CreatedByLT != nil {
		predicates = append(predicates, questiongroup.CreatedByLT(*i.CreatedByLT))
	}
	if i.CreatedByLTE != nil {
		predicates = append(predicates, questiongroup.CreatedByLTE(*i.CreatedByLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, questiongroup.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, questiongroup.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, questiongroup.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, questiongroup.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, questiongroup.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, questiongroup.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, questiongroup.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, questiongroup.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, questiongroup.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, questiongroup.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, questiongroup.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, questiongroup.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, questiongroup.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, questiongroup.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, questiongroup.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, questiongroup.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasQuestion != nil {
		p := questiongroup.HasQuestion()
		if !*i.HasQuestion {
			p = questiongroup.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionWith) > 0 {
		with := make([]predicate.Question, 0, len(i.HasQuestionWith))
		for _, w := range i.HasQuestionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, questiongroup.HasQuestionWith(with...))
	}
	if i.HasFormSpec != nil {
		p := questiongroup.HasFormSpec()
		if !*i.HasFormSpec {
			p = questiongroup.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormSpecWith) > 0 {
		with := make([]predicate.FormSpec, 0, len(i.HasFormSpecWith))
		for _, w := range i.HasFormSpecWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormSpecWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, questiongroup.HasFormSpecWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyQuestionGroupWhereInput
	case 1:
		return predicates[0], nil
	default:
		return questiongroup.And(predicates...), nil
	}
}

// QuestionResponseWhereInput represents a where input for filtering QuestionResponse queries.
type QuestionResponseWhereInput struct {
	Predicates []predicate.QuestionResponse  `json:"-"`
	Not        *QuestionResponseWhereInput   `json:"not,omitempty"`
	Or         []*QuestionResponseWhereInput `json:"or,omitempty"`
	And        []*QuestionResponseWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "label" field predicates.
	Label             *string  `json:"label,omitempty"`
	LabelNEQ          *string  `json:"labelNEQ,omitempty"`
	LabelIn           []string `json:"labelIn,omitempty"`
	LabelNotIn        []string `json:"labelNotIn,omitempty"`
	LabelGT           *string  `json:"labelGT,omitempty"`
	LabelGTE          *string  `json:"labelGTE,omitempty"`
	LabelLT           *string  `json:"labelLT,omitempty"`
	LabelLTE          *string  `json:"labelLTE,omitempty"`
	LabelContains     *string  `json:"labelContains,omitempty"`
	LabelHasPrefix    *string  `json:"labelHasPrefix,omitempty"`
	LabelHasSuffix    *string  `json:"labelHasSuffix,omitempty"`
	LabelEqualFold    *string  `json:"labelEqualFold,omitempty"`
	LabelContainsFold *string  `json:"labelContainsFold,omitempty"`

	// "value" field predicates.
	Value             *string  `json:"value,omitempty"`
	ValueNEQ          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGT           *string  `json:"valueGT,omitempty"`
	ValueGTE          *string  `json:"valueGTE,omitempty"`
	ValueLT           *string  `json:"valueLT,omitempty"`
	ValueLTE          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "question" edge predicates.
	HasQuestion     *bool                 `json:"hasQuestion,omitempty"`
	HasQuestionWith []*QuestionWhereInput `json:"hasQuestionWith,omitempty"`

	// "form_instance" edge predicates.
	HasFormInstance     *bool                     `json:"hasFormInstance,omitempty"`
	HasFormInstanceWith []*FormInstanceWhereInput `json:"hasFormInstanceWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *QuestionResponseWhereInput) AddPredicates(predicates ...predicate.QuestionResponse) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the QuestionResponseWhereInput filter on the QuestionResponseQuery builder.
func (i *QuestionResponseWhereInput) Filter(q *QuestionResponseQuery) (*QuestionResponseQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyQuestionResponseWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyQuestionResponseWhereInput is returned in case the QuestionResponseWhereInput is empty.
var ErrEmptyQuestionResponseWhereInput = errors.New("ent: empty predicate QuestionResponseWhereInput")

// P returns a predicate for filtering questionresponses.
// An error is returned if the input is empty or invalid.
func (i *QuestionResponseWhereInput) P() (predicate.QuestionResponse, error) {
	var predicates []predicate.QuestionResponse
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, questionresponse.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.QuestionResponse, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, questionresponse.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.QuestionResponse, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, questionresponse.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, questionresponse.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, questionresponse.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, questionresponse.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, questionresponse.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, questionresponse.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, questionresponse.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, questionresponse.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, questionresponse.IDLTE(*i.IDLTE))
	}
	if i.Label != nil {
		predicates = append(predicates, questionresponse.LabelEQ(*i.Label))
	}
	if i.LabelNEQ != nil {
		predicates = append(predicates, questionresponse.LabelNEQ(*i.LabelNEQ))
	}
	if len(i.LabelIn) > 0 {
		predicates = append(predicates, questionresponse.LabelIn(i.LabelIn...))
	}
	if len(i.LabelNotIn) > 0 {
		predicates = append(predicates, questionresponse.LabelNotIn(i.LabelNotIn...))
	}
	if i.LabelGT != nil {
		predicates = append(predicates, questionresponse.LabelGT(*i.LabelGT))
	}
	if i.LabelGTE != nil {
		predicates = append(predicates, questionresponse.LabelGTE(*i.LabelGTE))
	}
	if i.LabelLT != nil {
		predicates = append(predicates, questionresponse.LabelLT(*i.LabelLT))
	}
	if i.LabelLTE != nil {
		predicates = append(predicates, questionresponse.LabelLTE(*i.LabelLTE))
	}
	if i.LabelContains != nil {
		predicates = append(predicates, questionresponse.LabelContains(*i.LabelContains))
	}
	if i.LabelHasPrefix != nil {
		predicates = append(predicates, questionresponse.LabelHasPrefix(*i.LabelHasPrefix))
	}
	if i.LabelHasSuffix != nil {
		predicates = append(predicates, questionresponse.LabelHasSuffix(*i.LabelHasSuffix))
	}
	if i.LabelEqualFold != nil {
		predicates = append(predicates, questionresponse.LabelEqualFold(*i.LabelEqualFold))
	}
	if i.LabelContainsFold != nil {
		predicates = append(predicates, questionresponse.LabelContainsFold(*i.LabelContainsFold))
	}
	if i.Value != nil {
		predicates = append(predicates, questionresponse.ValueEQ(*i.Value))
	}
	if i.ValueNEQ != nil {
		predicates = append(predicates, questionresponse.ValueNEQ(*i.ValueNEQ))
	}
	if len(i.ValueIn) > 0 {
		predicates = append(predicates, questionresponse.ValueIn(i.ValueIn...))
	}
	if len(i.ValueNotIn) > 0 {
		predicates = append(predicates, questionresponse.ValueNotIn(i.ValueNotIn...))
	}
	if i.ValueGT != nil {
		predicates = append(predicates, questionresponse.ValueGT(*i.ValueGT))
	}
	if i.ValueGTE != nil {
		predicates = append(predicates, questionresponse.ValueGTE(*i.ValueGTE))
	}
	if i.ValueLT != nil {
		predicates = append(predicates, questionresponse.ValueLT(*i.ValueLT))
	}
	if i.ValueLTE != nil {
		predicates = append(predicates, questionresponse.ValueLTE(*i.ValueLTE))
	}
	if i.ValueContains != nil {
		predicates = append(predicates, questionresponse.ValueContains(*i.ValueContains))
	}
	if i.ValueHasPrefix != nil {
		predicates = append(predicates, questionresponse.ValueHasPrefix(*i.ValueHasPrefix))
	}
	if i.ValueHasSuffix != nil {
		predicates = append(predicates, questionresponse.ValueHasSuffix(*i.ValueHasSuffix))
	}
	if i.ValueEqualFold != nil {
		predicates = append(predicates, questionresponse.ValueEqualFold(*i.ValueEqualFold))
	}
	if i.ValueContainsFold != nil {
		predicates = append(predicates, questionresponse.ValueContainsFold(*i.ValueContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, questionresponse.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, questionresponse.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, questionresponse.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, questionresponse.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, questionresponse.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, questionresponse.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, questionresponse.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, questionresponse.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, questionresponse.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, questionresponse.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, questionresponse.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, questionresponse.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, questionresponse.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, questionresponse.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, questionresponse.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, questionresponse.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasQuestion != nil {
		p := questionresponse.HasQuestion()
		if !*i.HasQuestion {
			p = questionresponse.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasQuestionWith) > 0 {
		with := make([]predicate.Question, 0, len(i.HasQuestionWith))
		for _, w := range i.HasQuestionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasQuestionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, questionresponse.HasQuestionWith(with...))
	}
	if i.HasFormInstance != nil {
		p := questionresponse.HasFormInstance()
		if !*i.HasFormInstance {
			p = questionresponse.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormInstanceWith) > 0 {
		with := make([]predicate.FormInstance, 0, len(i.HasFormInstanceWith))
		for _, w := range i.HasFormInstanceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormInstanceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, questionresponse.HasFormInstanceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyQuestionResponseWhereInput
	case 1:
		return predicates[0], nil
	default:
		return questionresponse.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "role" field predicates.
	Role      *user.Role  `json:"role,omitempty"`
	RoleNEQ   *user.Role  `json:"roleNEQ,omitempty"`
	RoleIn    []user.Role `json:"roleIn,omitempty"`
	RoleNotIn []user.Role `json:"roleNotIn,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "form_specs" edge predicates.
	HasFormSpecs     *bool                 `json:"hasFormSpecs,omitempty"`
	HasFormSpecsWith []*FormSpecWhereInput `json:"hasFormSpecsWith,omitempty"`

	// "form_instances" edge predicates.
	HasFormInstances     *bool                     `json:"hasFormInstances,omitempty"`
	HasFormInstancesWith []*FormInstanceWhereInput `json:"hasFormInstancesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, user.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, user.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, user.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, user.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, user.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, user.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, user.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, user.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, user.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, user.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, user.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, user.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, user.NameContainsFold(*i.NameContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, user.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, user.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, user.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, user.RoleNotIn(i.RoleNotIn...))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}

	if i.HasFormSpecs != nil {
		p := user.HasFormSpecs()
		if !*i.HasFormSpecs {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormSpecsWith) > 0 {
		with := make([]predicate.FormSpec, 0, len(i.HasFormSpecsWith))
		for _, w := range i.HasFormSpecsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormSpecsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFormSpecsWith(with...))
	}
	if i.HasFormInstances != nil {
		p := user.HasFormInstances()
		if !*i.HasFormInstances {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFormInstancesWith) > 0 {
		with := make([]predicate.FormInstance, 0, len(i.HasFormInstancesWith))
		for _, w := range i.HasFormInstancesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFormInstancesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasFormInstancesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}
