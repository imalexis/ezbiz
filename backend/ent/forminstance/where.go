// Code generated by ent, DO NOT EDIT.

package forminstance

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"ezbiz.com/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldLTE(FieldID, id))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.FormInstance {
	return predicate.FormInstance(sql.FieldNotIn(FieldStatus, vs...))
}

// HasFormSpec applies the HasEdge predicate on the "form_spec" edge.
func HasFormSpec() predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FormSpecTable, FormSpecColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFormSpecWith applies the HasEdge predicate on the "form_spec" edge with a given conditions (other predicates).
func HasFormSpecWith(preds ...predicate.FormSpec) predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := newFormSpecStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestionResponse applies the HasEdge predicate on the "question_response" edge.
func HasQuestionResponse() predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, QuestionResponseTable, QuestionResponseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionResponseWith applies the HasEdge predicate on the "question_response" edge with a given conditions (other predicates).
func HasQuestionResponseWith(preds ...predicate.QuestionResponse) predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := newQuestionResponseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUsers applies the HasEdge predicate on the "users" edge.
func HasUsers() predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUsersWith applies the HasEdge predicate on the "users" edge with a given conditions (other predicates).
func HasUsersWith(preds ...predicate.User) predicate.FormInstance {
	return predicate.FormInstance(func(s *sql.Selector) {
		step := newUsersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FormInstance) predicate.FormInstance {
	return predicate.FormInstance(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FormInstance) predicate.FormInstance {
	return predicate.FormInstance(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FormInstance) predicate.FormInstance {
	return predicate.FormInstance(sql.NotPredicates(p))
}
