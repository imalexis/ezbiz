// Code generated by ent, DO NOT EDIT.

package forminstance

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the forminstance type in the database.
	Label = "form_instance"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeFormSpec holds the string denoting the form_spec edge name in mutations.
	EdgeFormSpec = "form_spec"
	// EdgeQuestionResponse holds the string denoting the question_response edge name in mutations.
	EdgeQuestionResponse = "question_response"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// Table holds the table name of the forminstance in the database.
	Table = "form_instances"
	// FormSpecTable is the table that holds the form_spec relation/edge.
	FormSpecTable = "form_instances"
	// FormSpecInverseTable is the table name for the FormSpec entity.
	// It exists in this package in order to avoid circular dependency with the "formspec" package.
	FormSpecInverseTable = "form_specs"
	// FormSpecColumn is the table column denoting the form_spec relation/edge.
	FormSpecColumn = "form_spec_form_instances"
	// QuestionResponseTable is the table that holds the question_response relation/edge.
	QuestionResponseTable = "question_responses"
	// QuestionResponseInverseTable is the table name for the QuestionResponse entity.
	// It exists in this package in order to avoid circular dependency with the "questionresponse" package.
	QuestionResponseInverseTable = "question_responses"
	// QuestionResponseColumn is the table column denoting the question_response relation/edge.
	QuestionResponseColumn = "form_instance_question_response"
	// UsersTable is the table that holds the users relation/edge.
	UsersTable = "form_instances"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// UsersColumn is the table column denoting the users relation/edge.
	UsersColumn = "user_form_instances"
)

// Columns holds all SQL columns for forminstance fields.
var Columns = []string{
	FieldID,
	FieldStatus,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "form_instances"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"form_spec_form_instances",
	"user_form_instances",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusSubmiited Status = "submiited"
	StatusPending   Status = "pending"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusSubmiited, StatusPending:
		return nil
	default:
		return fmt.Errorf("forminstance: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the FormInstance queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByFormSpecField orders the results by form_spec field.
func ByFormSpecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormSpecStep(), sql.OrderByField(field, opts...))
	}
}

// ByQuestionResponseCount orders the results by question_response count.
func ByQuestionResponseCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionResponseStep(), opts...)
	}
}

// ByQuestionResponse orders the results by question_response terms.
func ByQuestionResponse(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionResponseStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByUsersField orders the results by users field.
func ByUsersField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), sql.OrderByField(field, opts...))
	}
}
func newFormSpecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormSpecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FormSpecTable, FormSpecColumn),
	)
}
func newQuestionResponseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionResponseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionResponseTable, QuestionResponseColumn),
	)
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UsersTable, UsersColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
