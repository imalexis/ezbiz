// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
	"ezbiz.com/ent/questionresponse"
	"ezbiz.com/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntForm          = "EntForm"
	TypeEntFormQuestion  = "EntFormQuestion"
	TypeFormInstance     = "FormInstance"
	TypeFormSpec         = "FormSpec"
	TypeQuestion         = "Question"
	TypeQuestionGroup    = "QuestionGroup"
	TypeQuestionResponse = "QuestionResponse"
	TypeUser             = "User"
)

// EntFormMutation represents an operation that mutates the EntForm nodes in the graph.
type EntFormMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	enabled          *bool
	created_at       *time.Time
	updated_at       *time.Time
	created_by       *int
	addcreated_by    *int
	clearedFields    map[string]struct{}
	questions        map[int]struct{}
	removedquestions map[int]struct{}
	clearedquestions bool
	done             bool
	oldValue         func(context.Context) (*EntForm, error)
	predicates       []predicate.EntForm
}

var _ ent.Mutation = (*EntFormMutation)(nil)

// entformOption allows management of the mutation configuration using functional options.
type entformOption func(*EntFormMutation)

// newEntFormMutation creates new mutation for the EntForm entity.
func newEntFormMutation(c config, op Op, opts ...entformOption) *EntFormMutation {
	m := &EntFormMutation{
		config:        c,
		op:            op,
		typ:           TypeEntForm,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntFormID sets the ID field of the mutation.
func withEntFormID(id int) entformOption {
	return func(m *EntFormMutation) {
		var (
			err   error
			once  sync.Once
			value *EntForm
		)
		m.oldValue = func(ctx context.Context) (*EntForm, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntForm.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntForm sets the old EntForm of the mutation.
func withEntForm(node *EntForm) entformOption {
	return func(m *EntFormMutation) {
		m.oldValue = func(context.Context) (*EntForm, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntFormMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntFormMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntFormMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntFormMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntForm.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EntFormMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EntFormMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EntFormMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *EntFormMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EntFormMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *EntFormMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[entform.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *EntFormMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[entform.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *EntFormMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, entform.FieldDescription)
}

// SetEnabled sets the "enabled" field.
func (m *EntFormMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *EntFormMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *EntFormMutation) ResetEnabled() {
	m.enabled = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *EntFormMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntFormMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntFormMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntFormMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntFormMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntFormMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EntFormMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EntFormMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the EntForm entity.
// If the EntForm object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *EntFormMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *EntFormMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EntFormMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// AddQuestionIDs adds the "questions" edge to the EntFormQuestion entity by ids.
func (m *EntFormMutation) AddQuestionIDs(ids ...int) {
	if m.questions == nil {
		m.questions = make(map[int]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the EntFormQuestion entity.
func (m *EntFormMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared reports if the "questions" edge to the EntFormQuestion entity was cleared.
func (m *EntFormMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the EntFormQuestion entity by IDs.
func (m *EntFormMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.questions, ids[i])
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the EntFormQuestion entity.
func (m *EntFormMutation) RemovedQuestionsIDs() (ids []int) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *EntFormMutation) QuestionsIDs() (ids []int) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *EntFormMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// Where appends a list predicates to the EntFormMutation builder.
func (m *EntFormMutation) Where(ps ...predicate.EntForm) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntFormMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntFormMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntForm, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntFormMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntFormMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntForm).
func (m *EntFormMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntFormMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, entform.FieldName)
	}
	if m.description != nil {
		fields = append(fields, entform.FieldDescription)
	}
	if m.enabled != nil {
		fields = append(fields, entform.FieldEnabled)
	}
	if m.created_at != nil {
		fields = append(fields, entform.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entform.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, entform.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntFormMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entform.FieldName:
		return m.Name()
	case entform.FieldDescription:
		return m.Description()
	case entform.FieldEnabled:
		return m.Enabled()
	case entform.FieldCreatedAt:
		return m.CreatedAt()
	case entform.FieldUpdatedAt:
		return m.UpdatedAt()
	case entform.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntFormMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entform.FieldName:
		return m.OldName(ctx)
	case entform.FieldDescription:
		return m.OldDescription(ctx)
	case entform.FieldEnabled:
		return m.OldEnabled(ctx)
	case entform.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entform.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entform.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown EntForm field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntFormMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entform.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case entform.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case entform.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case entform.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entform.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entform.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown EntForm field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntFormMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, entform.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntFormMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entform.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntFormMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entform.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown EntForm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntFormMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entform.FieldDescription) {
		fields = append(fields, entform.FieldDescription)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntFormMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntFormMutation) ClearField(name string) error {
	switch name {
	case entform.FieldDescription:
		m.ClearDescription()
		return nil
	}
	return fmt.Errorf("unknown EntForm nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntFormMutation) ResetField(name string) error {
	switch name {
	case entform.FieldName:
		m.ResetName()
		return nil
	case entform.FieldDescription:
		m.ResetDescription()
		return nil
	case entform.FieldEnabled:
		m.ResetEnabled()
		return nil
	case entform.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entform.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entform.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown EntForm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntFormMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.questions != nil {
		edges = append(edges, entform.EdgeQuestions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntFormMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entform.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntFormMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedquestions != nil {
		edges = append(edges, entform.EdgeQuestions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntFormMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entform.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntFormMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquestions {
		edges = append(edges, entform.EdgeQuestions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntFormMutation) EdgeCleared(name string) bool {
	switch name {
	case entform.EdgeQuestions:
		return m.clearedquestions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntFormMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown EntForm unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntFormMutation) ResetEdge(name string) error {
	switch name {
	case entform.EdgeQuestions:
		m.ResetQuestions()
		return nil
	}
	return fmt.Errorf("unknown EntForm edge %s", name)
}

// EntFormQuestionMutation represents an operation that mutates the EntFormQuestion nodes in the graph.
type EntFormQuestionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	title         *string
	label         *string
	_type         *entformquestion.Type
	required      *bool
	extra_data    *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *int
	addcreated_by *int
	clearedFields map[string]struct{}
	form          *int
	clearedform   bool
	done          bool
	oldValue      func(context.Context) (*EntFormQuestion, error)
	predicates    []predicate.EntFormQuestion
}

var _ ent.Mutation = (*EntFormQuestionMutation)(nil)

// entformquestionOption allows management of the mutation configuration using functional options.
type entformquestionOption func(*EntFormQuestionMutation)

// newEntFormQuestionMutation creates new mutation for the EntFormQuestion entity.
func newEntFormQuestionMutation(c config, op Op, opts ...entformquestionOption) *EntFormQuestionMutation {
	m := &EntFormQuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeEntFormQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntFormQuestionID sets the ID field of the mutation.
func withEntFormQuestionID(id int) entformquestionOption {
	return func(m *EntFormQuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *EntFormQuestion
		)
		m.oldValue = func(ctx context.Context) (*EntFormQuestion, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EntFormQuestion.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntFormQuestion sets the old EntFormQuestion of the mutation.
func withEntFormQuestion(node *EntFormQuestion) entformquestionOption {
	return func(m *EntFormQuestionMutation) {
		m.oldValue = func(context.Context) (*EntFormQuestion, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntFormQuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntFormQuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntFormQuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntFormQuestionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EntFormQuestion.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *EntFormQuestionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *EntFormQuestionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *EntFormQuestionMutation) ResetTitle() {
	m.title = nil
}

// SetLabel sets the "label" field.
func (m *EntFormQuestionMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *EntFormQuestionMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *EntFormQuestionMutation) ResetLabel() {
	m.label = nil
}

// SetType sets the "type" field.
func (m *EntFormQuestionMutation) SetType(e entformquestion.Type) {
	m._type = &e
}

// GetType returns the value of the "type" field in the mutation.
func (m *EntFormQuestionMutation) GetType() (r entformquestion.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldType(ctx context.Context) (v entformquestion.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *EntFormQuestionMutation) ResetType() {
	m._type = nil
}

// SetRequired sets the "required" field.
func (m *EntFormQuestionMutation) SetRequired(b bool) {
	m.required = &b
}

// Required returns the value of the "required" field in the mutation.
func (m *EntFormQuestionMutation) Required() (r bool, exists bool) {
	v := m.required
	if v == nil {
		return
	}
	return *v, true
}

// OldRequired returns the old "required" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldRequired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequired: %w", err)
	}
	return oldValue.Required, nil
}

// ResetRequired resets all changes to the "required" field.
func (m *EntFormQuestionMutation) ResetRequired() {
	m.required = nil
}

// SetExtraData sets the "extra_data" field.
func (m *EntFormQuestionMutation) SetExtraData(s string) {
	m.extra_data = &s
}

// ExtraData returns the value of the "extra_data" field in the mutation.
func (m *EntFormQuestionMutation) ExtraData() (r string, exists bool) {
	v := m.extra_data
	if v == nil {
		return
	}
	return *v, true
}

// OldExtraData returns the old "extra_data" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldExtraData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtraData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtraData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtraData: %w", err)
	}
	return oldValue.ExtraData, nil
}

// ClearExtraData clears the value of the "extra_data" field.
func (m *EntFormQuestionMutation) ClearExtraData() {
	m.extra_data = nil
	m.clearedFields[entformquestion.FieldExtraData] = struct{}{}
}

// ExtraDataCleared returns if the "extra_data" field was cleared in this mutation.
func (m *EntFormQuestionMutation) ExtraDataCleared() bool {
	_, ok := m.clearedFields[entformquestion.FieldExtraData]
	return ok
}

// ResetExtraData resets all changes to the "extra_data" field.
func (m *EntFormQuestionMutation) ResetExtraData() {
	m.extra_data = nil
	delete(m.clearedFields, entformquestion.FieldExtraData)
}

// SetCreatedAt sets the "created_at" field.
func (m *EntFormQuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntFormQuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntFormQuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntFormQuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntFormQuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntFormQuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EntFormQuestionMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EntFormQuestionMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the EntFormQuestion entity.
// If the EntFormQuestion object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntFormQuestionMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *EntFormQuestionMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *EntFormQuestionMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EntFormQuestionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// SetFormID sets the "form" edge to the EntForm entity by id.
func (m *EntFormQuestionMutation) SetFormID(id int) {
	m.form = &id
}

// ClearForm clears the "form" edge to the EntForm entity.
func (m *EntFormQuestionMutation) ClearForm() {
	m.clearedform = true
}

// FormCleared reports if the "form" edge to the EntForm entity was cleared.
func (m *EntFormQuestionMutation) FormCleared() bool {
	return m.clearedform
}

// FormID returns the "form" edge ID in the mutation.
func (m *EntFormQuestionMutation) FormID() (id int, exists bool) {
	if m.form != nil {
		return *m.form, true
	}
	return
}

// FormIDs returns the "form" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FormID instead. It exists only for internal usage by the builders.
func (m *EntFormQuestionMutation) FormIDs() (ids []int) {
	if id := m.form; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetForm resets all changes to the "form" edge.
func (m *EntFormQuestionMutation) ResetForm() {
	m.form = nil
	m.clearedform = false
}

// Where appends a list predicates to the EntFormQuestionMutation builder.
func (m *EntFormQuestionMutation) Where(ps ...predicate.EntFormQuestion) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntFormQuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntFormQuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EntFormQuestion, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntFormQuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntFormQuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EntFormQuestion).
func (m *EntFormQuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntFormQuestionMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.title != nil {
		fields = append(fields, entformquestion.FieldTitle)
	}
	if m.label != nil {
		fields = append(fields, entformquestion.FieldLabel)
	}
	if m._type != nil {
		fields = append(fields, entformquestion.FieldType)
	}
	if m.required != nil {
		fields = append(fields, entformquestion.FieldRequired)
	}
	if m.extra_data != nil {
		fields = append(fields, entformquestion.FieldExtraData)
	}
	if m.created_at != nil {
		fields = append(fields, entformquestion.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entformquestion.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, entformquestion.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntFormQuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entformquestion.FieldTitle:
		return m.Title()
	case entformquestion.FieldLabel:
		return m.Label()
	case entformquestion.FieldType:
		return m.GetType()
	case entformquestion.FieldRequired:
		return m.Required()
	case entformquestion.FieldExtraData:
		return m.ExtraData()
	case entformquestion.FieldCreatedAt:
		return m.CreatedAt()
	case entformquestion.FieldUpdatedAt:
		return m.UpdatedAt()
	case entformquestion.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntFormQuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entformquestion.FieldTitle:
		return m.OldTitle(ctx)
	case entformquestion.FieldLabel:
		return m.OldLabel(ctx)
	case entformquestion.FieldType:
		return m.OldType(ctx)
	case entformquestion.FieldRequired:
		return m.OldRequired(ctx)
	case entformquestion.FieldExtraData:
		return m.OldExtraData(ctx)
	case entformquestion.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entformquestion.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entformquestion.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown EntFormQuestion field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntFormQuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entformquestion.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case entformquestion.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case entformquestion.FieldType:
		v, ok := value.(entformquestion.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case entformquestion.FieldRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequired(v)
		return nil
	case entformquestion.FieldExtraData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtraData(v)
		return nil
	case entformquestion.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entformquestion.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entformquestion.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntFormQuestionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, entformquestion.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntFormQuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entformquestion.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntFormQuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entformquestion.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntFormQuestionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entformquestion.FieldExtraData) {
		fields = append(fields, entformquestion.FieldExtraData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntFormQuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntFormQuestionMutation) ClearField(name string) error {
	switch name {
	case entformquestion.FieldExtraData:
		m.ClearExtraData()
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntFormQuestionMutation) ResetField(name string) error {
	switch name {
	case entformquestion.FieldTitle:
		m.ResetTitle()
		return nil
	case entformquestion.FieldLabel:
		m.ResetLabel()
		return nil
	case entformquestion.FieldType:
		m.ResetType()
		return nil
	case entformquestion.FieldRequired:
		m.ResetRequired()
		return nil
	case entformquestion.FieldExtraData:
		m.ResetExtraData()
		return nil
	case entformquestion.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entformquestion.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entformquestion.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntFormQuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.form != nil {
		edges = append(edges, entformquestion.EdgeForm)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntFormQuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entformquestion.EdgeForm:
		if id := m.form; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntFormQuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntFormQuestionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntFormQuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedform {
		edges = append(edges, entformquestion.EdgeForm)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntFormQuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case entformquestion.EdgeForm:
		return m.clearedform
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntFormQuestionMutation) ClearEdge(name string) error {
	switch name {
	case entformquestion.EdgeForm:
		m.ClearForm()
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntFormQuestionMutation) ResetEdge(name string) error {
	switch name {
	case entformquestion.EdgeForm:
		m.ResetForm()
		return nil
	}
	return fmt.Errorf("unknown EntFormQuestion edge %s", name)
}

// FormInstanceMutation represents an operation that mutates the FormInstance nodes in the graph.
type FormInstanceMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	status                   *forminstance.Status
	clearedFields            map[string]struct{}
	form_spec                *int
	clearedform_spec         bool
	question_response        map[int]struct{}
	removedquestion_response map[int]struct{}
	clearedquestion_response bool
	users                    *int
	clearedusers             bool
	done                     bool
	oldValue                 func(context.Context) (*FormInstance, error)
	predicates               []predicate.FormInstance
}

var _ ent.Mutation = (*FormInstanceMutation)(nil)

// forminstanceOption allows management of the mutation configuration using functional options.
type forminstanceOption func(*FormInstanceMutation)

// newFormInstanceMutation creates new mutation for the FormInstance entity.
func newFormInstanceMutation(c config, op Op, opts ...forminstanceOption) *FormInstanceMutation {
	m := &FormInstanceMutation{
		config:        c,
		op:            op,
		typ:           TypeFormInstance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormInstanceID sets the ID field of the mutation.
func withFormInstanceID(id int) forminstanceOption {
	return func(m *FormInstanceMutation) {
		var (
			err   error
			once  sync.Once
			value *FormInstance
		)
		m.oldValue = func(ctx context.Context) (*FormInstance, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormInstance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormInstance sets the old FormInstance of the mutation.
func withFormInstance(node *FormInstance) forminstanceOption {
	return func(m *FormInstanceMutation) {
		m.oldValue = func(context.Context) (*FormInstance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormInstanceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormInstanceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormInstanceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormInstanceMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormInstance.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStatus sets the "status" field.
func (m *FormInstanceMutation) SetStatus(f forminstance.Status) {
	m.status = &f
}

// Status returns the value of the "status" field in the mutation.
func (m *FormInstanceMutation) Status() (r forminstance.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FormInstance entity.
// If the FormInstance object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormInstanceMutation) OldStatus(ctx context.Context) (v forminstance.Status, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FormInstanceMutation) ResetStatus() {
	m.status = nil
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by id.
func (m *FormInstanceMutation) SetFormSpecID(id int) {
	m.form_spec = &id
}

// ClearFormSpec clears the "form_spec" edge to the FormSpec entity.
func (m *FormInstanceMutation) ClearFormSpec() {
	m.clearedform_spec = true
}

// FormSpecCleared reports if the "form_spec" edge to the FormSpec entity was cleared.
func (m *FormInstanceMutation) FormSpecCleared() bool {
	return m.clearedform_spec
}

// FormSpecID returns the "form_spec" edge ID in the mutation.
func (m *FormInstanceMutation) FormSpecID() (id int, exists bool) {
	if m.form_spec != nil {
		return *m.form_spec, true
	}
	return
}

// FormSpecIDs returns the "form_spec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FormSpecID instead. It exists only for internal usage by the builders.
func (m *FormInstanceMutation) FormSpecIDs() (ids []int) {
	if id := m.form_spec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFormSpec resets all changes to the "form_spec" edge.
func (m *FormInstanceMutation) ResetFormSpec() {
	m.form_spec = nil
	m.clearedform_spec = false
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by ids.
func (m *FormInstanceMutation) AddQuestionResponseIDs(ids ...int) {
	if m.question_response == nil {
		m.question_response = make(map[int]struct{})
	}
	for i := range ids {
		m.question_response[ids[i]] = struct{}{}
	}
}

// ClearQuestionResponse clears the "question_response" edge to the QuestionResponse entity.
func (m *FormInstanceMutation) ClearQuestionResponse() {
	m.clearedquestion_response = true
}

// QuestionResponseCleared reports if the "question_response" edge to the QuestionResponse entity was cleared.
func (m *FormInstanceMutation) QuestionResponseCleared() bool {
	return m.clearedquestion_response
}

// RemoveQuestionResponseIDs removes the "question_response" edge to the QuestionResponse entity by IDs.
func (m *FormInstanceMutation) RemoveQuestionResponseIDs(ids ...int) {
	if m.removedquestion_response == nil {
		m.removedquestion_response = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question_response, ids[i])
		m.removedquestion_response[ids[i]] = struct{}{}
	}
}

// RemovedQuestionResponse returns the removed IDs of the "question_response" edge to the QuestionResponse entity.
func (m *FormInstanceMutation) RemovedQuestionResponseIDs() (ids []int) {
	for id := range m.removedquestion_response {
		ids = append(ids, id)
	}
	return
}

// QuestionResponseIDs returns the "question_response" edge IDs in the mutation.
func (m *FormInstanceMutation) QuestionResponseIDs() (ids []int) {
	for id := range m.question_response {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionResponse resets all changes to the "question_response" edge.
func (m *FormInstanceMutation) ResetQuestionResponse() {
	m.question_response = nil
	m.clearedquestion_response = false
	m.removedquestion_response = nil
}

// SetUsersID sets the "users" edge to the User entity by id.
func (m *FormInstanceMutation) SetUsersID(id int) {
	m.users = &id
}

// ClearUsers clears the "users" edge to the User entity.
func (m *FormInstanceMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *FormInstanceMutation) UsersCleared() bool {
	return m.clearedusers
}

// UsersID returns the "users" edge ID in the mutation.
func (m *FormInstanceMutation) UsersID() (id int, exists bool) {
	if m.users != nil {
		return *m.users, true
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UsersID instead. It exists only for internal usage by the builders.
func (m *FormInstanceMutation) UsersIDs() (ids []int) {
	if id := m.users; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *FormInstanceMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
}

// Where appends a list predicates to the FormInstanceMutation builder.
func (m *FormInstanceMutation) Where(ps ...predicate.FormInstance) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormInstanceMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormInstanceMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormInstance, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormInstanceMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormInstanceMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormInstance).
func (m *FormInstanceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormInstanceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.status != nil {
		fields = append(fields, forminstance.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormInstanceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case forminstance.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormInstanceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case forminstance.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown FormInstance field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormInstanceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case forminstance.FieldStatus:
		v, ok := value.(forminstance.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown FormInstance field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormInstanceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormInstanceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormInstanceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FormInstance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormInstanceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormInstanceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormInstanceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FormInstance nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormInstanceMutation) ResetField(name string) error {
	switch name {
	case forminstance.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown FormInstance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormInstanceMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.form_spec != nil {
		edges = append(edges, forminstance.EdgeFormSpec)
	}
	if m.question_response != nil {
		edges = append(edges, forminstance.EdgeQuestionResponse)
	}
	if m.users != nil {
		edges = append(edges, forminstance.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormInstanceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case forminstance.EdgeFormSpec:
		if id := m.form_spec; id != nil {
			return []ent.Value{*id}
		}
	case forminstance.EdgeQuestionResponse:
		ids := make([]ent.Value, 0, len(m.question_response))
		for id := range m.question_response {
			ids = append(ids, id)
		}
		return ids
	case forminstance.EdgeUsers:
		if id := m.users; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormInstanceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedquestion_response != nil {
		edges = append(edges, forminstance.EdgeQuestionResponse)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormInstanceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case forminstance.EdgeQuestionResponse:
		ids := make([]ent.Value, 0, len(m.removedquestion_response))
		for id := range m.removedquestion_response {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormInstanceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedform_spec {
		edges = append(edges, forminstance.EdgeFormSpec)
	}
	if m.clearedquestion_response {
		edges = append(edges, forminstance.EdgeQuestionResponse)
	}
	if m.clearedusers {
		edges = append(edges, forminstance.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormInstanceMutation) EdgeCleared(name string) bool {
	switch name {
	case forminstance.EdgeFormSpec:
		return m.clearedform_spec
	case forminstance.EdgeQuestionResponse:
		return m.clearedquestion_response
	case forminstance.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormInstanceMutation) ClearEdge(name string) error {
	switch name {
	case forminstance.EdgeFormSpec:
		m.ClearFormSpec()
		return nil
	case forminstance.EdgeUsers:
		m.ClearUsers()
		return nil
	}
	return fmt.Errorf("unknown FormInstance unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormInstanceMutation) ResetEdge(name string) error {
	switch name {
	case forminstance.EdgeFormSpec:
		m.ResetFormSpec()
		return nil
	case forminstance.EdgeQuestionResponse:
		m.ResetQuestionResponse()
		return nil
	case forminstance.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown FormInstance edge %s", name)
}

// FormSpecMutation represents an operation that mutates the FormSpec nodes in the graph.
type FormSpecMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	name                   *string
	cover                  *string
	description            *string
	is_template            *bool
	enabled                *bool
	created_at             *time.Time
	updated_at             *time.Time
	created_by             *int
	addcreated_by          *int
	clearedFields          map[string]struct{}
	question_groups        map[int]struct{}
	removedquestion_groups map[int]struct{}
	clearedquestion_groups bool
	form_instances         map[int]struct{}
	removedform_instances  map[int]struct{}
	clearedform_instances  bool
	owner                  *int
	clearedowner           bool
	done                   bool
	oldValue               func(context.Context) (*FormSpec, error)
	predicates             []predicate.FormSpec
}

var _ ent.Mutation = (*FormSpecMutation)(nil)

// formspecOption allows management of the mutation configuration using functional options.
type formspecOption func(*FormSpecMutation)

// newFormSpecMutation creates new mutation for the FormSpec entity.
func newFormSpecMutation(c config, op Op, opts ...formspecOption) *FormSpecMutation {
	m := &FormSpecMutation{
		config:        c,
		op:            op,
		typ:           TypeFormSpec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFormSpecID sets the ID field of the mutation.
func withFormSpecID(id int) formspecOption {
	return func(m *FormSpecMutation) {
		var (
			err   error
			once  sync.Once
			value *FormSpec
		)
		m.oldValue = func(ctx context.Context) (*FormSpec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FormSpec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFormSpec sets the old FormSpec of the mutation.
func withFormSpec(node *FormSpec) formspecOption {
	return func(m *FormSpecMutation) {
		m.oldValue = func(context.Context) (*FormSpec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FormSpecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FormSpecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FormSpecMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FormSpecMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FormSpec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FormSpecMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FormSpecMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FormSpecMutation) ResetName() {
	m.name = nil
}

// SetCover sets the "cover" field.
func (m *FormSpecMutation) SetCover(s string) {
	m.cover = &s
}

// Cover returns the value of the "cover" field in the mutation.
func (m *FormSpecMutation) Cover() (r string, exists bool) {
	v := m.cover
	if v == nil {
		return
	}
	return *v, true
}

// OldCover returns the old "cover" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldCover(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCover is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCover requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCover: %w", err)
	}
	return oldValue.Cover, nil
}

// ClearCover clears the value of the "cover" field.
func (m *FormSpecMutation) ClearCover() {
	m.cover = nil
	m.clearedFields[formspec.FieldCover] = struct{}{}
}

// CoverCleared returns if the "cover" field was cleared in this mutation.
func (m *FormSpecMutation) CoverCleared() bool {
	_, ok := m.clearedFields[formspec.FieldCover]
	return ok
}

// ResetCover resets all changes to the "cover" field.
func (m *FormSpecMutation) ResetCover() {
	m.cover = nil
	delete(m.clearedFields, formspec.FieldCover)
}

// SetDescription sets the "description" field.
func (m *FormSpecMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *FormSpecMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *FormSpecMutation) ResetDescription() {
	m.description = nil
}

// SetIsTemplate sets the "is_template" field.
func (m *FormSpecMutation) SetIsTemplate(b bool) {
	m.is_template = &b
}

// IsTemplate returns the value of the "is_template" field in the mutation.
func (m *FormSpecMutation) IsTemplate() (r bool, exists bool) {
	v := m.is_template
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTemplate returns the old "is_template" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldIsTemplate(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTemplate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTemplate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTemplate: %w", err)
	}
	return oldValue.IsTemplate, nil
}

// ResetIsTemplate resets all changes to the "is_template" field.
func (m *FormSpecMutation) ResetIsTemplate() {
	m.is_template = nil
}

// SetEnabled sets the "enabled" field.
func (m *FormSpecMutation) SetEnabled(b bool) {
	m.enabled = &b
}

// Enabled returns the value of the "enabled" field in the mutation.
func (m *FormSpecMutation) Enabled() (r bool, exists bool) {
	v := m.enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldEnabled returns the old "enabled" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnabled: %w", err)
	}
	return oldValue.Enabled, nil
}

// ResetEnabled resets all changes to the "enabled" field.
func (m *FormSpecMutation) ResetEnabled() {
	m.enabled = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *FormSpecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *FormSpecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *FormSpecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *FormSpecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *FormSpecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *FormSpecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *FormSpecMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *FormSpecMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the FormSpec entity.
// If the FormSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FormSpecMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *FormSpecMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *FormSpecMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *FormSpecMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// AddQuestionGroupIDs adds the "question_groups" edge to the QuestionGroup entity by ids.
func (m *FormSpecMutation) AddQuestionGroupIDs(ids ...int) {
	if m.question_groups == nil {
		m.question_groups = make(map[int]struct{})
	}
	for i := range ids {
		m.question_groups[ids[i]] = struct{}{}
	}
}

// ClearQuestionGroups clears the "question_groups" edge to the QuestionGroup entity.
func (m *FormSpecMutation) ClearQuestionGroups() {
	m.clearedquestion_groups = true
}

// QuestionGroupsCleared reports if the "question_groups" edge to the QuestionGroup entity was cleared.
func (m *FormSpecMutation) QuestionGroupsCleared() bool {
	return m.clearedquestion_groups
}

// RemoveQuestionGroupIDs removes the "question_groups" edge to the QuestionGroup entity by IDs.
func (m *FormSpecMutation) RemoveQuestionGroupIDs(ids ...int) {
	if m.removedquestion_groups == nil {
		m.removedquestion_groups = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question_groups, ids[i])
		m.removedquestion_groups[ids[i]] = struct{}{}
	}
}

// RemovedQuestionGroups returns the removed IDs of the "question_groups" edge to the QuestionGroup entity.
func (m *FormSpecMutation) RemovedQuestionGroupsIDs() (ids []int) {
	for id := range m.removedquestion_groups {
		ids = append(ids, id)
	}
	return
}

// QuestionGroupsIDs returns the "question_groups" edge IDs in the mutation.
func (m *FormSpecMutation) QuestionGroupsIDs() (ids []int) {
	for id := range m.question_groups {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionGroups resets all changes to the "question_groups" edge.
func (m *FormSpecMutation) ResetQuestionGroups() {
	m.question_groups = nil
	m.clearedquestion_groups = false
	m.removedquestion_groups = nil
}

// AddFormInstanceIDs adds the "form_instances" edge to the FormInstance entity by ids.
func (m *FormSpecMutation) AddFormInstanceIDs(ids ...int) {
	if m.form_instances == nil {
		m.form_instances = make(map[int]struct{})
	}
	for i := range ids {
		m.form_instances[ids[i]] = struct{}{}
	}
}

// ClearFormInstances clears the "form_instances" edge to the FormInstance entity.
func (m *FormSpecMutation) ClearFormInstances() {
	m.clearedform_instances = true
}

// FormInstancesCleared reports if the "form_instances" edge to the FormInstance entity was cleared.
func (m *FormSpecMutation) FormInstancesCleared() bool {
	return m.clearedform_instances
}

// RemoveFormInstanceIDs removes the "form_instances" edge to the FormInstance entity by IDs.
func (m *FormSpecMutation) RemoveFormInstanceIDs(ids ...int) {
	if m.removedform_instances == nil {
		m.removedform_instances = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.form_instances, ids[i])
		m.removedform_instances[ids[i]] = struct{}{}
	}
}

// RemovedFormInstances returns the removed IDs of the "form_instances" edge to the FormInstance entity.
func (m *FormSpecMutation) RemovedFormInstancesIDs() (ids []int) {
	for id := range m.removedform_instances {
		ids = append(ids, id)
	}
	return
}

// FormInstancesIDs returns the "form_instances" edge IDs in the mutation.
func (m *FormSpecMutation) FormInstancesIDs() (ids []int) {
	for id := range m.form_instances {
		ids = append(ids, id)
	}
	return
}

// ResetFormInstances resets all changes to the "form_instances" edge.
func (m *FormSpecMutation) ResetFormInstances() {
	m.form_instances = nil
	m.clearedform_instances = false
	m.removedform_instances = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *FormSpecMutation) SetOwnerID(id int) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *FormSpecMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *FormSpecMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *FormSpecMutation) OwnerID() (id int, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *FormSpecMutation) OwnerIDs() (ids []int) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *FormSpecMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the FormSpecMutation builder.
func (m *FormSpecMutation) Where(ps ...predicate.FormSpec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FormSpecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FormSpecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FormSpec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FormSpecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FormSpecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FormSpec).
func (m *FormSpecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FormSpecMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m.name != nil {
		fields = append(fields, formspec.FieldName)
	}
	if m.cover != nil {
		fields = append(fields, formspec.FieldCover)
	}
	if m.description != nil {
		fields = append(fields, formspec.FieldDescription)
	}
	if m.is_template != nil {
		fields = append(fields, formspec.FieldIsTemplate)
	}
	if m.enabled != nil {
		fields = append(fields, formspec.FieldEnabled)
	}
	if m.created_at != nil {
		fields = append(fields, formspec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, formspec.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, formspec.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FormSpecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case formspec.FieldName:
		return m.Name()
	case formspec.FieldCover:
		return m.Cover()
	case formspec.FieldDescription:
		return m.Description()
	case formspec.FieldIsTemplate:
		return m.IsTemplate()
	case formspec.FieldEnabled:
		return m.Enabled()
	case formspec.FieldCreatedAt:
		return m.CreatedAt()
	case formspec.FieldUpdatedAt:
		return m.UpdatedAt()
	case formspec.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FormSpecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case formspec.FieldName:
		return m.OldName(ctx)
	case formspec.FieldCover:
		return m.OldCover(ctx)
	case formspec.FieldDescription:
		return m.OldDescription(ctx)
	case formspec.FieldIsTemplate:
		return m.OldIsTemplate(ctx)
	case formspec.FieldEnabled:
		return m.OldEnabled(ctx)
	case formspec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case formspec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case formspec.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown FormSpec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSpecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case formspec.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case formspec.FieldCover:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCover(v)
		return nil
	case formspec.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case formspec.FieldIsTemplate:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTemplate(v)
		return nil
	case formspec.FieldEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnabled(v)
		return nil
	case formspec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case formspec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case formspec.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown FormSpec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FormSpecMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, formspec.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FormSpecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case formspec.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FormSpecMutation) AddField(name string, value ent.Value) error {
	switch name {
	case formspec.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown FormSpec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FormSpecMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(formspec.FieldCover) {
		fields = append(fields, formspec.FieldCover)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FormSpecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FormSpecMutation) ClearField(name string) error {
	switch name {
	case formspec.FieldCover:
		m.ClearCover()
		return nil
	}
	return fmt.Errorf("unknown FormSpec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FormSpecMutation) ResetField(name string) error {
	switch name {
	case formspec.FieldName:
		m.ResetName()
		return nil
	case formspec.FieldCover:
		m.ResetCover()
		return nil
	case formspec.FieldDescription:
		m.ResetDescription()
		return nil
	case formspec.FieldIsTemplate:
		m.ResetIsTemplate()
		return nil
	case formspec.FieldEnabled:
		m.ResetEnabled()
		return nil
	case formspec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case formspec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case formspec.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown FormSpec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FormSpecMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.question_groups != nil {
		edges = append(edges, formspec.EdgeQuestionGroups)
	}
	if m.form_instances != nil {
		edges = append(edges, formspec.EdgeFormInstances)
	}
	if m.owner != nil {
		edges = append(edges, formspec.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FormSpecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case formspec.EdgeQuestionGroups:
		ids := make([]ent.Value, 0, len(m.question_groups))
		for id := range m.question_groups {
			ids = append(ids, id)
		}
		return ids
	case formspec.EdgeFormInstances:
		ids := make([]ent.Value, 0, len(m.form_instances))
		for id := range m.form_instances {
			ids = append(ids, id)
		}
		return ids
	case formspec.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FormSpecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedquestion_groups != nil {
		edges = append(edges, formspec.EdgeQuestionGroups)
	}
	if m.removedform_instances != nil {
		edges = append(edges, formspec.EdgeFormInstances)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FormSpecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case formspec.EdgeQuestionGroups:
		ids := make([]ent.Value, 0, len(m.removedquestion_groups))
		for id := range m.removedquestion_groups {
			ids = append(ids, id)
		}
		return ids
	case formspec.EdgeFormInstances:
		ids := make([]ent.Value, 0, len(m.removedform_instances))
		for id := range m.removedform_instances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FormSpecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedquestion_groups {
		edges = append(edges, formspec.EdgeQuestionGroups)
	}
	if m.clearedform_instances {
		edges = append(edges, formspec.EdgeFormInstances)
	}
	if m.clearedowner {
		edges = append(edges, formspec.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FormSpecMutation) EdgeCleared(name string) bool {
	switch name {
	case formspec.EdgeQuestionGroups:
		return m.clearedquestion_groups
	case formspec.EdgeFormInstances:
		return m.clearedform_instances
	case formspec.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FormSpecMutation) ClearEdge(name string) error {
	switch name {
	case formspec.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown FormSpec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FormSpecMutation) ResetEdge(name string) error {
	switch name {
	case formspec.EdgeQuestionGroups:
		m.ResetQuestionGroups()
		return nil
	case formspec.EdgeFormInstances:
		m.ResetFormInstances()
		return nil
	case formspec.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown FormSpec edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                         Op
	typ                        string
	id                         *int
	label                      *string
	title                      *string
	_type                      *question.Type
	required                   *bool
	extra_data                 *string
	rule                       *string
	dependencies               *string
	created_at                 *time.Time
	updated_at                 *time.Time
	created_by                 *int
	addcreated_by              *int
	clearedFields              map[string]struct{}
	from_question_group        *int
	clearedfrom_question_group bool
	question_response          map[int]struct{}
	removedquestion_response   map[int]struct{}
	clearedquestion_response   bool
	done                       bool
	oldValue                   func(context.Context) (*Question, error)
	predicates                 []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id int) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Question.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *QuestionMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *QuestionMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *QuestionMutation) ResetLabel() {
	m.label = nil
}

// SetTitle sets the "title" field.
func (m *QuestionMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *QuestionMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *QuestionMutation) ResetTitle() {
	m.title = nil
}

// SetType sets the "type" field.
func (m *QuestionMutation) SetType(q question.Type) {
	m._type = &q
}

// GetType returns the value of the "type" field in the mutation.
func (m *QuestionMutation) GetType() (r question.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldType(ctx context.Context) (v question.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *QuestionMutation) ResetType() {
	m._type = nil
}

// SetRequired sets the "required" field.
func (m *QuestionMutation) SetRequired(b bool) {
	m.required = &b
}

// Required returns the value of the "required" field in the mutation.
func (m *QuestionMutation) Required() (r bool, exists bool) {
	v := m.required
	if v == nil {
		return
	}
	return *v, true
}

// OldRequired returns the old "required" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldRequired(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequired is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequired requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequired: %w", err)
	}
	return oldValue.Required, nil
}

// ResetRequired resets all changes to the "required" field.
func (m *QuestionMutation) ResetRequired() {
	m.required = nil
}

// SetExtraData sets the "extra_data" field.
func (m *QuestionMutation) SetExtraData(s string) {
	m.extra_data = &s
}

// ExtraData returns the value of the "extra_data" field in the mutation.
func (m *QuestionMutation) ExtraData() (r string, exists bool) {
	v := m.extra_data
	if v == nil {
		return
	}
	return *v, true
}

// OldExtraData returns the old "extra_data" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldExtraData(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtraData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtraData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtraData: %w", err)
	}
	return oldValue.ExtraData, nil
}

// ResetExtraData resets all changes to the "extra_data" field.
func (m *QuestionMutation) ResetExtraData() {
	m.extra_data = nil
}

// SetRule sets the "rule" field.
func (m *QuestionMutation) SetRule(s string) {
	m.rule = &s
}

// Rule returns the value of the "rule" field in the mutation.
func (m *QuestionMutation) Rule() (r string, exists bool) {
	v := m.rule
	if v == nil {
		return
	}
	return *v, true
}

// OldRule returns the old "rule" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldRule(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRule is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRule requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRule: %w", err)
	}
	return oldValue.Rule, nil
}

// ResetRule resets all changes to the "rule" field.
func (m *QuestionMutation) ResetRule() {
	m.rule = nil
}

// SetDependencies sets the "dependencies" field.
func (m *QuestionMutation) SetDependencies(s string) {
	m.dependencies = &s
}

// Dependencies returns the value of the "dependencies" field in the mutation.
func (m *QuestionMutation) Dependencies() (r string, exists bool) {
	v := m.dependencies
	if v == nil {
		return
	}
	return *v, true
}

// OldDependencies returns the old "dependencies" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldDependencies(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDependencies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDependencies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDependencies: %w", err)
	}
	return oldValue.Dependencies, nil
}

// ResetDependencies resets all changes to the "dependencies" field.
func (m *QuestionMutation) ResetDependencies() {
	m.dependencies = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *QuestionMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *QuestionMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Question entity.
// If the Question object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *QuestionMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *QuestionMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *QuestionMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// SetFromQuestionGroupID sets the "from_question_group" edge to the QuestionGroup entity by id.
func (m *QuestionMutation) SetFromQuestionGroupID(id int) {
	m.from_question_group = &id
}

// ClearFromQuestionGroup clears the "from_question_group" edge to the QuestionGroup entity.
func (m *QuestionMutation) ClearFromQuestionGroup() {
	m.clearedfrom_question_group = true
}

// FromQuestionGroupCleared reports if the "from_question_group" edge to the QuestionGroup entity was cleared.
func (m *QuestionMutation) FromQuestionGroupCleared() bool {
	return m.clearedfrom_question_group
}

// FromQuestionGroupID returns the "from_question_group" edge ID in the mutation.
func (m *QuestionMutation) FromQuestionGroupID() (id int, exists bool) {
	if m.from_question_group != nil {
		return *m.from_question_group, true
	}
	return
}

// FromQuestionGroupIDs returns the "from_question_group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FromQuestionGroupID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) FromQuestionGroupIDs() (ids []int) {
	if id := m.from_question_group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFromQuestionGroup resets all changes to the "from_question_group" edge.
func (m *QuestionMutation) ResetFromQuestionGroup() {
	m.from_question_group = nil
	m.clearedfrom_question_group = false
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by ids.
func (m *QuestionMutation) AddQuestionResponseIDs(ids ...int) {
	if m.question_response == nil {
		m.question_response = make(map[int]struct{})
	}
	for i := range ids {
		m.question_response[ids[i]] = struct{}{}
	}
}

// ClearQuestionResponse clears the "question_response" edge to the QuestionResponse entity.
func (m *QuestionMutation) ClearQuestionResponse() {
	m.clearedquestion_response = true
}

// QuestionResponseCleared reports if the "question_response" edge to the QuestionResponse entity was cleared.
func (m *QuestionMutation) QuestionResponseCleared() bool {
	return m.clearedquestion_response
}

// RemoveQuestionResponseIDs removes the "question_response" edge to the QuestionResponse entity by IDs.
func (m *QuestionMutation) RemoveQuestionResponseIDs(ids ...int) {
	if m.removedquestion_response == nil {
		m.removedquestion_response = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question_response, ids[i])
		m.removedquestion_response[ids[i]] = struct{}{}
	}
}

// RemovedQuestionResponse returns the removed IDs of the "question_response" edge to the QuestionResponse entity.
func (m *QuestionMutation) RemovedQuestionResponseIDs() (ids []int) {
	for id := range m.removedquestion_response {
		ids = append(ids, id)
	}
	return
}

// QuestionResponseIDs returns the "question_response" edge IDs in the mutation.
func (m *QuestionMutation) QuestionResponseIDs() (ids []int) {
	for id := range m.question_response {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionResponse resets all changes to the "question_response" edge.
func (m *QuestionMutation) ResetQuestionResponse() {
	m.question_response = nil
	m.clearedquestion_response = false
	m.removedquestion_response = nil
}

// Where appends a list predicates to the QuestionMutation builder.
func (m *QuestionMutation) Where(ps ...predicate.Question) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Question, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.label != nil {
		fields = append(fields, question.FieldLabel)
	}
	if m.title != nil {
		fields = append(fields, question.FieldTitle)
	}
	if m._type != nil {
		fields = append(fields, question.FieldType)
	}
	if m.required != nil {
		fields = append(fields, question.FieldRequired)
	}
	if m.extra_data != nil {
		fields = append(fields, question.FieldExtraData)
	}
	if m.rule != nil {
		fields = append(fields, question.FieldRule)
	}
	if m.dependencies != nil {
		fields = append(fields, question.FieldDependencies)
	}
	if m.created_at != nil {
		fields = append(fields, question.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, question.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, question.FieldCreatedBy)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case question.FieldLabel:
		return m.Label()
	case question.FieldTitle:
		return m.Title()
	case question.FieldType:
		return m.GetType()
	case question.FieldRequired:
		return m.Required()
	case question.FieldExtraData:
		return m.ExtraData()
	case question.FieldRule:
		return m.Rule()
	case question.FieldDependencies:
		return m.Dependencies()
	case question.FieldCreatedAt:
		return m.CreatedAt()
	case question.FieldUpdatedAt:
		return m.UpdatedAt()
	case question.FieldCreatedBy:
		return m.CreatedBy()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case question.FieldLabel:
		return m.OldLabel(ctx)
	case question.FieldTitle:
		return m.OldTitle(ctx)
	case question.FieldType:
		return m.OldType(ctx)
	case question.FieldRequired:
		return m.OldRequired(ctx)
	case question.FieldExtraData:
		return m.OldExtraData(ctx)
	case question.FieldRule:
		return m.OldRule(ctx)
	case question.FieldDependencies:
		return m.OldDependencies(ctx)
	case question.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case question.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case question.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	}
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case question.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case question.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case question.FieldType:
		v, ok := value.(question.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case question.FieldRequired:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequired(v)
		return nil
	case question.FieldExtraData:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtraData(v)
		return nil
	case question.FieldRule:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRule(v)
		return nil
	case question.FieldDependencies:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDependencies(v)
		return nil
	case question.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case question.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case question.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, question.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case question.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case question.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	switch name {
	case question.FieldLabel:
		m.ResetLabel()
		return nil
	case question.FieldTitle:
		m.ResetTitle()
		return nil
	case question.FieldType:
		m.ResetType()
		return nil
	case question.FieldRequired:
		m.ResetRequired()
		return nil
	case question.FieldExtraData:
		m.ResetExtraData()
		return nil
	case question.FieldRule:
		m.ResetRule()
		return nil
	case question.FieldDependencies:
		m.ResetDependencies()
		return nil
	case question.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case question.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case question.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.from_question_group != nil {
		edges = append(edges, question.EdgeFromQuestionGroup)
	}
	if m.question_response != nil {
		edges = append(edges, question.EdgeQuestionResponse)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeFromQuestionGroup:
		if id := m.from_question_group; id != nil {
			return []ent.Value{*id}
		}
	case question.EdgeQuestionResponse:
		ids := make([]ent.Value, 0, len(m.question_response))
		for id := range m.question_response {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedquestion_response != nil {
		edges = append(edges, question.EdgeQuestionResponse)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeQuestionResponse:
		ids := make([]ent.Value, 0, len(m.removedquestion_response))
		for id := range m.removedquestion_response {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfrom_question_group {
		edges = append(edges, question.EdgeFromQuestionGroup)
	}
	if m.clearedquestion_response {
		edges = append(edges, question.EdgeQuestionResponse)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeFromQuestionGroup:
		return m.clearedfrom_question_group
	case question.EdgeQuestionResponse:
		return m.clearedquestion_response
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeFromQuestionGroup:
		m.ClearFromQuestionGroup()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeFromQuestionGroup:
		m.ResetFromQuestionGroup()
		return nil
	case question.EdgeQuestionResponse:
		m.ResetQuestionResponse()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionGroupMutation represents an operation that mutates the QuestionGroup nodes in the graph.
type QuestionGroupMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	created_by       *int
	addcreated_by    *int
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	question         map[int]struct{}
	removedquestion  map[int]struct{}
	clearedquestion  bool
	form_spec        *int
	clearedform_spec bool
	done             bool
	oldValue         func(context.Context) (*QuestionGroup, error)
	predicates       []predicate.QuestionGroup
}

var _ ent.Mutation = (*QuestionGroupMutation)(nil)

// questiongroupOption allows management of the mutation configuration using functional options.
type questiongroupOption func(*QuestionGroupMutation)

// newQuestionGroupMutation creates new mutation for the QuestionGroup entity.
func newQuestionGroupMutation(c config, op Op, opts ...questiongroupOption) *QuestionGroupMutation {
	m := &QuestionGroupMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionGroupID sets the ID field of the mutation.
func withQuestionGroupID(id int) questiongroupOption {
	return func(m *QuestionGroupMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionGroup
		)
		m.oldValue = func(ctx context.Context) (*QuestionGroup, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionGroup.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionGroup sets the old QuestionGroup of the mutation.
func withQuestionGroup(node *QuestionGroup) questiongroupOption {
	return func(m *QuestionGroupMutation) {
		m.oldValue = func(context.Context) (*QuestionGroup, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionGroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionGroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionGroupMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionGroupMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QuestionGroup.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *QuestionGroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuestionGroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the QuestionGroup entity.
// If the QuestionGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionGroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuestionGroupMutation) ResetName() {
	m.name = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *QuestionGroupMutation) SetCreatedBy(i int) {
	m.created_by = &i
	m.addcreated_by = nil
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *QuestionGroupMutation) CreatedBy() (r int, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the QuestionGroup entity.
// If the QuestionGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionGroupMutation) OldCreatedBy(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// AddCreatedBy adds i to the "created_by" field.
func (m *QuestionGroupMutation) AddCreatedBy(i int) {
	if m.addcreated_by != nil {
		*m.addcreated_by += i
	} else {
		m.addcreated_by = &i
	}
}

// AddedCreatedBy returns the value that was added to the "created_by" field in this mutation.
func (m *QuestionGroupMutation) AddedCreatedBy() (r int, exists bool) {
	v := m.addcreated_by
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *QuestionGroupMutation) ResetCreatedBy() {
	m.created_by = nil
	m.addcreated_by = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionGroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionGroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QuestionGroup entity.
// If the QuestionGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionGroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionGroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionGroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionGroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the QuestionGroup entity.
// If the QuestionGroup object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionGroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionGroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddQuestionIDs adds the "question" edge to the Question entity by ids.
func (m *QuestionGroupMutation) AddQuestionIDs(ids ...int) {
	if m.question == nil {
		m.question = make(map[int]struct{})
	}
	for i := range ids {
		m.question[ids[i]] = struct{}{}
	}
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *QuestionGroupMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *QuestionGroupMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// RemoveQuestionIDs removes the "question" edge to the Question entity by IDs.
func (m *QuestionGroupMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestion == nil {
		m.removedquestion = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.question, ids[i])
		m.removedquestion[ids[i]] = struct{}{}
	}
}

// RemovedQuestion returns the removed IDs of the "question" edge to the Question entity.
func (m *QuestionGroupMutation) RemovedQuestionIDs() (ids []int) {
	for id := range m.removedquestion {
		ids = append(ids, id)
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
func (m *QuestionGroupMutation) QuestionIDs() (ids []int) {
	for id := range m.question {
		ids = append(ids, id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *QuestionGroupMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
	m.removedquestion = nil
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by id.
func (m *QuestionGroupMutation) SetFormSpecID(id int) {
	m.form_spec = &id
}

// ClearFormSpec clears the "form_spec" edge to the FormSpec entity.
func (m *QuestionGroupMutation) ClearFormSpec() {
	m.clearedform_spec = true
}

// FormSpecCleared reports if the "form_spec" edge to the FormSpec entity was cleared.
func (m *QuestionGroupMutation) FormSpecCleared() bool {
	return m.clearedform_spec
}

// FormSpecID returns the "form_spec" edge ID in the mutation.
func (m *QuestionGroupMutation) FormSpecID() (id int, exists bool) {
	if m.form_spec != nil {
		return *m.form_spec, true
	}
	return
}

// FormSpecIDs returns the "form_spec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FormSpecID instead. It exists only for internal usage by the builders.
func (m *QuestionGroupMutation) FormSpecIDs() (ids []int) {
	if id := m.form_spec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFormSpec resets all changes to the "form_spec" edge.
func (m *QuestionGroupMutation) ResetFormSpec() {
	m.form_spec = nil
	m.clearedform_spec = false
}

// Where appends a list predicates to the QuestionGroupMutation builder.
func (m *QuestionGroupMutation) Where(ps ...predicate.QuestionGroup) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionGroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionGroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QuestionGroup, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionGroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionGroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QuestionGroup).
func (m *QuestionGroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionGroupMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, questiongroup.FieldName)
	}
	if m.created_by != nil {
		fields = append(fields, questiongroup.FieldCreatedBy)
	}
	if m.created_at != nil {
		fields = append(fields, questiongroup.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, questiongroup.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionGroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questiongroup.FieldName:
		return m.Name()
	case questiongroup.FieldCreatedBy:
		return m.CreatedBy()
	case questiongroup.FieldCreatedAt:
		return m.CreatedAt()
	case questiongroup.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionGroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questiongroup.FieldName:
		return m.OldName(ctx)
	case questiongroup.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case questiongroup.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case questiongroup.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionGroup field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionGroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questiongroup.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case questiongroup.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case questiongroup.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case questiongroup.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionGroup field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionGroupMutation) AddedFields() []string {
	var fields []string
	if m.addcreated_by != nil {
		fields = append(fields, questiongroup.FieldCreatedBy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionGroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case questiongroup.FieldCreatedBy:
		return m.AddedCreatedBy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionGroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case questiongroup.FieldCreatedBy:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreatedBy(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionGroup numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionGroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionGroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionGroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuestionGroup nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionGroupMutation) ResetField(name string) error {
	switch name {
	case questiongroup.FieldName:
		m.ResetName()
		return nil
	case questiongroup.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case questiongroup.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case questiongroup.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown QuestionGroup field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionGroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.question != nil {
		edges = append(edges, questiongroup.EdgeQuestion)
	}
	if m.form_spec != nil {
		edges = append(edges, questiongroup.EdgeFormSpec)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionGroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questiongroup.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.question))
		for id := range m.question {
			ids = append(ids, id)
		}
		return ids
	case questiongroup.EdgeFormSpec:
		if id := m.form_spec; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionGroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedquestion != nil {
		edges = append(edges, questiongroup.EdgeQuestion)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionGroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case questiongroup.EdgeQuestion:
		ids := make([]ent.Value, 0, len(m.removedquestion))
		for id := range m.removedquestion {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionGroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquestion {
		edges = append(edges, questiongroup.EdgeQuestion)
	}
	if m.clearedform_spec {
		edges = append(edges, questiongroup.EdgeFormSpec)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionGroupMutation) EdgeCleared(name string) bool {
	switch name {
	case questiongroup.EdgeQuestion:
		return m.clearedquestion
	case questiongroup.EdgeFormSpec:
		return m.clearedform_spec
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionGroupMutation) ClearEdge(name string) error {
	switch name {
	case questiongroup.EdgeFormSpec:
		m.ClearFormSpec()
		return nil
	}
	return fmt.Errorf("unknown QuestionGroup unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionGroupMutation) ResetEdge(name string) error {
	switch name {
	case questiongroup.EdgeQuestion:
		m.ResetQuestion()
		return nil
	case questiongroup.EdgeFormSpec:
		m.ResetFormSpec()
		return nil
	}
	return fmt.Errorf("unknown QuestionGroup edge %s", name)
}

// QuestionResponseMutation represents an operation that mutates the QuestionResponse nodes in the graph.
type QuestionResponseMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	label                *string
	value                *string
	created_at           *time.Time
	updated_at           *time.Time
	clearedFields        map[string]struct{}
	question             *int
	clearedquestion      bool
	form_instance        *int
	clearedform_instance bool
	done                 bool
	oldValue             func(context.Context) (*QuestionResponse, error)
	predicates           []predicate.QuestionResponse
}

var _ ent.Mutation = (*QuestionResponseMutation)(nil)

// questionresponseOption allows management of the mutation configuration using functional options.
type questionresponseOption func(*QuestionResponseMutation)

// newQuestionResponseMutation creates new mutation for the QuestionResponse entity.
func newQuestionResponseMutation(c config, op Op, opts ...questionresponseOption) *QuestionResponseMutation {
	m := &QuestionResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionResponseID sets the ID field of the mutation.
func withQuestionResponseID(id int) questionresponseOption {
	return func(m *QuestionResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionResponse
		)
		m.oldValue = func(ctx context.Context) (*QuestionResponse, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionResponse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionResponse sets the old QuestionResponse of the mutation.
func withQuestionResponse(node *QuestionResponse) questionresponseOption {
	return func(m *QuestionResponseMutation) {
		m.oldValue = func(context.Context) (*QuestionResponse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QuestionResponseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QuestionResponseMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().QuestionResponse.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLabel sets the "label" field.
func (m *QuestionResponseMutation) SetLabel(s string) {
	m.label = &s
}

// Label returns the value of the "label" field in the mutation.
func (m *QuestionResponseMutation) Label() (r string, exists bool) {
	v := m.label
	if v == nil {
		return
	}
	return *v, true
}

// OldLabel returns the old "label" field's value of the QuestionResponse entity.
// If the QuestionResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionResponseMutation) OldLabel(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLabel is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLabel requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLabel: %w", err)
	}
	return oldValue.Label, nil
}

// ResetLabel resets all changes to the "label" field.
func (m *QuestionResponseMutation) ResetLabel() {
	m.label = nil
}

// SetValue sets the "value" field.
func (m *QuestionResponseMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value of the "value" field in the mutation.
func (m *QuestionResponseMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// OldValue returns the old "value" field's value of the QuestionResponse entity.
// If the QuestionResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionResponseMutation) OldValue(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldValue is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldValue requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldValue: %w", err)
	}
	return oldValue.Value, nil
}

// ResetValue resets all changes to the "value" field.
func (m *QuestionResponseMutation) ResetValue() {
	m.value = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QuestionResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QuestionResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the QuestionResponse entity.
// If the QuestionResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QuestionResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QuestionResponseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QuestionResponseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the QuestionResponse entity.
// If the QuestionResponse object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionResponseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QuestionResponseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *QuestionResponseMutation) SetQuestionID(id int) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *QuestionResponseMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared reports if the "question" edge to the Question entity was cleared.
func (m *QuestionResponseMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *QuestionResponseMutation) QuestionID() (id int, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *QuestionResponseMutation) QuestionIDs() (ids []int) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *QuestionResponseMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// SetFormInstanceID sets the "form_instance" edge to the FormInstance entity by id.
func (m *QuestionResponseMutation) SetFormInstanceID(id int) {
	m.form_instance = &id
}

// ClearFormInstance clears the "form_instance" edge to the FormInstance entity.
func (m *QuestionResponseMutation) ClearFormInstance() {
	m.clearedform_instance = true
}

// FormInstanceCleared reports if the "form_instance" edge to the FormInstance entity was cleared.
func (m *QuestionResponseMutation) FormInstanceCleared() bool {
	return m.clearedform_instance
}

// FormInstanceID returns the "form_instance" edge ID in the mutation.
func (m *QuestionResponseMutation) FormInstanceID() (id int, exists bool) {
	if m.form_instance != nil {
		return *m.form_instance, true
	}
	return
}

// FormInstanceIDs returns the "form_instance" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// FormInstanceID instead. It exists only for internal usage by the builders.
func (m *QuestionResponseMutation) FormInstanceIDs() (ids []int) {
	if id := m.form_instance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetFormInstance resets all changes to the "form_instance" edge.
func (m *QuestionResponseMutation) ResetFormInstance() {
	m.form_instance = nil
	m.clearedform_instance = false
}

// Where appends a list predicates to the QuestionResponseMutation builder.
func (m *QuestionResponseMutation) Where(ps ...predicate.QuestionResponse) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the QuestionResponseMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *QuestionResponseMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.QuestionResponse, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *QuestionResponseMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *QuestionResponseMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (QuestionResponse).
func (m *QuestionResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionResponseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.label != nil {
		fields = append(fields, questionresponse.FieldLabel)
	}
	if m.value != nil {
		fields = append(fields, questionresponse.FieldValue)
	}
	if m.created_at != nil {
		fields = append(fields, questionresponse.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, questionresponse.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionresponse.FieldLabel:
		return m.Label()
	case questionresponse.FieldValue:
		return m.Value()
	case questionresponse.FieldCreatedAt:
		return m.CreatedAt()
	case questionresponse.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionresponse.FieldLabel:
		return m.OldLabel(ctx)
	case questionresponse.FieldValue:
		return m.OldValue(ctx)
	case questionresponse.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case questionresponse.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionResponse field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionresponse.FieldLabel:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLabel(v)
		return nil
	case questionresponse.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	case questionresponse.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case questionresponse.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionResponse field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QuestionResponse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuestionResponse nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionResponseMutation) ResetField(name string) error {
	switch name {
	case questionresponse.FieldLabel:
		m.ResetLabel()
		return nil
	case questionresponse.FieldValue:
		m.ResetValue()
		return nil
	case questionresponse.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case questionresponse.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown QuestionResponse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.question != nil {
		edges = append(edges, questionresponse.EdgeQuestion)
	}
	if m.form_instance != nil {
		edges = append(edges, questionresponse.EdgeFormInstance)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questionresponse.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	case questionresponse.EdgeFormInstance:
		if id := m.form_instance; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionResponseMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquestion {
		edges = append(edges, questionresponse.EdgeQuestion)
	}
	if m.clearedform_instance {
		edges = append(edges, questionresponse.EdgeFormInstance)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case questionresponse.EdgeQuestion:
		return m.clearedquestion
	case questionresponse.EdgeFormInstance:
		return m.clearedform_instance
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionResponseMutation) ClearEdge(name string) error {
	switch name {
	case questionresponse.EdgeQuestion:
		m.ClearQuestion()
		return nil
	case questionresponse.EdgeFormInstance:
		m.ClearFormInstance()
		return nil
	}
	return fmt.Errorf("unknown QuestionResponse unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionResponseMutation) ResetEdge(name string) error {
	switch name {
	case questionresponse.EdgeQuestion:
		m.ResetQuestion()
		return nil
	case questionresponse.EdgeFormInstance:
		m.ResetFormInstance()
		return nil
	}
	return fmt.Errorf("unknown QuestionResponse edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	name                  *string
	email                 *string
	password              *string
	role                  *user.Role
	created_at            *time.Time
	updated_at            *time.Time
	clearedFields         map[string]struct{}
	form_specs            map[int]struct{}
	removedform_specs     map[int]struct{}
	clearedform_specs     bool
	form_instances        map[int]struct{}
	removedform_instances map[int]struct{}
	clearedform_instances bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u user.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r user.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v user.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddFormSpecIDs adds the "form_specs" edge to the FormSpec entity by ids.
func (m *UserMutation) AddFormSpecIDs(ids ...int) {
	if m.form_specs == nil {
		m.form_specs = make(map[int]struct{})
	}
	for i := range ids {
		m.form_specs[ids[i]] = struct{}{}
	}
}

// ClearFormSpecs clears the "form_specs" edge to the FormSpec entity.
func (m *UserMutation) ClearFormSpecs() {
	m.clearedform_specs = true
}

// FormSpecsCleared reports if the "form_specs" edge to the FormSpec entity was cleared.
func (m *UserMutation) FormSpecsCleared() bool {
	return m.clearedform_specs
}

// RemoveFormSpecIDs removes the "form_specs" edge to the FormSpec entity by IDs.
func (m *UserMutation) RemoveFormSpecIDs(ids ...int) {
	if m.removedform_specs == nil {
		m.removedform_specs = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.form_specs, ids[i])
		m.removedform_specs[ids[i]] = struct{}{}
	}
}

// RemovedFormSpecs returns the removed IDs of the "form_specs" edge to the FormSpec entity.
func (m *UserMutation) RemovedFormSpecsIDs() (ids []int) {
	for id := range m.removedform_specs {
		ids = append(ids, id)
	}
	return
}

// FormSpecsIDs returns the "form_specs" edge IDs in the mutation.
func (m *UserMutation) FormSpecsIDs() (ids []int) {
	for id := range m.form_specs {
		ids = append(ids, id)
	}
	return
}

// ResetFormSpecs resets all changes to the "form_specs" edge.
func (m *UserMutation) ResetFormSpecs() {
	m.form_specs = nil
	m.clearedform_specs = false
	m.removedform_specs = nil
}

// AddFormInstanceIDs adds the "form_instances" edge to the FormInstance entity by ids.
func (m *UserMutation) AddFormInstanceIDs(ids ...int) {
	if m.form_instances == nil {
		m.form_instances = make(map[int]struct{})
	}
	for i := range ids {
		m.form_instances[ids[i]] = struct{}{}
	}
}

// ClearFormInstances clears the "form_instances" edge to the FormInstance entity.
func (m *UserMutation) ClearFormInstances() {
	m.clearedform_instances = true
}

// FormInstancesCleared reports if the "form_instances" edge to the FormInstance entity was cleared.
func (m *UserMutation) FormInstancesCleared() bool {
	return m.clearedform_instances
}

// RemoveFormInstanceIDs removes the "form_instances" edge to the FormInstance entity by IDs.
func (m *UserMutation) RemoveFormInstanceIDs(ids ...int) {
	if m.removedform_instances == nil {
		m.removedform_instances = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.form_instances, ids[i])
		m.removedform_instances[ids[i]] = struct{}{}
	}
}

// RemovedFormInstances returns the removed IDs of the "form_instances" edge to the FormInstance entity.
func (m *UserMutation) RemovedFormInstancesIDs() (ids []int) {
	for id := range m.removedform_instances {
		ids = append(ids, id)
	}
	return
}

// FormInstancesIDs returns the "form_instances" edge IDs in the mutation.
func (m *UserMutation) FormInstancesIDs() (ids []int) {
	for id := range m.form_instances {
		ids = append(ids, id)
	}
	return
}

// ResetFormInstances resets all changes to the "form_instances" edge.
func (m *UserMutation) ResetFormInstances() {
	m.form_instances = nil
	m.clearedform_instances = false
	m.removedform_instances = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(user.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.form_specs != nil {
		edges = append(edges, user.EdgeFormSpecs)
	}
	if m.form_instances != nil {
		edges = append(edges, user.EdgeFormInstances)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormSpecs:
		ids := make([]ent.Value, 0, len(m.form_specs))
		for id := range m.form_specs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFormInstances:
		ids := make([]ent.Value, 0, len(m.form_instances))
		for id := range m.form_instances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedform_specs != nil {
		edges = append(edges, user.EdgeFormSpecs)
	}
	if m.removedform_instances != nil {
		edges = append(edges, user.EdgeFormInstances)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeFormSpecs:
		ids := make([]ent.Value, 0, len(m.removedform_specs))
		for id := range m.removedform_specs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeFormInstances:
		ids := make([]ent.Value, 0, len(m.removedform_instances))
		for id := range m.removedform_instances {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedform_specs {
		edges = append(edges, user.EdgeFormSpecs)
	}
	if m.clearedform_instances {
		edges = append(edges, user.EdgeFormInstances)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeFormSpecs:
		return m.clearedform_specs
	case user.EdgeFormInstances:
		return m.clearedform_instances
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeFormSpecs:
		m.ResetFormSpecs()
		return nil
	case user.EdgeFormInstances:
		m.ResetFormInstances()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
