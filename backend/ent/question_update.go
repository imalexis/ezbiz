// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
	"ezbiz.com/ent/questionresponse"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetLabel sets the "label" field.
func (qu *QuestionUpdate) SetLabel(s string) *QuestionUpdate {
	qu.mutation.SetLabel(s)
	return qu
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableLabel(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetLabel(*s)
	}
	return qu
}

// SetTitle sets the "title" field.
func (qu *QuestionUpdate) SetTitle(s string) *QuestionUpdate {
	qu.mutation.SetTitle(s)
	return qu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableTitle(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetTitle(*s)
	}
	return qu
}

// SetType sets the "type" field.
func (qu *QuestionUpdate) SetType(q question.Type) *QuestionUpdate {
	qu.mutation.SetType(q)
	return qu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableType(q *question.Type) *QuestionUpdate {
	if q != nil {
		qu.SetType(*q)
	}
	return qu
}

// SetRequired sets the "required" field.
func (qu *QuestionUpdate) SetRequired(b bool) *QuestionUpdate {
	qu.mutation.SetRequired(b)
	return qu
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableRequired(b *bool) *QuestionUpdate {
	if b != nil {
		qu.SetRequired(*b)
	}
	return qu
}

// SetExtraData sets the "extra_data" field.
func (qu *QuestionUpdate) SetExtraData(s string) *QuestionUpdate {
	qu.mutation.SetExtraData(s)
	return qu
}

// SetNillableExtraData sets the "extra_data" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableExtraData(s *string) *QuestionUpdate {
	if s != nil {
		qu.SetExtraData(*s)
	}
	return qu
}

// SetCreatedAt sets the "created_at" field.
func (qu *QuestionUpdate) SetCreatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetCreatedAt(*t)
	}
	return qu
}

// SetUpdatedAt sets the "updated_at" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableUpdatedAt(t *time.Time) *QuestionUpdate {
	if t != nil {
		qu.SetUpdatedAt(*t)
	}
	return qu
}

// SetCreatedBy sets the "created_by" field.
func (qu *QuestionUpdate) SetCreatedBy(i int) *QuestionUpdate {
	qu.mutation.ResetCreatedBy()
	qu.mutation.SetCreatedBy(i)
	return qu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCreatedBy(i *int) *QuestionUpdate {
	if i != nil {
		qu.SetCreatedBy(*i)
	}
	return qu
}

// AddCreatedBy adds i to the "created_by" field.
func (qu *QuestionUpdate) AddCreatedBy(i int) *QuestionUpdate {
	qu.mutation.AddCreatedBy(i)
	return qu
}

// SetFromQuestionGroupID sets the "from_question_group" edge to the QuestionGroup entity by ID.
func (qu *QuestionUpdate) SetFromQuestionGroupID(id int) *QuestionUpdate {
	qu.mutation.SetFromQuestionGroupID(id)
	return qu
}

// SetNillableFromQuestionGroupID sets the "from_question_group" edge to the QuestionGroup entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableFromQuestionGroupID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetFromQuestionGroupID(*id)
	}
	return qu
}

// SetFromQuestionGroup sets the "from_question_group" edge to the QuestionGroup entity.
func (qu *QuestionUpdate) SetFromQuestionGroup(q *QuestionGroup) *QuestionUpdate {
	return qu.SetFromQuestionGroupID(q.ID)
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by IDs.
func (qu *QuestionUpdate) AddQuestionResponseIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddQuestionResponseIDs(ids...)
	return qu
}

// AddQuestionResponse adds the "question_response" edges to the QuestionResponse entity.
func (qu *QuestionUpdate) AddQuestionResponse(q ...*QuestionResponse) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddQuestionResponseIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearFromQuestionGroup clears the "from_question_group" edge to the QuestionGroup entity.
func (qu *QuestionUpdate) ClearFromQuestionGroup() *QuestionUpdate {
	qu.mutation.ClearFromQuestionGroup()
	return qu
}

// ClearQuestionResponse clears all "question_response" edges to the QuestionResponse entity.
func (qu *QuestionUpdate) ClearQuestionResponse() *QuestionUpdate {
	qu.mutation.ClearQuestionResponse()
	return qu
}

// RemoveQuestionResponseIDs removes the "question_response" edge to QuestionResponse entities by IDs.
func (qu *QuestionUpdate) RemoveQuestionResponseIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveQuestionResponseIDs(ids...)
	return qu
}

// RemoveQuestionResponse removes "question_response" edges to QuestionResponse entities.
func (qu *QuestionUpdate) RemoveQuestionResponse(q ...*QuestionResponse) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveQuestionResponseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QuestionUpdate) check() error {
	if v, ok := qu.mutation.GetType(); ok {
		if err := question.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Question.type": %w`, err)}
		}
	}
	return nil
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Label(); ok {
		_spec.SetField(question.FieldLabel, field.TypeString, value)
	}
	if value, ok := qu.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := qu.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeEnum, value)
	}
	if value, ok := qu.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if value, ok := qu.mutation.ExtraData(); ok {
		_spec.SetField(question.FieldExtraData, field.TypeString, value)
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.CreatedBy(); ok {
		_spec.SetField(question.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(question.FieldCreatedBy, field.TypeInt, value)
	}
	if qu.mutation.FromQuestionGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FromQuestionGroupTable,
			Columns: []string{question.FromQuestionGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.FromQuestionGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FromQuestionGroupTable,
			Columns: []string{question.FromQuestionGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedQuestionResponseIDs(); len(nodes) > 0 && !qu.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuestionResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetLabel sets the "label" field.
func (quo *QuestionUpdateOne) SetLabel(s string) *QuestionUpdateOne {
	quo.mutation.SetLabel(s)
	return quo
}

// SetNillableLabel sets the "label" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableLabel(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetLabel(*s)
	}
	return quo
}

// SetTitle sets the "title" field.
func (quo *QuestionUpdateOne) SetTitle(s string) *QuestionUpdateOne {
	quo.mutation.SetTitle(s)
	return quo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableTitle(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetTitle(*s)
	}
	return quo
}

// SetType sets the "type" field.
func (quo *QuestionUpdateOne) SetType(q question.Type) *QuestionUpdateOne {
	quo.mutation.SetType(q)
	return quo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableType(q *question.Type) *QuestionUpdateOne {
	if q != nil {
		quo.SetType(*q)
	}
	return quo
}

// SetRequired sets the "required" field.
func (quo *QuestionUpdateOne) SetRequired(b bool) *QuestionUpdateOne {
	quo.mutation.SetRequired(b)
	return quo
}

// SetNillableRequired sets the "required" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableRequired(b *bool) *QuestionUpdateOne {
	if b != nil {
		quo.SetRequired(*b)
	}
	return quo
}

// SetExtraData sets the "extra_data" field.
func (quo *QuestionUpdateOne) SetExtraData(s string) *QuestionUpdateOne {
	quo.mutation.SetExtraData(s)
	return quo
}

// SetNillableExtraData sets the "extra_data" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableExtraData(s *string) *QuestionUpdateOne {
	if s != nil {
		quo.SetExtraData(*s)
	}
	return quo
}

// SetCreatedAt sets the "created_at" field.
func (quo *QuestionUpdateOne) SetCreatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetCreatedAt(*t)
	}
	return quo
}

// SetUpdatedAt sets the "updated_at" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableUpdatedAt(t *time.Time) *QuestionUpdateOne {
	if t != nil {
		quo.SetUpdatedAt(*t)
	}
	return quo
}

// SetCreatedBy sets the "created_by" field.
func (quo *QuestionUpdateOne) SetCreatedBy(i int) *QuestionUpdateOne {
	quo.mutation.ResetCreatedBy()
	quo.mutation.SetCreatedBy(i)
	return quo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCreatedBy(i *int) *QuestionUpdateOne {
	if i != nil {
		quo.SetCreatedBy(*i)
	}
	return quo
}

// AddCreatedBy adds i to the "created_by" field.
func (quo *QuestionUpdateOne) AddCreatedBy(i int) *QuestionUpdateOne {
	quo.mutation.AddCreatedBy(i)
	return quo
}

// SetFromQuestionGroupID sets the "from_question_group" edge to the QuestionGroup entity by ID.
func (quo *QuestionUpdateOne) SetFromQuestionGroupID(id int) *QuestionUpdateOne {
	quo.mutation.SetFromQuestionGroupID(id)
	return quo
}

// SetNillableFromQuestionGroupID sets the "from_question_group" edge to the QuestionGroup entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableFromQuestionGroupID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetFromQuestionGroupID(*id)
	}
	return quo
}

// SetFromQuestionGroup sets the "from_question_group" edge to the QuestionGroup entity.
func (quo *QuestionUpdateOne) SetFromQuestionGroup(q *QuestionGroup) *QuestionUpdateOne {
	return quo.SetFromQuestionGroupID(q.ID)
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by IDs.
func (quo *QuestionUpdateOne) AddQuestionResponseIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddQuestionResponseIDs(ids...)
	return quo
}

// AddQuestionResponse adds the "question_response" edges to the QuestionResponse entity.
func (quo *QuestionUpdateOne) AddQuestionResponse(q ...*QuestionResponse) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddQuestionResponseIDs(ids...)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearFromQuestionGroup clears the "from_question_group" edge to the QuestionGroup entity.
func (quo *QuestionUpdateOne) ClearFromQuestionGroup() *QuestionUpdateOne {
	quo.mutation.ClearFromQuestionGroup()
	return quo
}

// ClearQuestionResponse clears all "question_response" edges to the QuestionResponse entity.
func (quo *QuestionUpdateOne) ClearQuestionResponse() *QuestionUpdateOne {
	quo.mutation.ClearQuestionResponse()
	return quo
}

// RemoveQuestionResponseIDs removes the "question_response" edge to QuestionResponse entities by IDs.
func (quo *QuestionUpdateOne) RemoveQuestionResponseIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveQuestionResponseIDs(ids...)
	return quo
}

// RemoveQuestionResponse removes "question_response" edges to QuestionResponse entities.
func (quo *QuestionUpdateOne) RemoveQuestionResponse(q ...*QuestionResponse) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveQuestionResponseIDs(ids...)
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QuestionUpdateOne) check() error {
	if v, ok := quo.mutation.GetType(); ok {
		if err := question.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Question.type": %w`, err)}
		}
	}
	return nil
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(question.Table, question.Columns, sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, question.FieldID)
		for _, f := range fields {
			if !question.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != question.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Label(); ok {
		_spec.SetField(question.FieldLabel, field.TypeString, value)
	}
	if value, ok := quo.mutation.Title(); ok {
		_spec.SetField(question.FieldTitle, field.TypeString, value)
	}
	if value, ok := quo.mutation.GetType(); ok {
		_spec.SetField(question.FieldType, field.TypeEnum, value)
	}
	if value, ok := quo.mutation.Required(); ok {
		_spec.SetField(question.FieldRequired, field.TypeBool, value)
	}
	if value, ok := quo.mutation.ExtraData(); ok {
		_spec.SetField(question.FieldExtraData, field.TypeString, value)
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(question.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(question.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.CreatedBy(); ok {
		_spec.SetField(question.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(question.FieldCreatedBy, field.TypeInt, value)
	}
	if quo.mutation.FromQuestionGroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FromQuestionGroupTable,
			Columns: []string{question.FromQuestionGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.FromQuestionGroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.FromQuestionGroupTable,
			Columns: []string{question.FromQuestionGroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedQuestionResponseIDs(); len(nodes) > 0 && !quo.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuestionResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.QuestionResponseTable,
			Columns: []string{question.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
