// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/user"
)

// CreateEntFormInput represents a mutation input for creating entforms.
type CreateEntFormInput struct {
	Name        *string
	Description *string
	Enabled     *bool
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	CreatedBy   int
	QuestionIDs []int
}

// Mutate applies the CreateEntFormInput on the EntFormMutation builder.
func (i *CreateEntFormInput) Mutate(m *EntFormMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCreatedBy(i.CreatedBy)
	if v := i.QuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
}

// SetInput applies the change-set in the CreateEntFormInput on the EntFormCreate builder.
func (c *EntFormCreate) SetInput(i CreateEntFormInput) *EntFormCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntFormInput represents a mutation input for updating entforms.
type UpdateEntFormInput struct {
	Name              *string
	ClearDescription  bool
	Description       *string
	Enabled           *bool
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	CreatedBy         *int
	ClearQuestions    bool
	AddQuestionIDs    []int
	RemoveQuestionIDs []int
}

// Mutate applies the UpdateEntFormInput on the EntFormMutation builder.
func (i *UpdateEntFormInput) Mutate(m *EntFormMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearQuestions {
		m.ClearQuestions()
	}
	if v := i.AddQuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
	if v := i.RemoveQuestionIDs; len(v) > 0 {
		m.RemoveQuestionIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateEntFormInput on the EntFormUpdate builder.
func (c *EntFormUpdate) SetInput(i UpdateEntFormInput) *EntFormUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntFormInput on the EntFormUpdateOne builder.
func (c *EntFormUpdateOne) SetInput(i UpdateEntFormInput) *EntFormUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateEntFormQuestionInput represents a mutation input for creating entformquestions.
type CreateEntFormQuestionInput struct {
	Title     *string
	Label     string
	Type      entformquestion.Type
	Required  *bool
	ExtraData *string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	CreatedBy int
	FormID    *int
}

// Mutate applies the CreateEntFormQuestionInput on the EntFormQuestionMutation builder.
func (i *CreateEntFormQuestionInput) Mutate(m *EntFormQuestionMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	m.SetLabel(i.Label)
	m.SetType(i.Type)
	if v := i.Required; v != nil {
		m.SetRequired(*v)
	}
	if v := i.ExtraData; v != nil {
		m.SetExtraData(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCreatedBy(i.CreatedBy)
	if v := i.FormID; v != nil {
		m.SetFormID(*v)
	}
}

// SetInput applies the change-set in the CreateEntFormQuestionInput on the EntFormQuestionCreate builder.
func (c *EntFormQuestionCreate) SetInput(i CreateEntFormQuestionInput) *EntFormQuestionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateEntFormQuestionInput represents a mutation input for updating entformquestions.
type UpdateEntFormQuestionInput struct {
	Title          *string
	Label          *string
	Type           *entformquestion.Type
	Required       *bool
	ClearExtraData bool
	ExtraData      *string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	CreatedBy      *int
	ClearForm      bool
	FormID         *int
}

// Mutate applies the UpdateEntFormQuestionInput on the EntFormQuestionMutation builder.
func (i *UpdateEntFormQuestionInput) Mutate(m *EntFormQuestionMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Required; v != nil {
		m.SetRequired(*v)
	}
	if i.ClearExtraData {
		m.ClearExtraData()
	}
	if v := i.ExtraData; v != nil {
		m.SetExtraData(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearForm {
		m.ClearForm()
	}
	if v := i.FormID; v != nil {
		m.SetFormID(*v)
	}
}

// SetInput applies the change-set in the UpdateEntFormQuestionInput on the EntFormQuestionUpdate builder.
func (c *EntFormQuestionUpdate) SetInput(i UpdateEntFormQuestionInput) *EntFormQuestionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateEntFormQuestionInput on the EntFormQuestionUpdateOne builder.
func (c *EntFormQuestionUpdateOne) SetInput(i UpdateEntFormQuestionInput) *EntFormQuestionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFormInstanceInput represents a mutation input for creating forminstances.
type CreateFormInstanceInput struct {
	Status              *forminstance.Status
	FormSpecID          *int
	QuestionResponseIDs []int
	UsersID             *int
}

// Mutate applies the CreateFormInstanceInput on the FormInstanceMutation builder.
func (i *CreateFormInstanceInput) Mutate(m *FormInstanceMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.FormSpecID; v != nil {
		m.SetFormSpecID(*v)
	}
	if v := i.QuestionResponseIDs; len(v) > 0 {
		m.AddQuestionResponseIDs(v...)
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the CreateFormInstanceInput on the FormInstanceCreate builder.
func (c *FormInstanceCreate) SetInput(i CreateFormInstanceInput) *FormInstanceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFormInstanceInput represents a mutation input for updating forminstances.
type UpdateFormInstanceInput struct {
	Status                    *forminstance.Status
	ClearFormSpec             bool
	FormSpecID                *int
	ClearQuestionResponse     bool
	AddQuestionResponseIDs    []int
	RemoveQuestionResponseIDs []int
	ClearUsers                bool
	UsersID                   *int
}

// Mutate applies the UpdateFormInstanceInput on the FormInstanceMutation builder.
func (i *UpdateFormInstanceInput) Mutate(m *FormInstanceMutation) {
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearFormSpec {
		m.ClearFormSpec()
	}
	if v := i.FormSpecID; v != nil {
		m.SetFormSpecID(*v)
	}
	if i.ClearQuestionResponse {
		m.ClearQuestionResponse()
	}
	if v := i.AddQuestionResponseIDs; len(v) > 0 {
		m.AddQuestionResponseIDs(v...)
	}
	if v := i.RemoveQuestionResponseIDs; len(v) > 0 {
		m.RemoveQuestionResponseIDs(v...)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.UsersID; v != nil {
		m.SetUsersID(*v)
	}
}

// SetInput applies the change-set in the UpdateFormInstanceInput on the FormInstanceUpdate builder.
func (c *FormInstanceUpdate) SetInput(i UpdateFormInstanceInput) *FormInstanceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFormInstanceInput on the FormInstanceUpdateOne builder.
func (c *FormInstanceUpdateOne) SetInput(i UpdateFormInstanceInput) *FormInstanceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateFormSpecInput represents a mutation input for creating formspecs.
type CreateFormSpecInput struct {
	Name             *string
	Cover            *string
	Description      *string
	Enabled          *bool
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	CreatedBy        int
	QuestionGroupIDs []int
	FormInstanceIDs  []int
	OwnerID          *int
}

// Mutate applies the CreateFormSpecInput on the FormSpecMutation builder.
func (i *CreateFormSpecInput) Mutate(m *FormSpecMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Cover; v != nil {
		m.SetCover(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCreatedBy(i.CreatedBy)
	if v := i.QuestionGroupIDs; len(v) > 0 {
		m.AddQuestionGroupIDs(v...)
	}
	if v := i.FormInstanceIDs; len(v) > 0 {
		m.AddFormInstanceIDs(v...)
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the CreateFormSpecInput on the FormSpecCreate builder.
func (c *FormSpecCreate) SetInput(i CreateFormSpecInput) *FormSpecCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateFormSpecInput represents a mutation input for updating formspecs.
type UpdateFormSpecInput struct {
	Name                   *string
	ClearCover             bool
	Cover                  *string
	Description            *string
	Enabled                *bool
	CreatedAt              *time.Time
	UpdatedAt              *time.Time
	CreatedBy              *int
	ClearQuestionGroups    bool
	AddQuestionGroupIDs    []int
	RemoveQuestionGroupIDs []int
	ClearFormInstances     bool
	AddFormInstanceIDs     []int
	RemoveFormInstanceIDs  []int
	ClearOwner             bool
	OwnerID                *int
}

// Mutate applies the UpdateFormSpecInput on the FormSpecMutation builder.
func (i *UpdateFormSpecInput) Mutate(m *FormSpecMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCover {
		m.ClearCover()
	}
	if v := i.Cover; v != nil {
		m.SetCover(*v)
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if v := i.Enabled; v != nil {
		m.SetEnabled(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearQuestionGroups {
		m.ClearQuestionGroups()
	}
	if v := i.AddQuestionGroupIDs; len(v) > 0 {
		m.AddQuestionGroupIDs(v...)
	}
	if v := i.RemoveQuestionGroupIDs; len(v) > 0 {
		m.RemoveQuestionGroupIDs(v...)
	}
	if i.ClearFormInstances {
		m.ClearFormInstances()
	}
	if v := i.AddFormInstanceIDs; len(v) > 0 {
		m.AddFormInstanceIDs(v...)
	}
	if v := i.RemoveFormInstanceIDs; len(v) > 0 {
		m.RemoveFormInstanceIDs(v...)
	}
	if i.ClearOwner {
		m.ClearOwner()
	}
	if v := i.OwnerID; v != nil {
		m.SetOwnerID(*v)
	}
}

// SetInput applies the change-set in the UpdateFormSpecInput on the FormSpecUpdate builder.
func (c *FormSpecUpdate) SetInput(i UpdateFormSpecInput) *FormSpecUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateFormSpecInput on the FormSpecUpdateOne builder.
func (c *FormSpecUpdateOne) SetInput(i UpdateFormSpecInput) *FormSpecUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQuestionInput represents a mutation input for creating questions.
type CreateQuestionInput struct {
	Label               string
	Title               *string
	Type                question.Type
	Required            bool
	ExtraData           *string
	Rule                *string
	Dependencies        *string
	CreatedAt           *time.Time
	UpdatedAt           *time.Time
	CreatedBy           int
	FromQuestionGroupID *int
	QuestionResponseIDs []int
}

// Mutate applies the CreateQuestionInput on the QuestionMutation builder.
func (i *CreateQuestionInput) Mutate(m *QuestionMutation) {
	m.SetLabel(i.Label)
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	m.SetType(i.Type)
	m.SetRequired(i.Required)
	if v := i.ExtraData; v != nil {
		m.SetExtraData(*v)
	}
	if v := i.Rule; v != nil {
		m.SetRule(*v)
	}
	if v := i.Dependencies; v != nil {
		m.SetDependencies(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetCreatedBy(i.CreatedBy)
	if v := i.FromQuestionGroupID; v != nil {
		m.SetFromQuestionGroupID(*v)
	}
	if v := i.QuestionResponseIDs; len(v) > 0 {
		m.AddQuestionResponseIDs(v...)
	}
}

// SetInput applies the change-set in the CreateQuestionInput on the QuestionCreate builder.
func (c *QuestionCreate) SetInput(i CreateQuestionInput) *QuestionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateQuestionInput represents a mutation input for updating questions.
type UpdateQuestionInput struct {
	Label                     *string
	Title                     *string
	Type                      *question.Type
	Required                  *bool
	ExtraData                 *string
	Rule                      *string
	Dependencies              *string
	CreatedAt                 *time.Time
	UpdatedAt                 *time.Time
	CreatedBy                 *int
	ClearFromQuestionGroup    bool
	FromQuestionGroupID       *int
	ClearQuestionResponse     bool
	AddQuestionResponseIDs    []int
	RemoveQuestionResponseIDs []int
}

// Mutate applies the UpdateQuestionInput on the QuestionMutation builder.
func (i *UpdateQuestionInput) Mutate(m *QuestionMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Type; v != nil {
		m.SetType(*v)
	}
	if v := i.Required; v != nil {
		m.SetRequired(*v)
	}
	if v := i.ExtraData; v != nil {
		m.SetExtraData(*v)
	}
	if v := i.Rule; v != nil {
		m.SetRule(*v)
	}
	if v := i.Dependencies; v != nil {
		m.SetDependencies(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if i.ClearFromQuestionGroup {
		m.ClearFromQuestionGroup()
	}
	if v := i.FromQuestionGroupID; v != nil {
		m.SetFromQuestionGroupID(*v)
	}
	if i.ClearQuestionResponse {
		m.ClearQuestionResponse()
	}
	if v := i.AddQuestionResponseIDs; len(v) > 0 {
		m.AddQuestionResponseIDs(v...)
	}
	if v := i.RemoveQuestionResponseIDs; len(v) > 0 {
		m.RemoveQuestionResponseIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateQuestionInput on the QuestionUpdate builder.
func (c *QuestionUpdate) SetInput(i UpdateQuestionInput) *QuestionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateQuestionInput on the QuestionUpdateOne builder.
func (c *QuestionUpdateOne) SetInput(i UpdateQuestionInput) *QuestionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQuestionGroupInput represents a mutation input for creating questiongroups.
type CreateQuestionGroupInput struct {
	Name        string
	CreatedBy   int
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	QuestionIDs []int
	FormSpecID  *int
}

// Mutate applies the CreateQuestionGroupInput on the QuestionGroupMutation builder.
func (i *CreateQuestionGroupInput) Mutate(m *QuestionGroupMutation) {
	m.SetName(i.Name)
	m.SetCreatedBy(i.CreatedBy)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.QuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
	if v := i.FormSpecID; v != nil {
		m.SetFormSpecID(*v)
	}
}

// SetInput applies the change-set in the CreateQuestionGroupInput on the QuestionGroupCreate builder.
func (c *QuestionGroupCreate) SetInput(i CreateQuestionGroupInput) *QuestionGroupCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateQuestionGroupInput represents a mutation input for updating questiongroups.
type UpdateQuestionGroupInput struct {
	Name              *string
	CreatedBy         *int
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	ClearQuestion     bool
	AddQuestionIDs    []int
	RemoveQuestionIDs []int
	ClearFormSpec     bool
	FormSpecID        *int
}

// Mutate applies the UpdateQuestionGroupInput on the QuestionGroupMutation builder.
func (i *UpdateQuestionGroupInput) Mutate(m *QuestionGroupMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CreatedBy; v != nil {
		m.SetCreatedBy(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearQuestion {
		m.ClearQuestion()
	}
	if v := i.AddQuestionIDs; len(v) > 0 {
		m.AddQuestionIDs(v...)
	}
	if v := i.RemoveQuestionIDs; len(v) > 0 {
		m.RemoveQuestionIDs(v...)
	}
	if i.ClearFormSpec {
		m.ClearFormSpec()
	}
	if v := i.FormSpecID; v != nil {
		m.SetFormSpecID(*v)
	}
}

// SetInput applies the change-set in the UpdateQuestionGroupInput on the QuestionGroupUpdate builder.
func (c *QuestionGroupUpdate) SetInput(i UpdateQuestionGroupInput) *QuestionGroupUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateQuestionGroupInput on the QuestionGroupUpdateOne builder.
func (c *QuestionGroupUpdateOne) SetInput(i UpdateQuestionGroupInput) *QuestionGroupUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateQuestionResponseInput represents a mutation input for creating questionresponses.
type CreateQuestionResponseInput struct {
	Label          string
	Value          string
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	QuestionID     *int
	FormInstanceID *int
}

// Mutate applies the CreateQuestionResponseInput on the QuestionResponseMutation builder.
func (i *CreateQuestionResponseInput) Mutate(m *QuestionResponseMutation) {
	m.SetLabel(i.Label)
	m.SetValue(i.Value)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.QuestionID; v != nil {
		m.SetQuestionID(*v)
	}
	if v := i.FormInstanceID; v != nil {
		m.SetFormInstanceID(*v)
	}
}

// SetInput applies the change-set in the CreateQuestionResponseInput on the QuestionResponseCreate builder.
func (c *QuestionResponseCreate) SetInput(i CreateQuestionResponseInput) *QuestionResponseCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateQuestionResponseInput represents a mutation input for updating questionresponses.
type UpdateQuestionResponseInput struct {
	Label             *string
	Value             *string
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	ClearQuestion     bool
	QuestionID        *int
	ClearFormInstance bool
	FormInstanceID    *int
}

// Mutate applies the UpdateQuestionResponseInput on the QuestionResponseMutation builder.
func (i *UpdateQuestionResponseInput) Mutate(m *QuestionResponseMutation) {
	if v := i.Label; v != nil {
		m.SetLabel(*v)
	}
	if v := i.Value; v != nil {
		m.SetValue(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearQuestion {
		m.ClearQuestion()
	}
	if v := i.QuestionID; v != nil {
		m.SetQuestionID(*v)
	}
	if i.ClearFormInstance {
		m.ClearFormInstance()
	}
	if v := i.FormInstanceID; v != nil {
		m.SetFormInstanceID(*v)
	}
}

// SetInput applies the change-set in the UpdateQuestionResponseInput on the QuestionResponseUpdate builder.
func (c *QuestionResponseUpdate) SetInput(i UpdateQuestionResponseInput) *QuestionResponseUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateQuestionResponseInput on the QuestionResponseUpdateOne builder.
func (c *QuestionResponseUpdateOne) SetInput(i UpdateQuestionResponseInput) *QuestionResponseUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name            *string
	Email           *string
	Password        *string
	Role            user.Role
	CreatedAt       *time.Time
	UpdatedAt       *time.Time
	FormSpecIDs     []int
	FormInstanceIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	m.SetRole(i.Role)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.FormSpecIDs; len(v) > 0 {
		m.AddFormSpecIDs(v...)
	}
	if v := i.FormInstanceIDs; len(v) > 0 {
		m.AddFormInstanceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name                  *string
	Email                 *string
	Password              *string
	Role                  *user.Role
	CreatedAt             *time.Time
	UpdatedAt             *time.Time
	ClearFormSpecs        bool
	AddFormSpecIDs        []int
	RemoveFormSpecIDs     []int
	ClearFormInstances    bool
	AddFormInstanceIDs    []int
	RemoveFormInstanceIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearFormSpecs {
		m.ClearFormSpecs()
	}
	if v := i.AddFormSpecIDs; len(v) > 0 {
		m.AddFormSpecIDs(v...)
	}
	if v := i.RemoveFormSpecIDs; len(v) > 0 {
		m.RemoveFormSpecIDs(v...)
	}
	if i.ClearFormInstances {
		m.ClearFormInstances()
	}
	if v := i.AddFormInstanceIDs; len(v) > 0 {
		m.AddFormInstanceIDs(v...)
	}
	if v := i.RemoveFormInstanceIDs; len(v) > 0 {
		m.RemoveFormInstanceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
