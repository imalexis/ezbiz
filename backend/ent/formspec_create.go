// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/questiongroup"
	"ezbiz.com/ent/user"
)

// FormSpecCreate is the builder for creating a FormSpec entity.
type FormSpecCreate struct {
	config
	mutation *FormSpecMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (fsc *FormSpecCreate) SetName(s string) *FormSpecCreate {
	fsc.mutation.SetName(s)
	return fsc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableName(s *string) *FormSpecCreate {
	if s != nil {
		fsc.SetName(*s)
	}
	return fsc
}

// SetCover sets the "cover" field.
func (fsc *FormSpecCreate) SetCover(s string) *FormSpecCreate {
	fsc.mutation.SetCover(s)
	return fsc
}

// SetNillableCover sets the "cover" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableCover(s *string) *FormSpecCreate {
	if s != nil {
		fsc.SetCover(*s)
	}
	return fsc
}

// SetDescription sets the "description" field.
func (fsc *FormSpecCreate) SetDescription(s string) *FormSpecCreate {
	fsc.mutation.SetDescription(s)
	return fsc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableDescription(s *string) *FormSpecCreate {
	if s != nil {
		fsc.SetDescription(*s)
	}
	return fsc
}

// SetEnabled sets the "enabled" field.
func (fsc *FormSpecCreate) SetEnabled(b bool) *FormSpecCreate {
	fsc.mutation.SetEnabled(b)
	return fsc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableEnabled(b *bool) *FormSpecCreate {
	if b != nil {
		fsc.SetEnabled(*b)
	}
	return fsc
}

// SetCreatedAt sets the "created_at" field.
func (fsc *FormSpecCreate) SetCreatedAt(t time.Time) *FormSpecCreate {
	fsc.mutation.SetCreatedAt(t)
	return fsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableCreatedAt(t *time.Time) *FormSpecCreate {
	if t != nil {
		fsc.SetCreatedAt(*t)
	}
	return fsc
}

// SetUpdatedAt sets the "updated_at" field.
func (fsc *FormSpecCreate) SetUpdatedAt(t time.Time) *FormSpecCreate {
	fsc.mutation.SetUpdatedAt(t)
	return fsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableUpdatedAt(t *time.Time) *FormSpecCreate {
	if t != nil {
		fsc.SetUpdatedAt(*t)
	}
	return fsc
}

// SetCreatedBy sets the "created_by" field.
func (fsc *FormSpecCreate) SetCreatedBy(i int) *FormSpecCreate {
	fsc.mutation.SetCreatedBy(i)
	return fsc
}

// AddQuestionGroupIDs adds the "question_groups" edge to the QuestionGroup entity by IDs.
func (fsc *FormSpecCreate) AddQuestionGroupIDs(ids ...int) *FormSpecCreate {
	fsc.mutation.AddQuestionGroupIDs(ids...)
	return fsc
}

// AddQuestionGroups adds the "question_groups" edges to the QuestionGroup entity.
func (fsc *FormSpecCreate) AddQuestionGroups(q ...*QuestionGroup) *FormSpecCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fsc.AddQuestionGroupIDs(ids...)
}

// AddFormInstanceIDs adds the "form_instances" edge to the FormInstance entity by IDs.
func (fsc *FormSpecCreate) AddFormInstanceIDs(ids ...int) *FormSpecCreate {
	fsc.mutation.AddFormInstanceIDs(ids...)
	return fsc
}

// AddFormInstances adds the "form_instances" edges to the FormInstance entity.
func (fsc *FormSpecCreate) AddFormInstances(f ...*FormInstance) *FormSpecCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fsc.AddFormInstanceIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (fsc *FormSpecCreate) SetOwnerID(id int) *FormSpecCreate {
	fsc.mutation.SetOwnerID(id)
	return fsc
}

// SetNillableOwnerID sets the "owner" edge to the User entity by ID if the given value is not nil.
func (fsc *FormSpecCreate) SetNillableOwnerID(id *int) *FormSpecCreate {
	if id != nil {
		fsc = fsc.SetOwnerID(*id)
	}
	return fsc
}

// SetOwner sets the "owner" edge to the User entity.
func (fsc *FormSpecCreate) SetOwner(u *User) *FormSpecCreate {
	return fsc.SetOwnerID(u.ID)
}

// Mutation returns the FormSpecMutation object of the builder.
func (fsc *FormSpecCreate) Mutation() *FormSpecMutation {
	return fsc.mutation
}

// Save creates the FormSpec in the database.
func (fsc *FormSpecCreate) Save(ctx context.Context) (*FormSpec, error) {
	fsc.defaults()
	return withHooks(ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FormSpecCreate) SaveX(ctx context.Context) *FormSpec {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FormSpecCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FormSpecCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FormSpecCreate) defaults() {
	if _, ok := fsc.mutation.Name(); !ok {
		v := formspec.DefaultName
		fsc.mutation.SetName(v)
	}
	if _, ok := fsc.mutation.Description(); !ok {
		v := formspec.DefaultDescription
		fsc.mutation.SetDescription(v)
	}
	if _, ok := fsc.mutation.Enabled(); !ok {
		v := formspec.DefaultEnabled
		fsc.mutation.SetEnabled(v)
	}
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		v := formspec.DefaultCreatedAt()
		fsc.mutation.SetCreatedAt(v)
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		v := formspec.DefaultUpdatedAt()
		fsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FormSpecCreate) check() error {
	if _, ok := fsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FormSpec.name"`)}
	}
	if _, ok := fsc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "FormSpec.description"`)}
	}
	if _, ok := fsc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "FormSpec.enabled"`)}
	}
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FormSpec.created_at"`)}
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FormSpec.updated_at"`)}
	}
	if _, ok := fsc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "FormSpec.created_by"`)}
	}
	return nil
}

func (fsc *FormSpecCreate) sqlSave(ctx context.Context) (*FormSpec, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FormSpecCreate) createSpec() (*FormSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &FormSpec{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(formspec.Table, sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt))
	)
	if value, ok := fsc.mutation.Name(); ok {
		_spec.SetField(formspec.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fsc.mutation.Cover(); ok {
		_spec.SetField(formspec.FieldCover, field.TypeString, value)
		_node.Cover = value
	}
	if value, ok := fsc.mutation.Description(); ok {
		_spec.SetField(formspec.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fsc.mutation.Enabled(); ok {
		_spec.SetField(formspec.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := fsc.mutation.CreatedAt(); ok {
		_spec.SetField(formspec.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fsc.mutation.UpdatedAt(); ok {
		_spec.SetField(formspec.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fsc.mutation.CreatedBy(); ok {
		_spec.SetField(formspec.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if nodes := fsc.mutation.QuestionGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formspec.QuestionGroupsTable,
			Columns: []string{formspec.QuestionGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fsc.mutation.FormInstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   formspec.FormInstancesTable,
			Columns: []string{formspec.FormInstancesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fsc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   formspec.OwnerTable,
			Columns: []string{formspec.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_form_specs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FormSpecCreateBulk is the builder for creating many FormSpec entities in bulk.
type FormSpecCreateBulk struct {
	config
	err      error
	builders []*FormSpecCreate
}

// Save creates the FormSpec entities in the database.
func (fscb *FormSpecCreateBulk) Save(ctx context.Context) ([]*FormSpec, error) {
	if fscb.err != nil {
		return nil, fscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FormSpec, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FormSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FormSpecCreateBulk) SaveX(ctx context.Context) []*FormSpec {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FormSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FormSpecCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
