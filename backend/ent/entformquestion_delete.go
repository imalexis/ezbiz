// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/predicate"
)

// EntFormQuestionDelete is the builder for deleting a EntFormQuestion entity.
type EntFormQuestionDelete struct {
	config
	hooks    []Hook
	mutation *EntFormQuestionMutation
}

// Where appends a list predicates to the EntFormQuestionDelete builder.
func (efqd *EntFormQuestionDelete) Where(ps ...predicate.EntFormQuestion) *EntFormQuestionDelete {
	efqd.mutation.Where(ps...)
	return efqd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (efqd *EntFormQuestionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, efqd.sqlExec, efqd.mutation, efqd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (efqd *EntFormQuestionDelete) ExecX(ctx context.Context) int {
	n, err := efqd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (efqd *EntFormQuestionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(entformquestion.Table, sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt))
	if ps := efqd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, efqd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	efqd.mutation.done = true
	return affected, err
}

// EntFormQuestionDeleteOne is the builder for deleting a single EntFormQuestion entity.
type EntFormQuestionDeleteOne struct {
	efqd *EntFormQuestionDelete
}

// Where appends a list predicates to the EntFormQuestionDelete builder.
func (efqdo *EntFormQuestionDeleteOne) Where(ps ...predicate.EntFormQuestion) *EntFormQuestionDeleteOne {
	efqdo.efqd.mutation.Where(ps...)
	return efqdo
}

// Exec executes the deletion query.
func (efqdo *EntFormQuestionDeleteOne) Exec(ctx context.Context) error {
	n, err := efqdo.efqd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{entformquestion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (efqdo *EntFormQuestionDeleteOne) ExecX(ctx context.Context) {
	if err := efqdo.Exec(ctx); err != nil {
		panic(err)
	}
}
