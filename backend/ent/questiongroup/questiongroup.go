// Code generated by ent, DO NOT EDIT.

package questiongroup

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the questiongroup type in the database.
	Label = "question_group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"
	// EdgeFormSpec holds the string denoting the form_spec edge name in mutations.
	EdgeFormSpec = "form_spec"
	// Table holds the table name of the questiongroup in the database.
	Table = "question_groups"
	// QuestionTable is the table that holds the question relation/edge.
	QuestionTable = "questions"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_group_question"
	// FormSpecTable is the table that holds the form_spec relation/edge.
	FormSpecTable = "question_groups"
	// FormSpecInverseTable is the table name for the FormSpec entity.
	// It exists in this package in order to avoid circular dependency with the "formspec" package.
	FormSpecInverseTable = "form_specs"
	// FormSpecColumn is the table column denoting the form_spec relation/edge.
	FormSpecColumn = "form_spec_question_groups"
)

// Columns holds all SQL columns for questiongroup fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "question_groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"form_spec_question_groups",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the QuestionGroup queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByQuestionCount orders the results by question count.
func ByQuestionCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newQuestionStep(), opts...)
	}
}

// ByQuestion orders the results by question terms.
func ByQuestion(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuestionStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFormSpecField orders the results by form_spec field.
func ByFormSpecField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFormSpecStep(), sql.OrderByField(field, opts...))
	}
}
func newQuestionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuestionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, QuestionTable, QuestionColumn),
	)
}
func newFormSpecStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FormSpecInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FormSpecTable, FormSpecColumn),
	)
}
