// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/entform"
)

// EntForm is the model entity for the EntForm schema.
type EntForm struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntFormQuery when eager-loading is set.
	Edges        EntFormEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EntFormEdges holds the relations/edges for other nodes in the graph.
type EntFormEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*EntFormQuestion `json:"questions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedQuestions map[string][]*EntFormQuestion
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e EntFormEdges) QuestionsOrErr() ([]*EntFormQuestion, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntForm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entform.FieldEnabled:
			values[i] = new(sql.NullBool)
		case entform.FieldID, entform.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case entform.FieldName, entform.FieldDescription:
			values[i] = new(sql.NullString)
		case entform.FieldCreatedAt, entform.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntForm fields.
func (ef *EntForm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entform.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ef.ID = int(value.Int64)
		case entform.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ef.Name = value.String
			}
		case entform.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ef.Description = value.String
			}
		case entform.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				ef.Enabled = value.Bool
			}
		case entform.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ef.CreatedAt = value.Time
			}
		case entform.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ef.UpdatedAt = value.Time
			}
		case entform.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ef.CreatedBy = int(value.Int64)
			}
		default:
			ef.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntForm.
// This includes values selected through modifiers, order, etc.
func (ef *EntForm) Value(name string) (ent.Value, error) {
	return ef.selectValues.Get(name)
}

// QueryQuestions queries the "questions" edge of the EntForm entity.
func (ef *EntForm) QueryQuestions() *EntFormQuestionQuery {
	return NewEntFormClient(ef.config).QueryQuestions(ef)
}

// Update returns a builder for updating this EntForm.
// Note that you need to call EntForm.Unwrap() before calling this method if this EntForm
// was returned from a transaction, and the transaction was committed or rolled back.
func (ef *EntForm) Update() *EntFormUpdateOne {
	return NewEntFormClient(ef.config).UpdateOne(ef)
}

// Unwrap unwraps the EntForm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ef *EntForm) Unwrap() *EntForm {
	_tx, ok := ef.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntForm is not a transactional entity")
	}
	ef.config.driver = _tx.drv
	return ef
}

// String implements the fmt.Stringer.
func (ef *EntForm) String() string {
	var builder strings.Builder
	builder.WriteString("EntForm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ef.ID))
	builder.WriteString("name=")
	builder.WriteString(ef.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ef.Description)
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", ef.Enabled))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ef.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ef.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", ef.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// NamedQuestions returns the Questions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ef *EntForm) NamedQuestions(name string) ([]*EntFormQuestion, error) {
	if ef.Edges.namedQuestions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ef.Edges.namedQuestions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ef *EntForm) appendNamedQuestions(name string, edges ...*EntFormQuestion) {
	if ef.Edges.namedQuestions == nil {
		ef.Edges.namedQuestions = make(map[string][]*EntFormQuestion)
	}
	if len(edges) == 0 {
		ef.Edges.namedQuestions[name] = []*EntFormQuestion{}
	} else {
		ef.Edges.namedQuestions[name] = append(ef.Edges.namedQuestions[name], edges...)
	}
}

// EntForms is a parsable slice of EntForm.
type EntForms []*EntForm
