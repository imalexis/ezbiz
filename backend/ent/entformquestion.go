// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
)

// EntFormQuestion is the model entity for the EntFormQuestion schema.
type EntFormQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Label holds the value of the "label" field.
	Label string `json:"label,omitempty"`
	// Type holds the value of the "type" field.
	Type entformquestion.Type `json:"type,omitempty"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// ExtraData holds the value of the "extra_data" field.
	ExtraData string `json:"extra_data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntFormQuestionQuery when eager-loading is set.
	Edges              EntFormQuestionEdges `json:"edges"`
	ent_form_questions *int
	selectValues       sql.SelectValues
}

// EntFormQuestionEdges holds the relations/edges for other nodes in the graph.
type EntFormQuestionEdges struct {
	// Form holds the value of the form edge.
	Form *EntForm `json:"form,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// FormOrErr returns the Form value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntFormQuestionEdges) FormOrErr() (*EntForm, error) {
	if e.loadedTypes[0] {
		if e.Form == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: entform.Label}
		}
		return e.Form, nil
	}
	return nil, &NotLoadedError{edge: "form"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EntFormQuestion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entformquestion.FieldRequired:
			values[i] = new(sql.NullBool)
		case entformquestion.FieldID, entformquestion.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case entformquestion.FieldTitle, entformquestion.FieldLabel, entformquestion.FieldType, entformquestion.FieldExtraData:
			values[i] = new(sql.NullString)
		case entformquestion.FieldCreatedAt, entformquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case entformquestion.ForeignKeys[0]: // ent_form_questions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EntFormQuestion fields.
func (efq *EntFormQuestion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entformquestion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			efq.ID = int(value.Int64)
		case entformquestion.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				efq.Title = value.String
			}
		case entformquestion.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				efq.Label = value.String
			}
		case entformquestion.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				efq.Type = entformquestion.Type(value.String)
			}
		case entformquestion.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				efq.Required = value.Bool
			}
		case entformquestion.FieldExtraData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_data", values[i])
			} else if value.Valid {
				efq.ExtraData = value.String
			}
		case entformquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				efq.CreatedAt = value.Time
			}
		case entformquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				efq.UpdatedAt = value.Time
			}
		case entformquestion.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				efq.CreatedBy = int(value.Int64)
			}
		case entformquestion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ent_form_questions", value)
			} else if value.Valid {
				efq.ent_form_questions = new(int)
				*efq.ent_form_questions = int(value.Int64)
			}
		default:
			efq.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EntFormQuestion.
// This includes values selected through modifiers, order, etc.
func (efq *EntFormQuestion) Value(name string) (ent.Value, error) {
	return efq.selectValues.Get(name)
}

// QueryForm queries the "form" edge of the EntFormQuestion entity.
func (efq *EntFormQuestion) QueryForm() *EntFormQuery {
	return NewEntFormQuestionClient(efq.config).QueryForm(efq)
}

// Update returns a builder for updating this EntFormQuestion.
// Note that you need to call EntFormQuestion.Unwrap() before calling this method if this EntFormQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (efq *EntFormQuestion) Update() *EntFormQuestionUpdateOne {
	return NewEntFormQuestionClient(efq.config).UpdateOne(efq)
}

// Unwrap unwraps the EntFormQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (efq *EntFormQuestion) Unwrap() *EntFormQuestion {
	_tx, ok := efq.config.driver.(*txDriver)
	if !ok {
		panic("ent: EntFormQuestion is not a transactional entity")
	}
	efq.config.driver = _tx.drv
	return efq
}

// String implements the fmt.Stringer.
func (efq *EntFormQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("EntFormQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", efq.ID))
	builder.WriteString("title=")
	builder.WriteString(efq.Title)
	builder.WriteString(", ")
	builder.WriteString("label=")
	builder.WriteString(efq.Label)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", efq.Type))
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", efq.Required))
	builder.WriteString(", ")
	builder.WriteString("extra_data=")
	builder.WriteString(efq.ExtraData)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(efq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(efq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", efq.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// EntFormQuestions is a parsable slice of EntFormQuestion.
type EntFormQuestions []*EntFormQuestion
