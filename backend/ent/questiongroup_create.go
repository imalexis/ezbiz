// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
)

// QuestionGroupCreate is the builder for creating a QuestionGroup entity.
type QuestionGroupCreate struct {
	config
	mutation *QuestionGroupMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qgc *QuestionGroupCreate) SetName(s string) *QuestionGroupCreate {
	qgc.mutation.SetName(s)
	return qgc
}

// SetCreatedBy sets the "created_by" field.
func (qgc *QuestionGroupCreate) SetCreatedBy(i int) *QuestionGroupCreate {
	qgc.mutation.SetCreatedBy(i)
	return qgc
}

// SetCreatedAt sets the "created_at" field.
func (qgc *QuestionGroupCreate) SetCreatedAt(t time.Time) *QuestionGroupCreate {
	qgc.mutation.SetCreatedAt(t)
	return qgc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qgc *QuestionGroupCreate) SetNillableCreatedAt(t *time.Time) *QuestionGroupCreate {
	if t != nil {
		qgc.SetCreatedAt(*t)
	}
	return qgc
}

// SetUpdatedAt sets the "updated_at" field.
func (qgc *QuestionGroupCreate) SetUpdatedAt(t time.Time) *QuestionGroupCreate {
	qgc.mutation.SetUpdatedAt(t)
	return qgc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qgc *QuestionGroupCreate) SetNillableUpdatedAt(t *time.Time) *QuestionGroupCreate {
	if t != nil {
		qgc.SetUpdatedAt(*t)
	}
	return qgc
}

// AddQuestionIDs adds the "question" edge to the Question entity by IDs.
func (qgc *QuestionGroupCreate) AddQuestionIDs(ids ...int) *QuestionGroupCreate {
	qgc.mutation.AddQuestionIDs(ids...)
	return qgc
}

// AddQuestion adds the "question" edges to the Question entity.
func (qgc *QuestionGroupCreate) AddQuestion(q ...*Question) *QuestionGroupCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qgc.AddQuestionIDs(ids...)
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by ID.
func (qgc *QuestionGroupCreate) SetFormSpecID(id int) *QuestionGroupCreate {
	qgc.mutation.SetFormSpecID(id)
	return qgc
}

// SetNillableFormSpecID sets the "form_spec" edge to the FormSpec entity by ID if the given value is not nil.
func (qgc *QuestionGroupCreate) SetNillableFormSpecID(id *int) *QuestionGroupCreate {
	if id != nil {
		qgc = qgc.SetFormSpecID(*id)
	}
	return qgc
}

// SetFormSpec sets the "form_spec" edge to the FormSpec entity.
func (qgc *QuestionGroupCreate) SetFormSpec(f *FormSpec) *QuestionGroupCreate {
	return qgc.SetFormSpecID(f.ID)
}

// Mutation returns the QuestionGroupMutation object of the builder.
func (qgc *QuestionGroupCreate) Mutation() *QuestionGroupMutation {
	return qgc.mutation
}

// Save creates the QuestionGroup in the database.
func (qgc *QuestionGroupCreate) Save(ctx context.Context) (*QuestionGroup, error) {
	qgc.defaults()
	return withHooks(ctx, qgc.sqlSave, qgc.mutation, qgc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (qgc *QuestionGroupCreate) SaveX(ctx context.Context) *QuestionGroup {
	v, err := qgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qgc *QuestionGroupCreate) Exec(ctx context.Context) error {
	_, err := qgc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qgc *QuestionGroupCreate) ExecX(ctx context.Context) {
	if err := qgc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qgc *QuestionGroupCreate) defaults() {
	if _, ok := qgc.mutation.CreatedAt(); !ok {
		v := questiongroup.DefaultCreatedAt()
		qgc.mutation.SetCreatedAt(v)
	}
	if _, ok := qgc.mutation.UpdatedAt(); !ok {
		v := questiongroup.DefaultUpdatedAt()
		qgc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qgc *QuestionGroupCreate) check() error {
	if _, ok := qgc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "QuestionGroup.name"`)}
	}
	if _, ok := qgc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "QuestionGroup.created_by"`)}
	}
	if _, ok := qgc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "QuestionGroup.created_at"`)}
	}
	if _, ok := qgc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "QuestionGroup.updated_at"`)}
	}
	return nil
}

func (qgc *QuestionGroupCreate) sqlSave(ctx context.Context) (*QuestionGroup, error) {
	if err := qgc.check(); err != nil {
		return nil, err
	}
	_node, _spec := qgc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qgc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	qgc.mutation.id = &_node.ID
	qgc.mutation.done = true
	return _node, nil
}

func (qgc *QuestionGroupCreate) createSpec() (*QuestionGroup, *sqlgraph.CreateSpec) {
	var (
		_node = &QuestionGroup{config: qgc.config}
		_spec = sqlgraph.NewCreateSpec(questiongroup.Table, sqlgraph.NewFieldSpec(questiongroup.FieldID, field.TypeInt))
	)
	if value, ok := qgc.mutation.Name(); ok {
		_spec.SetField(questiongroup.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := qgc.mutation.CreatedBy(); ok {
		_spec.SetField(questiongroup.FieldCreatedBy, field.TypeInt, value)
		_node.CreatedBy = value
	}
	if value, ok := qgc.mutation.CreatedAt(); ok {
		_spec.SetField(questiongroup.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qgc.mutation.UpdatedAt(); ok {
		_spec.SetField(questiongroup.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := qgc.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   questiongroup.QuestionTable,
			Columns: []string{questiongroup.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(question.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qgc.mutation.FormSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   questiongroup.FormSpecTable,
			Columns: []string{questiongroup.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.form_spec_question_groups = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuestionGroupCreateBulk is the builder for creating many QuestionGroup entities in bulk.
type QuestionGroupCreateBulk struct {
	config
	err      error
	builders []*QuestionGroupCreate
}

// Save creates the QuestionGroup entities in the database.
func (qgcb *QuestionGroupCreateBulk) Save(ctx context.Context) ([]*QuestionGroup, error) {
	if qgcb.err != nil {
		return nil, qgcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(qgcb.builders))
	nodes := make([]*QuestionGroup, len(qgcb.builders))
	mutators := make([]Mutator, len(qgcb.builders))
	for i := range qgcb.builders {
		func(i int, root context.Context) {
			builder := qgcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuestionGroupMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qgcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qgcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qgcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qgcb *QuestionGroupCreateBulk) SaveX(ctx context.Context) []*QuestionGroup {
	v, err := qgcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qgcb *QuestionGroupCreateBulk) Exec(ctx context.Context) error {
	_, err := qgcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qgcb *QuestionGroupCreateBulk) ExecX(ctx context.Context) {
	if err := qgcb.Exec(ctx); err != nil {
		panic(err)
	}
}
