// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/forminstance"
	"ezbiz.com/ent/formspec"
	"ezbiz.com/ent/predicate"
	"ezbiz.com/ent/questionresponse"
	"ezbiz.com/ent/user"
)

// FormInstanceUpdate is the builder for updating FormInstance entities.
type FormInstanceUpdate struct {
	config
	hooks    []Hook
	mutation *FormInstanceMutation
}

// Where appends a list predicates to the FormInstanceUpdate builder.
func (fiu *FormInstanceUpdate) Where(ps ...predicate.FormInstance) *FormInstanceUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetStatus sets the "status" field.
func (fiu *FormInstanceUpdate) SetStatus(f forminstance.Status) *FormInstanceUpdate {
	fiu.mutation.SetStatus(f)
	return fiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiu *FormInstanceUpdate) SetNillableStatus(f *forminstance.Status) *FormInstanceUpdate {
	if f != nil {
		fiu.SetStatus(*f)
	}
	return fiu
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by ID.
func (fiu *FormInstanceUpdate) SetFormSpecID(id int) *FormInstanceUpdate {
	fiu.mutation.SetFormSpecID(id)
	return fiu
}

// SetNillableFormSpecID sets the "form_spec" edge to the FormSpec entity by ID if the given value is not nil.
func (fiu *FormInstanceUpdate) SetNillableFormSpecID(id *int) *FormInstanceUpdate {
	if id != nil {
		fiu = fiu.SetFormSpecID(*id)
	}
	return fiu
}

// SetFormSpec sets the "form_spec" edge to the FormSpec entity.
func (fiu *FormInstanceUpdate) SetFormSpec(f *FormSpec) *FormInstanceUpdate {
	return fiu.SetFormSpecID(f.ID)
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by IDs.
func (fiu *FormInstanceUpdate) AddQuestionResponseIDs(ids ...int) *FormInstanceUpdate {
	fiu.mutation.AddQuestionResponseIDs(ids...)
	return fiu
}

// AddQuestionResponse adds the "question_response" edges to the QuestionResponse entity.
func (fiu *FormInstanceUpdate) AddQuestionResponse(q ...*QuestionResponse) *FormInstanceUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fiu.AddQuestionResponseIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (fiu *FormInstanceUpdate) SetUsersID(id int) *FormInstanceUpdate {
	fiu.mutation.SetUsersID(id)
	return fiu
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (fiu *FormInstanceUpdate) SetNillableUsersID(id *int) *FormInstanceUpdate {
	if id != nil {
		fiu = fiu.SetUsersID(*id)
	}
	return fiu
}

// SetUsers sets the "users" edge to the User entity.
func (fiu *FormInstanceUpdate) SetUsers(u *User) *FormInstanceUpdate {
	return fiu.SetUsersID(u.ID)
}

// Mutation returns the FormInstanceMutation object of the builder.
func (fiu *FormInstanceUpdate) Mutation() *FormInstanceMutation {
	return fiu.mutation
}

// ClearFormSpec clears the "form_spec" edge to the FormSpec entity.
func (fiu *FormInstanceUpdate) ClearFormSpec() *FormInstanceUpdate {
	fiu.mutation.ClearFormSpec()
	return fiu
}

// ClearQuestionResponse clears all "question_response" edges to the QuestionResponse entity.
func (fiu *FormInstanceUpdate) ClearQuestionResponse() *FormInstanceUpdate {
	fiu.mutation.ClearQuestionResponse()
	return fiu
}

// RemoveQuestionResponseIDs removes the "question_response" edge to QuestionResponse entities by IDs.
func (fiu *FormInstanceUpdate) RemoveQuestionResponseIDs(ids ...int) *FormInstanceUpdate {
	fiu.mutation.RemoveQuestionResponseIDs(ids...)
	return fiu
}

// RemoveQuestionResponse removes "question_response" edges to QuestionResponse entities.
func (fiu *FormInstanceUpdate) RemoveQuestionResponse(q ...*QuestionResponse) *FormInstanceUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fiu.RemoveQuestionResponseIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (fiu *FormInstanceUpdate) ClearUsers() *FormInstanceUpdate {
	fiu.mutation.ClearUsers()
	return fiu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FormInstanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FormInstanceUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FormInstanceUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FormInstanceUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiu *FormInstanceUpdate) check() error {
	if v, ok := fiu.mutation.Status(); ok {
		if err := forminstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FormInstance.status": %w`, err)}
		}
	}
	return nil
}

func (fiu *FormInstanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(forminstance.Table, forminstance.Columns, sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Status(); ok {
		_spec.SetField(forminstance.FieldStatus, field.TypeEnum, value)
	}
	if fiu.mutation.FormSpecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.FormSpecTable,
			Columns: []string{forminstance.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.FormSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.FormSpecTable,
			Columns: []string{forminstance.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.RemovedQuestionResponseIDs(); len(nodes) > 0 && !fiu.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.QuestionResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.UsersTable,
			Columns: []string{forminstance.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.UsersTable,
			Columns: []string{forminstance.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forminstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FormInstanceUpdateOne is the builder for updating a single FormInstance entity.
type FormInstanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FormInstanceMutation
}

// SetStatus sets the "status" field.
func (fiuo *FormInstanceUpdateOne) SetStatus(f forminstance.Status) *FormInstanceUpdateOne {
	fiuo.mutation.SetStatus(f)
	return fiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (fiuo *FormInstanceUpdateOne) SetNillableStatus(f *forminstance.Status) *FormInstanceUpdateOne {
	if f != nil {
		fiuo.SetStatus(*f)
	}
	return fiuo
}

// SetFormSpecID sets the "form_spec" edge to the FormSpec entity by ID.
func (fiuo *FormInstanceUpdateOne) SetFormSpecID(id int) *FormInstanceUpdateOne {
	fiuo.mutation.SetFormSpecID(id)
	return fiuo
}

// SetNillableFormSpecID sets the "form_spec" edge to the FormSpec entity by ID if the given value is not nil.
func (fiuo *FormInstanceUpdateOne) SetNillableFormSpecID(id *int) *FormInstanceUpdateOne {
	if id != nil {
		fiuo = fiuo.SetFormSpecID(*id)
	}
	return fiuo
}

// SetFormSpec sets the "form_spec" edge to the FormSpec entity.
func (fiuo *FormInstanceUpdateOne) SetFormSpec(f *FormSpec) *FormInstanceUpdateOne {
	return fiuo.SetFormSpecID(f.ID)
}

// AddQuestionResponseIDs adds the "question_response" edge to the QuestionResponse entity by IDs.
func (fiuo *FormInstanceUpdateOne) AddQuestionResponseIDs(ids ...int) *FormInstanceUpdateOne {
	fiuo.mutation.AddQuestionResponseIDs(ids...)
	return fiuo
}

// AddQuestionResponse adds the "question_response" edges to the QuestionResponse entity.
func (fiuo *FormInstanceUpdateOne) AddQuestionResponse(q ...*QuestionResponse) *FormInstanceUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fiuo.AddQuestionResponseIDs(ids...)
}

// SetUsersID sets the "users" edge to the User entity by ID.
func (fiuo *FormInstanceUpdateOne) SetUsersID(id int) *FormInstanceUpdateOne {
	fiuo.mutation.SetUsersID(id)
	return fiuo
}

// SetNillableUsersID sets the "users" edge to the User entity by ID if the given value is not nil.
func (fiuo *FormInstanceUpdateOne) SetNillableUsersID(id *int) *FormInstanceUpdateOne {
	if id != nil {
		fiuo = fiuo.SetUsersID(*id)
	}
	return fiuo
}

// SetUsers sets the "users" edge to the User entity.
func (fiuo *FormInstanceUpdateOne) SetUsers(u *User) *FormInstanceUpdateOne {
	return fiuo.SetUsersID(u.ID)
}

// Mutation returns the FormInstanceMutation object of the builder.
func (fiuo *FormInstanceUpdateOne) Mutation() *FormInstanceMutation {
	return fiuo.mutation
}

// ClearFormSpec clears the "form_spec" edge to the FormSpec entity.
func (fiuo *FormInstanceUpdateOne) ClearFormSpec() *FormInstanceUpdateOne {
	fiuo.mutation.ClearFormSpec()
	return fiuo
}

// ClearQuestionResponse clears all "question_response" edges to the QuestionResponse entity.
func (fiuo *FormInstanceUpdateOne) ClearQuestionResponse() *FormInstanceUpdateOne {
	fiuo.mutation.ClearQuestionResponse()
	return fiuo
}

// RemoveQuestionResponseIDs removes the "question_response" edge to QuestionResponse entities by IDs.
func (fiuo *FormInstanceUpdateOne) RemoveQuestionResponseIDs(ids ...int) *FormInstanceUpdateOne {
	fiuo.mutation.RemoveQuestionResponseIDs(ids...)
	return fiuo
}

// RemoveQuestionResponse removes "question_response" edges to QuestionResponse entities.
func (fiuo *FormInstanceUpdateOne) RemoveQuestionResponse(q ...*QuestionResponse) *FormInstanceUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return fiuo.RemoveQuestionResponseIDs(ids...)
}

// ClearUsers clears the "users" edge to the User entity.
func (fiuo *FormInstanceUpdateOne) ClearUsers() *FormInstanceUpdateOne {
	fiuo.mutation.ClearUsers()
	return fiuo
}

// Where appends a list predicates to the FormInstanceUpdate builder.
func (fiuo *FormInstanceUpdateOne) Where(ps ...predicate.FormInstance) *FormInstanceUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FormInstanceUpdateOne) Select(field string, fields ...string) *FormInstanceUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FormInstance entity.
func (fiuo *FormInstanceUpdateOne) Save(ctx context.Context) (*FormInstance, error) {
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FormInstanceUpdateOne) SaveX(ctx context.Context) *FormInstance {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FormInstanceUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FormInstanceUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fiuo *FormInstanceUpdateOne) check() error {
	if v, ok := fiuo.mutation.Status(); ok {
		if err := forminstance.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FormInstance.status": %w`, err)}
		}
	}
	return nil
}

func (fiuo *FormInstanceUpdateOne) sqlSave(ctx context.Context) (_node *FormInstance, err error) {
	if err := fiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(forminstance.Table, forminstance.Columns, sqlgraph.NewFieldSpec(forminstance.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FormInstance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, forminstance.FieldID)
		for _, f := range fields {
			if !forminstance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != forminstance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.Status(); ok {
		_spec.SetField(forminstance.FieldStatus, field.TypeEnum, value)
	}
	if fiuo.mutation.FormSpecCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.FormSpecTable,
			Columns: []string{forminstance.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.FormSpecIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.FormSpecTable,
			Columns: []string{forminstance.FormSpecColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(formspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.RemovedQuestionResponseIDs(); len(nodes) > 0 && !fiuo.mutation.QuestionResponseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.QuestionResponseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   forminstance.QuestionResponseTable,
			Columns: []string{forminstance.QuestionResponseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(questionresponse.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fiuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.UsersTable,
			Columns: []string{forminstance.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fiuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   forminstance.UsersTable,
			Columns: []string{forminstance.UsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FormInstance{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{forminstance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
