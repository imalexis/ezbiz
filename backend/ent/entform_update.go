// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"ezbiz.com/ent/entform"
	"ezbiz.com/ent/entformquestion"
	"ezbiz.com/ent/predicate"
)

// EntFormUpdate is the builder for updating EntForm entities.
type EntFormUpdate struct {
	config
	hooks    []Hook
	mutation *EntFormMutation
}

// Where appends a list predicates to the EntFormUpdate builder.
func (efu *EntFormUpdate) Where(ps ...predicate.EntForm) *EntFormUpdate {
	efu.mutation.Where(ps...)
	return efu
}

// SetName sets the "name" field.
func (efu *EntFormUpdate) SetName(s string) *EntFormUpdate {
	efu.mutation.SetName(s)
	return efu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableName(s *string) *EntFormUpdate {
	if s != nil {
		efu.SetName(*s)
	}
	return efu
}

// SetDescription sets the "description" field.
func (efu *EntFormUpdate) SetDescription(s string) *EntFormUpdate {
	efu.mutation.SetDescription(s)
	return efu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableDescription(s *string) *EntFormUpdate {
	if s != nil {
		efu.SetDescription(*s)
	}
	return efu
}

// ClearDescription clears the value of the "description" field.
func (efu *EntFormUpdate) ClearDescription() *EntFormUpdate {
	efu.mutation.ClearDescription()
	return efu
}

// SetEnabled sets the "enabled" field.
func (efu *EntFormUpdate) SetEnabled(b bool) *EntFormUpdate {
	efu.mutation.SetEnabled(b)
	return efu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableEnabled(b *bool) *EntFormUpdate {
	if b != nil {
		efu.SetEnabled(*b)
	}
	return efu
}

// SetCreatedAt sets the "created_at" field.
func (efu *EntFormUpdate) SetCreatedAt(t time.Time) *EntFormUpdate {
	efu.mutation.SetCreatedAt(t)
	return efu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableCreatedAt(t *time.Time) *EntFormUpdate {
	if t != nil {
		efu.SetCreatedAt(*t)
	}
	return efu
}

// SetUpdatedAt sets the "updated_at" field.
func (efu *EntFormUpdate) SetUpdatedAt(t time.Time) *EntFormUpdate {
	efu.mutation.SetUpdatedAt(t)
	return efu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableUpdatedAt(t *time.Time) *EntFormUpdate {
	if t != nil {
		efu.SetUpdatedAt(*t)
	}
	return efu
}

// SetCreatedBy sets the "created_by" field.
func (efu *EntFormUpdate) SetCreatedBy(i int) *EntFormUpdate {
	efu.mutation.ResetCreatedBy()
	efu.mutation.SetCreatedBy(i)
	return efu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (efu *EntFormUpdate) SetNillableCreatedBy(i *int) *EntFormUpdate {
	if i != nil {
		efu.SetCreatedBy(*i)
	}
	return efu
}

// AddCreatedBy adds i to the "created_by" field.
func (efu *EntFormUpdate) AddCreatedBy(i int) *EntFormUpdate {
	efu.mutation.AddCreatedBy(i)
	return efu
}

// AddQuestionIDs adds the "questions" edge to the EntFormQuestion entity by IDs.
func (efu *EntFormUpdate) AddQuestionIDs(ids ...int) *EntFormUpdate {
	efu.mutation.AddQuestionIDs(ids...)
	return efu
}

// AddQuestions adds the "questions" edges to the EntFormQuestion entity.
func (efu *EntFormUpdate) AddQuestions(e ...*EntFormQuestion) *EntFormUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efu.AddQuestionIDs(ids...)
}

// Mutation returns the EntFormMutation object of the builder.
func (efu *EntFormUpdate) Mutation() *EntFormMutation {
	return efu.mutation
}

// ClearQuestions clears all "questions" edges to the EntFormQuestion entity.
func (efu *EntFormUpdate) ClearQuestions() *EntFormUpdate {
	efu.mutation.ClearQuestions()
	return efu
}

// RemoveQuestionIDs removes the "questions" edge to EntFormQuestion entities by IDs.
func (efu *EntFormUpdate) RemoveQuestionIDs(ids ...int) *EntFormUpdate {
	efu.mutation.RemoveQuestionIDs(ids...)
	return efu
}

// RemoveQuestions removes "questions" edges to EntFormQuestion entities.
func (efu *EntFormUpdate) RemoveQuestions(e ...*EntFormQuestion) *EntFormUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efu.RemoveQuestionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (efu *EntFormUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, efu.sqlSave, efu.mutation, efu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efu *EntFormUpdate) SaveX(ctx context.Context) int {
	affected, err := efu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (efu *EntFormUpdate) Exec(ctx context.Context) error {
	_, err := efu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efu *EntFormUpdate) ExecX(ctx context.Context) {
	if err := efu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (efu *EntFormUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entform.Table, entform.Columns, sqlgraph.NewFieldSpec(entform.FieldID, field.TypeInt))
	if ps := efu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efu.mutation.Name(); ok {
		_spec.SetField(entform.FieldName, field.TypeString, value)
	}
	if value, ok := efu.mutation.Description(); ok {
		_spec.SetField(entform.FieldDescription, field.TypeString, value)
	}
	if efu.mutation.DescriptionCleared() {
		_spec.ClearField(entform.FieldDescription, field.TypeString)
	}
	if value, ok := efu.mutation.Enabled(); ok {
		_spec.SetField(entform.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := efu.mutation.CreatedAt(); ok {
		_spec.SetField(entform.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := efu.mutation.UpdatedAt(); ok {
		_spec.SetField(entform.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := efu.mutation.CreatedBy(); ok {
		_spec.SetField(entform.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := efu.mutation.AddedCreatedBy(); ok {
		_spec.AddField(entform.FieldCreatedBy, field.TypeInt, value)
	}
	if efu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !efu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, efu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	efu.mutation.done = true
	return n, nil
}

// EntFormUpdateOne is the builder for updating a single EntForm entity.
type EntFormUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EntFormMutation
}

// SetName sets the "name" field.
func (efuo *EntFormUpdateOne) SetName(s string) *EntFormUpdateOne {
	efuo.mutation.SetName(s)
	return efuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableName(s *string) *EntFormUpdateOne {
	if s != nil {
		efuo.SetName(*s)
	}
	return efuo
}

// SetDescription sets the "description" field.
func (efuo *EntFormUpdateOne) SetDescription(s string) *EntFormUpdateOne {
	efuo.mutation.SetDescription(s)
	return efuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableDescription(s *string) *EntFormUpdateOne {
	if s != nil {
		efuo.SetDescription(*s)
	}
	return efuo
}

// ClearDescription clears the value of the "description" field.
func (efuo *EntFormUpdateOne) ClearDescription() *EntFormUpdateOne {
	efuo.mutation.ClearDescription()
	return efuo
}

// SetEnabled sets the "enabled" field.
func (efuo *EntFormUpdateOne) SetEnabled(b bool) *EntFormUpdateOne {
	efuo.mutation.SetEnabled(b)
	return efuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableEnabled(b *bool) *EntFormUpdateOne {
	if b != nil {
		efuo.SetEnabled(*b)
	}
	return efuo
}

// SetCreatedAt sets the "created_at" field.
func (efuo *EntFormUpdateOne) SetCreatedAt(t time.Time) *EntFormUpdateOne {
	efuo.mutation.SetCreatedAt(t)
	return efuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableCreatedAt(t *time.Time) *EntFormUpdateOne {
	if t != nil {
		efuo.SetCreatedAt(*t)
	}
	return efuo
}

// SetUpdatedAt sets the "updated_at" field.
func (efuo *EntFormUpdateOne) SetUpdatedAt(t time.Time) *EntFormUpdateOne {
	efuo.mutation.SetUpdatedAt(t)
	return efuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableUpdatedAt(t *time.Time) *EntFormUpdateOne {
	if t != nil {
		efuo.SetUpdatedAt(*t)
	}
	return efuo
}

// SetCreatedBy sets the "created_by" field.
func (efuo *EntFormUpdateOne) SetCreatedBy(i int) *EntFormUpdateOne {
	efuo.mutation.ResetCreatedBy()
	efuo.mutation.SetCreatedBy(i)
	return efuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (efuo *EntFormUpdateOne) SetNillableCreatedBy(i *int) *EntFormUpdateOne {
	if i != nil {
		efuo.SetCreatedBy(*i)
	}
	return efuo
}

// AddCreatedBy adds i to the "created_by" field.
func (efuo *EntFormUpdateOne) AddCreatedBy(i int) *EntFormUpdateOne {
	efuo.mutation.AddCreatedBy(i)
	return efuo
}

// AddQuestionIDs adds the "questions" edge to the EntFormQuestion entity by IDs.
func (efuo *EntFormUpdateOne) AddQuestionIDs(ids ...int) *EntFormUpdateOne {
	efuo.mutation.AddQuestionIDs(ids...)
	return efuo
}

// AddQuestions adds the "questions" edges to the EntFormQuestion entity.
func (efuo *EntFormUpdateOne) AddQuestions(e ...*EntFormQuestion) *EntFormUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efuo.AddQuestionIDs(ids...)
}

// Mutation returns the EntFormMutation object of the builder.
func (efuo *EntFormUpdateOne) Mutation() *EntFormMutation {
	return efuo.mutation
}

// ClearQuestions clears all "questions" edges to the EntFormQuestion entity.
func (efuo *EntFormUpdateOne) ClearQuestions() *EntFormUpdateOne {
	efuo.mutation.ClearQuestions()
	return efuo
}

// RemoveQuestionIDs removes the "questions" edge to EntFormQuestion entities by IDs.
func (efuo *EntFormUpdateOne) RemoveQuestionIDs(ids ...int) *EntFormUpdateOne {
	efuo.mutation.RemoveQuestionIDs(ids...)
	return efuo
}

// RemoveQuestions removes "questions" edges to EntFormQuestion entities.
func (efuo *EntFormUpdateOne) RemoveQuestions(e ...*EntFormQuestion) *EntFormUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return efuo.RemoveQuestionIDs(ids...)
}

// Where appends a list predicates to the EntFormUpdate builder.
func (efuo *EntFormUpdateOne) Where(ps ...predicate.EntForm) *EntFormUpdateOne {
	efuo.mutation.Where(ps...)
	return efuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (efuo *EntFormUpdateOne) Select(field string, fields ...string) *EntFormUpdateOne {
	efuo.fields = append([]string{field}, fields...)
	return efuo
}

// Save executes the query and returns the updated EntForm entity.
func (efuo *EntFormUpdateOne) Save(ctx context.Context) (*EntForm, error) {
	return withHooks(ctx, efuo.sqlSave, efuo.mutation, efuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (efuo *EntFormUpdateOne) SaveX(ctx context.Context) *EntForm {
	node, err := efuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (efuo *EntFormUpdateOne) Exec(ctx context.Context) error {
	_, err := efuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (efuo *EntFormUpdateOne) ExecX(ctx context.Context) {
	if err := efuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (efuo *EntFormUpdateOne) sqlSave(ctx context.Context) (_node *EntForm, err error) {
	_spec := sqlgraph.NewUpdateSpec(entform.Table, entform.Columns, sqlgraph.NewFieldSpec(entform.FieldID, field.TypeInt))
	id, ok := efuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "EntForm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := efuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entform.FieldID)
		for _, f := range fields {
			if !entform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := efuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := efuo.mutation.Name(); ok {
		_spec.SetField(entform.FieldName, field.TypeString, value)
	}
	if value, ok := efuo.mutation.Description(); ok {
		_spec.SetField(entform.FieldDescription, field.TypeString, value)
	}
	if efuo.mutation.DescriptionCleared() {
		_spec.ClearField(entform.FieldDescription, field.TypeString)
	}
	if value, ok := efuo.mutation.Enabled(); ok {
		_spec.SetField(entform.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := efuo.mutation.CreatedAt(); ok {
		_spec.SetField(entform.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := efuo.mutation.UpdatedAt(); ok {
		_spec.SetField(entform.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := efuo.mutation.CreatedBy(); ok {
		_spec.SetField(entform.FieldCreatedBy, field.TypeInt, value)
	}
	if value, ok := efuo.mutation.AddedCreatedBy(); ok {
		_spec.AddField(entform.FieldCreatedBy, field.TypeInt, value)
	}
	if efuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !efuo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := efuo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   entform.QuestionsTable,
			Columns: []string{entform.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entformquestion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &EntForm{config: efuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, efuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	efuo.mutation.done = true
	return _node, nil
}
