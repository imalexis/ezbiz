// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"ezbiz.com/ent/question"
	"ezbiz.com/ent/questiongroup"
)

// Question is the model entity for the Question schema.
type Question struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// label is unique in every FormSpec, it may be duplicated in different FormSpec
	Label string `json:"label,omitempty"`
	// title of the question
	Title string `json:"title,omitempty"`
	// Type holds the value of the "type" field.
	Type question.Type `json:"type,omitempty"`
	// Required holds the value of the "required" field.
	Required bool `json:"required,omitempty"`
	// ExtraData holds the value of the "extra_data" field.
	ExtraData string `json:"extra_data,omitempty"`
	// Rule holds the value of the "rule" field.
	Rule string `json:"rule,omitempty"`
	// Dependencies holds the value of the "dependencies" field.
	Dependencies string `json:"dependencies,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy int `json:"created_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges                   QuestionEdges `json:"edges"`
	question_group_question *int
	selectValues            sql.SelectValues
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// FromQuestionGroup holds the value of the from_question_group edge.
	FromQuestionGroup *QuestionGroup `json:"from_question_group,omitempty"`
	// QuestionResponse holds the value of the question_response edge.
	QuestionResponse []*QuestionResponse `json:"question_response,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedQuestionResponse map[string][]*QuestionResponse
}

// FromQuestionGroupOrErr returns the FromQuestionGroup value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) FromQuestionGroupOrErr() (*QuestionGroup, error) {
	if e.loadedTypes[0] {
		if e.FromQuestionGroup == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: questiongroup.Label}
		}
		return e.FromQuestionGroup, nil
	}
	return nil, &NotLoadedError{edge: "from_question_group"}
}

// QuestionResponseOrErr returns the QuestionResponse value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) QuestionResponseOrErr() ([]*QuestionResponse, error) {
	if e.loadedTypes[1] {
		return e.QuestionResponse, nil
	}
	return nil, &NotLoadedError{edge: "question_response"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldRequired:
			values[i] = new(sql.NullBool)
		case question.FieldID, question.FieldCreatedBy:
			values[i] = new(sql.NullInt64)
		case question.FieldLabel, question.FieldTitle, question.FieldType, question.FieldExtraData, question.FieldRule, question.FieldDependencies:
			values[i] = new(sql.NullString)
		case question.FieldCreatedAt, question.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case question.ForeignKeys[0]: // question_group_question
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case question.FieldLabel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field label", values[i])
			} else if value.Valid {
				q.Label = value.String
			}
		case question.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				q.Title = value.String
			}
		case question.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				q.Type = question.Type(value.String)
			}
		case question.FieldRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field required", values[i])
			} else if value.Valid {
				q.Required = value.Bool
			}
		case question.FieldExtraData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field extra_data", values[i])
			} else if value.Valid {
				q.ExtraData = value.String
			}
		case question.FieldRule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field rule", values[i])
			} else if value.Valid {
				q.Rule = value.String
			}
		case question.FieldDependencies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dependencies", values[i])
			} else if value.Valid {
				q.Dependencies = value.String
			}
		case question.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case question.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case question.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				q.CreatedBy = int(value.Int64)
			}
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_group_question", value)
			} else if value.Valid {
				q.question_group_question = new(int)
				*q.question_group_question = int(value.Int64)
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Question.
// This includes values selected through modifiers, order, etc.
func (q *Question) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryFromQuestionGroup queries the "from_question_group" edge of the Question entity.
func (q *Question) QueryFromQuestionGroup() *QuestionGroupQuery {
	return NewQuestionClient(q.config).QueryFromQuestionGroup(q)
}

// QueryQuestionResponse queries the "question_response" edge of the Question entity.
func (q *Question) QueryQuestionResponse() *QuestionResponseQuery {
	return NewQuestionClient(q.config).QueryQuestionResponse(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return NewQuestionClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("label=")
	builder.WriteString(q.Label)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(q.Title)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", q.Type))
	builder.WriteString(", ")
	builder.WriteString("required=")
	builder.WriteString(fmt.Sprintf("%v", q.Required))
	builder.WriteString(", ")
	builder.WriteString("extra_data=")
	builder.WriteString(q.ExtraData)
	builder.WriteString(", ")
	builder.WriteString("rule=")
	builder.WriteString(q.Rule)
	builder.WriteString(", ")
	builder.WriteString("dependencies=")
	builder.WriteString(q.Dependencies)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(fmt.Sprintf("%v", q.CreatedBy))
	builder.WriteByte(')')
	return builder.String()
}

// NamedQuestionResponse returns the QuestionResponse named value or an error if the edge was not
// loaded in eager-loading with this name.
func (q *Question) NamedQuestionResponse(name string) ([]*QuestionResponse, error) {
	if q.Edges.namedQuestionResponse == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := q.Edges.namedQuestionResponse[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (q *Question) appendNamedQuestionResponse(name string, edges ...*QuestionResponse) {
	if q.Edges.namedQuestionResponse == nil {
		q.Edges.namedQuestionResponse = make(map[string][]*QuestionResponse)
	}
	if len(edges) == 0 {
		q.Edges.namedQuestionResponse[name] = []*QuestionResponse{}
	} else {
		q.Edges.namedQuestionResponse[name] = append(q.Edges.namedQuestionResponse[name], edges...)
	}
}

// Questions is a parsable slice of Question.
type Questions []*Question
