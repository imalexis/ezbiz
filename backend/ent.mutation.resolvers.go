package ezbiz

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"errors"
	"fmt"
	"io"
	"log"
	"os"

	"ezbiz.com/ent"
	"github.com/99designs/gqlgen/graphql"
)

// CreateFormSpec is the resolver for the createFormSpec field.
func (r *mutationResolver) CreateFormSpec(ctx context.Context, input ent.CreateFormSpecInput) (*ent.FormSpec, error) {
	return r.client.FormSpec.Create().SetInput(input).Save(ctx)
}

// UpdateFormSpec is the resolver for the updateFormSpec field.
func (r *mutationResolver) UpdateFormSpec(ctx context.Context, id int, input ent.UpdateFormSpecInput) (*ent.FormSpec, error) {
	return r.client.FormSpec.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateFormInstance is the resolver for the createFormInstance field.
func (r *mutationResolver) CreateFormInstance(ctx context.Context, input ent.CreateFormInstanceInput) (*ent.FormInstance, error) {
	inst, err := r.client.FormInstance.Create().SetInput(input).Save(ctx)
	if err != nil {
		log.Printf("create form instance failed: %s", err.Error())
		return nil, err
	}
	formSpec := r.client.FormSpec.GetX(ctx, *input.FormSpecID)
	questionGroups := formSpec.QueryQuestionGroups().AllX(ctx)
	formInstanceId := inst.ID
	for _, group := range questionGroups {
		questions := group.QueryQuestion().AllX(ctx)
		for _, question := range questions {
			input := ent.CreateQuestionResponseInput{
				Label:          question.Label,
				Value:          "",
				QuestionID:     &question.ID,
				FormInstanceID: &formInstanceId,
			}
			_, _ = r.client.QuestionResponse.Create().SetInput(input).Save(ctx)
		}
	}
	// Iterate this form, find all questions, and instanceId
	return inst, nil
}

// UpdateFormInstance is the resolver for the updateFormInstance field.
func (r *mutationResolver) UpdateFormInstance(ctx context.Context, id int, input ent.UpdateFormInstanceInput) (*ent.FormInstance, error) {
	return r.client.FormInstance.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateQuestionGroup is the resolver for the createQuestionGroup field.
func (r *mutationResolver) CreateQuestionGroup(ctx context.Context, input ent.CreateQuestionGroupInput) (*ent.QuestionGroup, error) {
	return r.client.QuestionGroup.Create().SetInput(input).Save(ctx)
}

// UpdateQuestionGroup is the resolver for the updateQuestionGroup field.
func (r *mutationResolver) UpdateQuestionGroup(ctx context.Context, id int, input ent.UpdateQuestionGroupInput) (*ent.QuestionGroup, error) {
	return r.client.QuestionGroup.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateQuestion is the resolver for the createQuestion field.
func (r *mutationResolver) CreateQuestion(ctx context.Context, input ent.CreateQuestionInput) (*ent.Question, error) {
	return r.client.Question.Create().SetInput(input).Save(ctx)
}

// UpdateQuestion is the resolver for the updateQuestion field.
func (r *mutationResolver) UpdateQuestion(ctx context.Context, id int, input ent.UpdateQuestionInput) (*ent.Question, error) {
	return r.client.Question.UpdateOneID(id).SetInput(input).Save(ctx)
}

// CreateQuestionResponse is the resolver for the createQuestionResponse field.
func (r *mutationResolver) CreateQuestionResponse(ctx context.Context, input ent.CreateQuestionResponseInput) (*ent.QuestionResponse, error) {
	return r.client.QuestionResponse.Create().SetInput(input).Save(ctx)
}

// UpdateQuestionResponse is the resolver for the updateQuestionResponse field.
func (r *mutationResolver) UpdateQuestionResponse(ctx context.Context, id int, input ent.UpdateQuestionResponseInput) (*ent.QuestionResponse, error) {
	return r.client.QuestionResponse.UpdateOneID(id).SetInput(input).Save(ctx)
}

// SingleUpload is the resolver for the singleUpload field.
func (r *mutationResolver) SingleUpload(ctx context.Context, file graphql.Upload) (*File, error) {
	fmt.Println("SingleUpload", file.Filename)
	content, err := io.ReadAll(file.File)
	if err != nil {
		log.Println("read file error", err)
	}
	err = os.WriteFile(file.Filename, content, 0644)
	if err != nil {
		log.Println("write file error", err)
	}
	ret := &File{
		Name: file.Filename,
		Size: int(file.Size),
	}
	return ret, nil
}

// MultipleUpload is the resolver for the multipleUpload field.
func (r *mutationResolver) MultipleUpload(ctx context.Context, req []*UploadFile) ([]*File, error) {
	if len(req) == 0 {
		return nil, errors.New("empty list")
	}
	var resp []*File
	for i := range req {
		content, err := io.ReadAll(req[i].File.File)
		if err != nil {
			return []*File{}, err
		}
		resp = append(resp, &File{
			Name:    req[i].File.Filename,
			Content: string(content),
		})
	}
	return resp, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
